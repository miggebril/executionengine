<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>TradingTechnologies.TTAPI</name>
  </assembly>
  <members>
    <member name="T:TradingTechnologies.TTAPI.IExtendedData">
      <summary>Provides an interface for adding custom key/value pairs for user-defined data</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.IExtendedData.GetStringValue(System.UInt16)">
      <summary>Gets the dictionary string value for a given using UTF8Encoding</summary>
      <returns> containing the value corresponding to the key or <strong>null</strong> if no value exists</returns>
      <param name="key">Number of the key to query</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.IExtendedData.SetStringValue(System.UInt16,System.String)">
      <summary>Sets the dictionary value using UTF8Encoding</summary>
      <param name="key"> value to use as the key for the value</param>
      <param name="value"> value to store</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.IExtendedData.MaxKey">
      <summary>Gets the maximum key value that can be used with this dictionary</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.IExtendedData.MinKey">
      <summary>Gets the minimum key value that can be used with this dictionary</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AccountType">
      <summary>Describes the supported account types that define the trader's relationship with a clearing house</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.P3">
      <summary>(NYSE Liffe products) House/Give-Up or System Allocation account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.P2">
      <summary>Second principal account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.P1">
      <summary>First principal account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.G2">
      <summary>Designated Give-Up Trade/ Automatic Allocation account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.G1">
      <summary>Pre-designated Give-Up Trade account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A9">
      <summary>Ninth agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A8">
      <summary>Eighth agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A7">
      <summary>Seventh agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A6">
      <summary>Sixth agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A5">
      <summary>Fifth agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A4">
      <summary>Fourth agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.M3">
      <summary>Market Maker/Give-Up System Allocation account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.M2">
      <summary>Second market maker account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.M1">
      <summary>First market maker account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.G3">
      <summary>Give-Up System Allocation account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A3">
      <summary>(NYSE Liffe products) Customer/Give-Up or System Allocation account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A2">
      <summary>(NYSE Liffe products) Customer/Automatic Allocation account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.A1">
      <summary>First agent account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.U3">
      <summary>Unallocated/System account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.U2">
      <summary>Unallocated/Automatic account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.U1">
      <summary>Unallocated account</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccountType.None">
      <summary>Unspecified account type</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AccumulateTriggerQuantity">
      <summary>Possible actions to take with the trigger quantity when the trigger price retreats</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccumulateTriggerQuantity.None">
      <summary>Takes no action because the order does not use a trigger quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccumulateTriggerQuantity.Accumulate">
      <summary>Continues accumulating the trigger quantity when the price regains the trigger price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AccumulateTriggerQuantity.Reset">
      <summary>Resets the trigger quantity if the market retreats from the trigger price after reaching it</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ActionCode">
      <summary>Describes the different actions supported for orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ActionCode.Sell">
      <summary>Submits a Sell order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ActionCode.Cross">
      <summary>Submits a Cross order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ActionCode.Buy">
      <summary>Submits a Buy order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ActionCode.BuySell">
      <summary>Submits a BuySell order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AuditTrailSeverity">
      <summary>Levels of error severity to associate with custom information written to the X_TRADER audit trail logs</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuditTrailSeverity.Info">
      <summary>Messages assigned an Info severity level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuditTrailSeverity.Error">
      <summary>Messages assigned an Error severity level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuditTrailSeverity.Warning">
      <summary>Messages assigned an Warning severity level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuditTrailSeverity.Reject">
      <summary>Reject messages</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuditTrailSeverity.Ok">
      <summary>Acknowledgments from TT Gateways</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuditTrailSeverity.Alert">
      <summary>Messages assigned an Alert severity level</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AuthenticationResultCode">
      <summary>Possible codes returned from attempts to log in to TT User Setup</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.UnspecifiedError">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.PasswordWillExpireSoon">
      <summary>The password for the username needs to be changed because the TT User Setup administrator set a password lifetime.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.AppVersionComboNotAllowed">
      <summary>The credentials are not authorized to log in with the current version of the application software.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.EncryptionDecryptionFailed">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.ForceLogoffSwitchIsSet">
      <summary>The TT User Setup administrator enabled the force log off feature for the login credentials</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.FromMultibrokerClientToNonMultibrokerServer">
      <summary>(Currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.FromNonMultibrokerClientToMultibrokerServer">
      <summary>(Currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.TooSoonAfterSuccessfulAuthentication">
      <summary>The login attempt failed because the credentials were used recently to log in successfully.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.AlreadyLoggedInOnMaxIps">
      <summary>The credentials are currently logged in from too many locations.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.SuccessWithMessage">
      <summary>The login attempt succeeded, but also returned a message.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.PasswordHasExpired">
      <summary>The password for the username is no longer valid.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.MustResetPassword">
      <summary>The TT User Setup administrator requires the user to change the password for this username.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.TooManyDaysOfInactivity">
      <summary>The user was logged out because of extended inactivity.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.NotActive">
      <summary>The TT User Setup administrator de-activated the user credentials.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.DontHavePermission">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.TooManyFailedAttempts">
      <summary>The login attempt failed because too many attempts were made with invalid credentials.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.InvalidUsernameOrPassword">
      <summary>The login credentials are not defined in TT User Setup.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.Success">
      <summary>The login attempt succeeded.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.Unknown">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.SystemError">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AuthenticationResultCode.TimedOut">
      <summary>The application did not receive a response from the TT Gateway.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AvoidCrossing">
      <summary>Actions to take if a new order would cross a working order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AvoidCrossing.DeleteOld">
      <summary>Delete the working order and submit the new one</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AvoidCrossing.RejectNew">
      <summary>Reject the new order and leaving the working order in the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.AvoidCrossing.NoCheck">
      <summary>Submit the new order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.BuySell">
      <summary>Defines constants describing the different sides of the order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.BuySell.Sell">
      <summary>Sell order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.BuySell.Buy">
      <summary>Buy order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.BuySell.Unknown">
      <summary>Unknown side of the order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ChangeDirection">
      <summary>Defines constants for the direction of the change in a field value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ChangeDirection.Unknown">
      <summary>Could not determine whether the field value changed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ChangeDirection.Up">
      <summary>Field value increased</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ChangeDirection.NoChange">
      <summary>Field value did not change</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ChangeDirection.Down">
      <summary>Field value decreased</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Combination">
      <summary>Defines constants representing Exchange-supported strategies and spreads</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ConnectionResultCode">
      <summary>Defines constants for the possible codes returned from attempts to start an X_TRADER mode application</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.UnspecifiedError">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.PasswordWillExpireSoon">
      <summary>The password for the username needs to be changed because the TT User Setup administrator set a password lifetime.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.AppVersionComboNotAllowed">
      <summary>The credentials are not authorized to log in with the current version of the application software.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.EncryptionDecryptionFailed">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.ForceLogoffSwitchIsSet">
      <summary>The TT User Setup administrator enabled the force log off feature for the login credentials</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.FromMultibrokerClientToNonMultibrokerServer">
      <summary>(Currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.FromNonMultibrokerClientToMultibrokerServer">
      <summary>(Currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.AlreadyLoggedInOnMaxIps">
      <summary>The credentials are currently logged in from too many locations.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.SuccessWithMessage">
      <summary>The login attempt succeeded, but also returned a message.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.PasswordHasExpired">
      <summary>The password for the username is no longer valid.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.MustResetPassword">
      <summary>The TT User Setup administrator requires the user to change the password for this username.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.TooManyDaysOfInactivity">
      <summary>The user was logged out because of extended inactivity.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.NotActive">
      <summary>The TT User Setup administrator de-activated the user credentials.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.DontHavePermission">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.TooManyFailedAttempts">
      <summary>The login attempt failed because too many attempts were made with invalid credentials.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.InvalidUsernameOrPassword">
      <summary>The login credentials are not defined in TT User Setup.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.Success">
      <summary>The login attempt succeeded.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.Unknown">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.SystemError">
      <summary>An internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ConnectionResultCode.TimedOut">
      <summary>The application did not receive a response from the TT Gateway.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.DispatcherExceptionType">
      <summary>Defines constants for types of exceptions thrown when trying to attach or use a Dispatcher object</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.DispatcherExceptionType.NotAttached">
      <summary>Failed because the Dispatcher object is not attached</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.DispatcherExceptionType.AlreadyAttached">
      <summary>Failed because the Dispatcher object is attached</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.EndTimeAction">
      <summary>Defines constants for actions to perform when a synthetic order reaches its end time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.EndTimeAction.Leave">
      <summary>Leaves the remaining quantity in the market until the order is filled or canceled</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.EndTimeAction.Cancel">
      <summary>Cancels the order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.EndTimeAction.None">
      <summary>Performs no action</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.EndTimeAction.GoToMarket">
      <summary>Sends a market order for the remaining quantity</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FeedAvailability">
      <summary>Defines constants for the possible states of a Price, Order, or Fill feed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FeedAvailability.Up">
      <summary>The application is connected to the market feed.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FeedAvailability.Down">
      <summary>The application is not connected to the market feed.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FeeType">
      <summary>Defines constants for the possible fees associated with trading</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FieldDisplayFormat">
      <summary>Defines constants for the display formats for price field data</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldDisplayFormat.Currency">
      <summary>Expresses the price in the default currency</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldDisplayFormat.Ticks">
      <summary>Expresses the price as ticks (integer value)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldDisplayFormat.Decimal">
      <summary>Expresses the price as points (decimal value)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldDisplayFormat.Native">
      <summary>Expresses the price in the native currency</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FieldId">
      <summary>Defines constants for the available contract market data fields</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BestAskId">
      <summary>Order ID of the best ask</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BestBidId">
      <summary>Order ID of the best bid</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.NetChangePercent">
      <summary>Net change represented as a percentage</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.NetChange">
      <summary>Difference between last-traded price and the settlement price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.MergedAskCounterparty">
      <summary>ID of the counterparty that sent an order reflected in the detailed Ask depth</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.MergedAskCount">
      <summary>Number of direct and implied ask orders at a price level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BestAskQuantity">
      <summary>Quantity available at the better of the implied and direct ask prices</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BestAskPrice">
      <summary>Better of the implied and direct ask prices</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.MergedBidCounterparty">
      <summary>ID of the counterparty that sent an order reflected in the detailed Bid depth</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.MergedBidCount">
      <summary>Number of direct and implied bid orders at a price level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BestBidQuantity">
      <summary>Quantity available at the better of the implied and direct bid prices</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BestBidPrice">
      <summary>Better of the implied and direct bid prices</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.CalculatedImpliedAskQuantity">
      <summary>Quantity available at the TT-calculated ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.CalculatedImpliedAskPrice">
      <summary>TT-calculated implied ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.CalculatedImpliedBidQuantity">
      <summary>Quantity available at the TT-calculated bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.CalculatedImpliedBidPrice">
      <summary>TT-calculated implied bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.AskMarketQuantity">
      <summary>Aggregate quantity of orders on the Ask side of a pre-open market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.BidMarketQuantity">
      <summary>Aggregate quantity of orders on the Bid side of a pre-open market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeSettlPrc">
      <summary>Project price when the market closes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeAskQuantity">
      <summary>Projected quantity at the indicative ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeAskPrice">
      <summary>Projected ask price when the market opens</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeBidQuantity">
      <summary>Projected quantity at the indicative bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeBidPrice">
      <summary>Projected bid price when the market opens</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeOpenQuantity">
      <summary>Projected quantity at the indicative open price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeOpenPrice">
      <summary>Projected price when the market opens</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.IndicativeClosePrice">
      <summary>Projected price when the market closes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.SessionRollover">
      <summary>Whether the Exchange started a new trading session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.CurrentSessionId">
      <summary>ID for the current trading session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.WorkupState">
      <summary>(BrokerTec only) Current workup state</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.WorkupPrice">
      <summary>(BrokerTec only) Current workup price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.OtcTradeQuantity">
      <summary>Quantity of the last wholesale trade</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.OtcTradePrice">
      <summary>Price of the last wholesale trade for the contract</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.ImbalanceQuantity">
      <summary>Difference between bids and asks at a given price in the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.MarketSide">
      <summary>Side of the market associated with the price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.SeriesStatus">
      <summary>Status of the contract on the Exchange, such as Trading, Pretrade, etc.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.ImpliedAskQuantity">
      <summary>Quantity available at the Exchange-provided implied ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.ImpliedAskPrice">
      <summary>Exchange-provided implied ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.ImpliedBidQuantity">
      <summary>Quantity available at the Exchange-provided implied bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.ImpliedBidPrice">
      <summary>Exchange-provided implied bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.SettlementPrice">
      <summary>Exchange-supplied final price for the previous trading session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.ClosePrice">
      <summary>Closing price for the session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.OpenPrice">
      <summary>Opening price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.LowPrice">
      <summary>Lowest price of the day for the contract</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.HighPrice">
      <summary>Highest price of the day for the contract</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.LastTradedQuantity">
      <summary>Quantity of all trades at the last traded price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.TotalTradedQuantity">
      <summary>Total number of contracts traded for the trading day</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.LastTradedPrice">
      <summary>Price at which the contract last traded</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectAskCounterparty">
      <summary>ID of the counterparty with the direct ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectAskCount">
      <summary>Number of orders that comprise the direct ask quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectAskQuantity">
      <summary>Quantity available at the direct ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectAskPrice">
      <summary>Direct ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectBidCounterparty">
      <summary>ID of the counterparty with the direct bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectBidCount">
      <summary>Number of orders that comprise the direct bid quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectBidQuantity">
      <summary>Quantity available at the direct bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldId.DirectBidPrice">
      <summary>Direct bid price</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FieldIdType">
      <summary>Defines constants identifying the types of data stored in a </summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.Other">
      <summary>Contains a type of value not represented in this enumeration</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.Double">
      <summary>Contains a decimal value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.UInt64">
      <summary>Contains an unsigned, 64-bit integer value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.Unknown">
      <summary>Represents an unknown type</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.Piq">
      <summary>Contains a position-in-queue value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.State">
      <summary>Contains a state (enum)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.Quantity">
      <summary>Contains a quantity (integer)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldIdType.Price">
      <summary>Contains a price value (integer)</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FieldType">
      <summary>Defines constants for the data types of the underlying field value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldType.Double">
      <summary>64-bit decimal value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldType.UInt64">
      <summary>64-bit unsigned integer value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FieldType.Normal">
      <summary>32-bit value (such as String, Int)</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillTransaction">
      <summary>Defines constants for types of Fill transactions</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillTransaction.DEPRECATED_ROLLOVER">
      <summary>Fill represents a fill adjustment from a session rollover</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillTransaction.DEPRECATED_CLEARING_ERROR">
      <summary>Fill is a result of an Exchange clearing error</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillTransaction.TP_INTERNAL_FILL_ADJUSTMENT">
      <summary>Fill represents a manual adjustment</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillTransaction.TP_INTERNAL_FILL_DELETE">
      <summary>Fill represents a deleted order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillTransaction.DEPRECATED_FAST_FILL">
      <summary>Fill contains fill information retrieved from an Order feed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillTransaction.TT_NORMAL_FILL">
      <summary>Fill is a result from a trade transaction</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillType">
      <summary>Defines constants for the types of executed fills</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillType.Full">
      <summary>Indicates the corresponding order was filled completely</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillType.Partial">
      <summary>Indicates a portion of the corresponding order was filled</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillUpdateFlag">
      <summary>Defines constants for activities that cause a fill update</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.Unknown">
      <summary>Some internal error occurred.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.InternalUserField">
      <summary>One or more of the FFT fields changed.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.ConfirmFillRecord">
      <summary>Response has been received for a confirm request, updating the confirm record.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.FillFeedFields">
      <summary>Fill already received from the fill server. Fill feed specific fields, such as the order number or transaction id could have been updated.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.PriceNotAvailable">
      <summary>Price was not sent by the TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.Price">
      <summary>Price was updated (applies only to SOD records)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.FillUpdateFlag.PositionAndPrice">
      <summary>Both the position and the price were updated (applies only to start-of-day (SOD) records)</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.HedgeType">
      <summary>Defines constants for supported types of hedge orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.HedgeType.MLMOrder">
      <summary>Limit Market order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.HedgeType.MarketOrder">
      <summary>Market order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.HedgeType.LimitOrder">
      <summary>Limit order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.HoldOrderFeatures">
      <summary>Defines constants for possible actions to take when resubmitting a held order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.HoldOrderFeatures.AutoSubmit">
      <summary>Resubmits the order using the same site order key</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.HoldOrderFeatures.CausesNewOrderId">
      <summary>Deletes the existing order and resubmits the order with a new site order key</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.HoldOrderFeatures.None">
      <summary>No action defined</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentFeature">
      <summary>Defines constants for possible features that TT Gateways natively support for an Instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.SnipeOrder">
      <summary>TT Autospreader Synthetic Engine supports sniper orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.RepeatOrder">
      <summary>TT Gateway natively supports repeating orders for an instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.QueueHolderOrder">
      <summary>TT Gateway natively supports queue holder orders for an instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.InvertedMarket">
      <summary>TT Gateway inverts prices, going from high to low, as is typically the case with instruments that trade in yield</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.TimeAndSales">
      <summary>TT Gateway natively supports non-coalesced prices (delivers records of every trade) for an instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.LastTradedQuantityNotCumulative">
      <summary>TT Gateway does not accumulate quantities for Time and Sales updates</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.TradedInFlow">
      <summary>Instrument expresses quantities as flow (applies only to energy contracts)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.Workup">
      <summary>TT Gateway natively supports workup markets for an instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentFeature.MarketDepth">
      <summary>TT Gateway provides market depth for an instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentNameFormat">
      <summary>Defines constants for ways to represent the name of a contract</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.Short">
      <summary>Uses the Expiry format but replaces the month with the month code, such as Z11 for Dec11</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.User">
      <summary>Uses the user-defined alias specified in X_TRADER; if not defined in X_TRADER, uses the <strong>Normal</strong> name</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.Expiration">
      <summary>Uses the contract's expiry with TT formatting applied, such as Dec11</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.RTD">
      <summary>Uses a formatted name compatible with the XTAPI RTD Server (mainly for spreads)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.FullUser">
      <summary>Uses the user-defined full name specified in X_TRADER; if not defined in X_TRADER, uses the <strong>Full</strong> name</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.NormalUser">
      <summary>Uses the user-defined normal name specified in X_TRADER; if not defined in X_TRADER, uses the <strong>Normal</strong> name</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.ExpiryUser">
      <summary>Uses the user-defined expiry specified in X_TRADER; if not defined in X_TRADER, uses the <strong>Expiry</strong> name</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.ExchangeProductName">
      <summary>Uses the product name defined by the Exchange, even if the TT Gateway overrides the product name</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.TT_ProductName">
      <summary>(TT internal use only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.ExchangeSeriesName">
      <summary>Uses the contract name defined by the Exchange, even if the TT Gateway overrides the contract name</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.TT_SeriesName">
      <summary>(TT internal use only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.Normal">
      <summary>Uses the normal name, such as ES Dec11</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.Expiry">
      <summary>Uses the contract's expiry, such as Dec11</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentNameFormat.Full">
      <summary>Uses the fully-qualified name, such as TTSIM ES Dec11</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LeftoverAction">
      <summary>Defines constants for possible actions to take for synthetic slicer orders still working at the end of a slice</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverAction.Join">
      <summary>Merges the resting order quantity with the next disclosed quantity order at the next disclosed quantity's price level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverAction.Leave">
      <summary>Leaves the resting order as is</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverAction.None">
      <summary>Indicates the order is not a slicer order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverAction.Payup">
      <summary>Moves the price a number of ticks</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverAction.GoToMarket">
      <summary>Converts the resting order to a market order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LeftoverActionTime">
      <summary>Defines constants that represent when to take a LeftoverAction for a
slicer order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverActionTime.None">
      <summary>Perform no leftover action for this slice</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverActionTime.AtEnd">
      <summary>Perform the action when the slice expires</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LeftoverActionTime.HalfLife">
      <summary>Perform the action halfway through the slice</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LicenseIssueEventArgs.GatewayFeedType">
      <summary>Defines constants for types of Gateway Feeds</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LicenseIssueEventArgs.GatewayFeedType.Order">
      <summary>Order Feed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LicenseIssueEventArgs.GatewayFeedType.Fill">
      <summary>Fill Feed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LicenseIssueEventArgs.GatewayFeedType.Price">
      <summary>Price Feed</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LimitPriceType">
      <summary>Defines constants for possible types of prices for a limit order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LimitPriceType.Bid">
      <summary>Represents the Bid price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LimitPriceType.OppositeSide">
      <summary>Represents a price on the opposite side of the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LimitPriceType.SameSide">
      <summary>Represents a price on the same side of the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LimitPriceType.Trigger">
      <summary>Represents the price at which to trigger an order action</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LimitPriceType.Ask">
      <summary>Represents the Ask price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LimitPriceType.LTP">
      <summary>Represents the Last Traded Price</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LTPModel">
      <summary>Defines constants for the methods for calculating the last-traded spread price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LTPModel.BidToBidAskToAsk">
      <summary>The last traded price on the current leg matches with the<br />
most recently known best bid or best ask on the other legs</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.LTPModel.LastToLast">
      <summary>The last traded price of the spread legs</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.MergeSource">
      <summary>Defines constants for the source of merged quantities and prices</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MergeSource.FromBoth">
      <summary>Replaces the direct price or quantity with the more advantageous of the implied and direct values</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MergeSource.FromImplied">
      <summary>Replaces the direct price or quantity with the implied value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MergeSource.FromDirect">
      <summary>Uses the direct price or quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MergeSource.NotMerged">
      <summary>Indicates the feed does not provide implied prices and quantities</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OpenClose">
      <summary>Defines constants for the possible causes for creating an Order or
<see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Fill">Fill</see></summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.Open">
      <summary>Order that opens a trader's position</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.Close">
      <summary>Order that closes a trader's position</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.ComboCloseOpen">
      <summary>(TOCOM only) First leg closes a position, second leg opens a new position</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.ComboOpenClose">
      <summary>(TOCOM only) First leg opens a position, second leg closes a position</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.StartOfDay">
      <summary>Start-of-Day record</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.Rollover">
      <summary>Order left open after a session rollover</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.Manual">
      <summary>Fill injected manually to correct a trader's position</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.FIFO">
      <summary>Order processed on a first-in, first-out basis</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.StartOfDayFill">
      <summary>Detailed Start-of-Day record</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OpenClose.XRiskAdmin">
      <summary>Trader position injected by a risk administrator</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OptionType">
      <summary>Defines constants for the different types of options contracts</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OptionType.Put">
      <summary>Right to sell a futures contract for a strike price at a specified data</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OptionType.Call">
      <summary>Right to buy a futures contract for a strike price at a specified date</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderAction">
      <summary>Defines constants for the types of actions supported for an order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Update">
      <summary>Indicates the Exchange made a change to a working order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Accept">
      <summary>Indicates the Exchange accepted an order and put it in the market as a working order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Delete">
      <summary>Removes a working order from the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Resubmit">
      <summary>Submits an order currently on hold</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.AdminDelete">
      <summary>Indicates a risk manager deleted an order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Inquire">
      <summary>Requests an order status from the Exchange</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Change">
      <summary>Modifies some part of a working order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Replace">
      <summary>Replaces a working order with a new order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Hold">
      <summary>&lt;P&gt;Pulls an order from the market, but leaves it active on the TT Gateway&lt;/P&gt;&lt;?xml:namespace prefix = innovasys ns =
"http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;If
the Exchange natively supports held orders, the order is put on Hold at the Exchange; otherwise, the TT Gateway synthetically holds the order and deletes it
from the Exchange.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderAction.Add">
      <summary>Submits a new order to a TT Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderApproval">
      <summary>Defines constants for possible statuses for order approvals</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderApproval.Yes">
      <summary>Approved</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderApproval.No">
      <summary>Not approved</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderApproval.Unknown">
      <summary>Approval status not known</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderModifiers">
      <summary>Defines constants for ways to modify standard order behavior</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.Stop">
      <summary>Converts an order to its underlying order type (Limit, if specified; Market, otherwise) when the price reaches or breeches the specified Stop price.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.TTRelayOrigin">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Note Box"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The TT API does not currently support TT
Relay.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.LimitMarketToLimit">
      <summary>Submits a market order that, if not completely filled, converts the unfilled quantity to a limit order at the executed price.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.Trailing">
      <summary>&lt;P&gt;Specifies the number of ticks a price must change before an offsetting order is placed in the market. The Stop price indicates the Trailing price,
which is re-quoted in relation to the Order price until the Order is filled. At that time, the Trailing price remains fixed as an offset of the Fill
price.&lt;/P&gt;&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Note Box"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The TT API does not currently support trailing
orders.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.AutoAgress">
      <summary>(BrokerTec only) Converts a passive order to an aggressive order when the order competes with another passive order at the same price on the opposite side of
the market.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.BestOnly">
      <summary>Determines a quoting price only by the best bid/offer in the market.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.Passive">
      <summary>(BrokerTec only) Represents a resting order not at the market. Passive orders represent resting volume, as only aggressive orders can initiate a transaction.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.NonLeave">
      <summary>Cancels orders only on the same side of the market by the same account.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.Timed">
      <summary>(Synthetic SE only) Sets a specific time to submit or cancel an order.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.Auction">
      <summary>Represents orders placed at a specific time-segment of a day (e.g. pre-open, close, etc.).</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.SellShortExempt">
      <summary>Indicates a short sale order in which the uptick rule does not apply to the trade. The trade can go through a down tick, or a downward move in price, where a
traditional short order trade occurs on an uptick or upward move in price.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.AwayMarket">
      <summary>Holds a limit order if the price is away from the inside market when submitted.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.None">
      <summary>Removes all modifiers from an order.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.IfTouched">
      <summary>Transforms an order to the underlying order type (Market or Limit) when the order is considered "touched," which indicates the market price reached or breached
the Stop price.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderModifiers.MarketToLimit">
      <summary>For a partially-filled market order, converts the remaining quantity to resting as a Limit order at the price of the last Fill.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderRoutingState">
      <summary>Possible results from submitting an order profile to a TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRoutingState.OrderRemovedAvoidCrossingDeleteResting">
      <summary>Order profile has successfully been routed.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRoutingState.Success">
      <summary>The order profile has successfully been sent to the appropriate TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRoutingState.Error">
      <summary>An error occurred when trying to send the order profile to the TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRoutingState.None">
      <summary>The order profile has not yet been sent to the TT Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderStatus">
      <summary>Possible order states</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.Accept">
      <summary>Order accepted by the TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.ResubmitPending">
      <summary>Held order resubmitted</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.New">
      <summary>New order released by the client</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.None">
      <summary>Order not yet submitted</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.Rejected">
      <summary>Order rejected by the Exchange</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.Expired">
      <summary>Order expired</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.Deleted">
      <summary>Order deleted on the Exchange</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.Hold">
      <summary>Order currently on hold</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.Filled">
      <summary>Order filled</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatus.OK">
      <summary>Order active in the market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderStatusModifier">
      <summary>Additional information about pending orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatusModifier.PendingTime">
      <summary>Waiting for a specific time to submit an order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatusModifier.None">
      <summary>No additional status information</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderStatusModifier.PendingTrigger">
      <summary>Waiting for a specific condition (such as a price) to submit an order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderType">
      <summary>Defines constants for possible order types</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.Quote">
      <summary>Order sent to the market, replacing the previous order for that contract on the same side of the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.Market">
      <summary>Order works the inside market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.None">
      <summary>No order type defined</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.Cross">
      <summary>Prearranged trade with either a party within the trading firm itself or with a specified party outside the firm</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.MarketToLimit">
      <summary>Market order with the condition that on a partial fill, the remaining quantity rests as a Limit order at the price that was just hit or taken. (Available on
TOCOM and SGX.)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.BestLimit">
      <summary>Order that joins the best bid or offer without the requirement of a price being entered. (Available on TOCOM.)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.Limit">
      <summary>Order works at a specific price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.CMO">
      <summary>Contingent multiple order, where all legs are filled immediately or the order is cancelled</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderType.OCO">
      <summary>Order defining a relationship between two orders of the same quantity for the same contract at different price levels where executing one automatically cancels
the other</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceDisplayFormat">
      <summary>Defines constants for representing a contract price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayFormat.Decimal">
      <summary>Indicates the double value represents a decimal price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayFormat.Fractional">
      <summary>Indicates the double value represents a price in the X_TRADER display format</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceDisplayType">
      <summary>Defines constants for the different ways to display price data</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal25X">
      <summary>Normal 25x; normal type, but ticks 25 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal500X">
      <summary>Normal 500x; normal type, but ticks 500 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal50X">
      <summary>Normal 250x; normal type, but ticks 50 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal10X">
      <summary>Normal 10x; normal type, but ticks 10 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.QuarterOneHundredths">
      <summary>One-hundredths of a cent, but ticks 1/4 of 100th at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.TenHundredths10X">
      <summary>Ten-hundredths of a cent, but ticks 10 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.TenHundredths5X">
      <summary>Ten-hundredths of a cent, but ticks 5 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.TenHundredths2X">
      <summary>Ten-hundredths of a cent, but ticks 2 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.FiveOneThousandths10X">
      <summary>Five one-thousandths of a cent, but ticks 10 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.FiveOneThousandths5X">
      <summary>Five one-thousandths of a cent, but ticks 5 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Decimal">
      <summary>Decimal price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.FiveOneThousandths2X">
      <summary>Five one-thousandths of a cent, but ticks 2 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal100X">
      <summary>Normal 10x; normal type, but ticks 100 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal5X">
      <summary>Normal 5x; normal type, but ticks 5 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Normal2X">
      <summary>Normal 2x; normal type, but ticks 2 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Halves2X">
      <summary>Half cents (last digit is 0 or 5), but ticks 2 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_Yield">
      <summary>BrokerTec yield, price has 400 ticks per point, displays with four digits after the decimal point</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.QuarterThirtySeconds2X">
      <summary>Quarter thirty-seconds, but ticks 2 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.QuarterThirtySeconds4X">
      <summary>Quarter thirty-seconds, but ticks 4 at a time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_Whole_1_8_of_1_32">
      <summary>BrokerTec 1/8 of 1/32: 1.00, 1.001, 1.002, 1.003, 1.00+, 1.005, 1.006, 1.007, 1.01</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_1_4_of_1_64">
      <summary>BrokerTec 1/4 and 1/64</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_Normal">
      <summary>BrokerTec Normal - Uses precision and decimals values, but with series instead of prod if there is no tick table</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_1_100_and_1_8">
      <summary>BrokerTec 1/100 and 1/8 (104 ticks per point): 1.000, 1.010, 1.020...1.120, 1.125, 1.130</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_1_8_of_1_32">
      <summary>BrokerTec 1/8 and 1/32</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.BTEC_1_64">
      <summary>BrokerTec 1/64: 1.00, 1.00+, 1.01, 1.01+... 1.31, 1.31+, 2.00</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.ModifiedOneFortieths">
      <summary>Modified 1/40 points (last digit is 0, 2, 5, or 7)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.NoDecimals">
      <summary>No decimals</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.TenHundredths">
      <summary>Ten hundredths of a cent</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Tenths">
      <summary>Tenths (dimes)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.OneHundredths">
      <summary>One hundredths</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.FiveOneThousandths">
      <summary>Five one-thousandths</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.HalfPoints">
      <summary>Half points</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Fives">
      <summary>Fives (1/20 points)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.HalfSixtyFourths">
      <summary>Half sixty-fourths</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.QuarterThirtySeconds">
      <summary>Quarter thirty-seconds</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.HalfThirtySeconds">
      <summary>Half thirty-seconds</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.SixtyFourths">
      <summary>Sixty-fourths (64ths)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.ThirtySeconds">
      <summary>Thirty-seconds (32nds) that does not use + or decimal places</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.ModifiedDecimalFourths">
      <summary>Modified decimal fourths (last digit is 0, 2, 5, or 7)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Eighths">
      <summary>Eighths</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.ModifiedFourths">
      <summary>Modified fourths (last digit is 0, 2, 4, or 7)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Fourths">
      <summary>Fourths (last digit is 0, 2, 4, or 6)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Halves">
      <summary>Half cents (last digit is 0 or 5)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.FiveHundredTwelfths">
      <summary>512th price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Roll">
      <summary>Roll price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Discount">
      <summary>Discount price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Yield2">
      <summary>Yield price (format 2)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Yield1">
      <summary>Yield price (format 1)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.ThirtySecondsWithDecimalPoint">
      <summary>Thirty-seconds</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Spread">
      <summary>Spread price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceDisplayType.Basis">
      <summary>Basis price</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceMode">
      <summary>Defines constants for ways to interpret a price for synthetic orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceMode.Offset">
      <summary>Indicates a price calculated dynamically a number of ticks away from a base price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceMode.None">
      <summary>Undefined</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceMode.Absolute">
      <summary>Indicates an actual price</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceSubscriptionType">
      <summary>Describes the types of trade data subscriptions</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceSubscriptionType.DetailedDepth">
      <summary>
        <para>Subscribes for all depth levels of data (valid only for Exchanges that support detailed depth)</para>
      </summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceSubscriptionType.MarketDepth">
      <summary>Subscribes for aggregated depth data (standard depth, no detailed depth)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceSubscriptionType.InsideMarket">
      <summary>Subscribes for only inside market data (Best Bid, Best Ask , LTP, and LTQ values)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceSubscriptionType.None">
      <summary>Does not subscribe for market data</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceTrigger">
      <summary>Describes the type of price trigger associated with an order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceTrigger.Stop">
      <summary>Triggers an order when the market hits a specified price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceTrigger.None">
      <summary>Indicates a non-triggered order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceTrigger.TrailingIfTouched">
      <summary>Triggers an order when the market hits a stop price a set number of ticks away from the current market, where the fixed stop prices move up or down with the
market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceTrigger.TrailingStop">
      <summary>Triggers an order when the market hits a stop price a fixed distance away from the current market, where the fixed stop prices moves up or down with the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PriceTrigger.IfTouched">
      <summary>Triggers an order when the market hits a price a set number of ticks away from the current market price</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PricingModel">
      <summary>Different ways to interpret and represent prices for spreads</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PricingModel.Custom">
      <summary>Represent price based on a custom formula for the implied spread price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PricingModel.Yield">
      <summary>Represent price in yield based on each leg's yield parameters</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PricingModel.Ratio">
      <summary>Represent price as a percentage ratio for the spread</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PricingModel.NetChange">
      <summary>Represent price based on the individual legs' net change from the prior day's settlement</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PricingModel.ImpliedFraction">
      <summary>Represent price as an implied price of a spread in their native formats (32nds, half 32nds, etc.)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.PricingModel.Implied">
      <summary>&lt;p&gt;Represent&amp;nbsp;price as an&amp;nbsp;implied price of the spread&lt;/p&gt; &lt;innovasys:widget type="Note Box"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Autospreader 7.17 or higher displays this value as "Standard
Formula".&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProfitLossCalculationType">
      <summary>Lists types of theoretical exit prices to use when calculating unrealized P &amp; L for a trader</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.RiskWaterfall">
      <summary>
        <para>Use a waterfall algorithm to select which price to use, choosing the first available price in the following order:</para>
        <list type="bullet">
          <item>Last Traded Price (LTP)</item>
          <item>Midpoint of the Bid Price and Ask Price</item>
          <item>Settlement Price</item>
          <item>Close Price</item>
        </list>
      </summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.SettlementPrice">
      <summary>Use the settlement price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.ClosingPrice">
      <summary>Use the closing price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.OpeningPrice">
      <summary>Use the opening price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.LowPrice">
      <summary>Use the lowest prices in the session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.HighPrice">
      <summary>Use the highest price in the session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.LastKnownTradablePrice">
      <summary>
        <para>(Default) Use the last known price, choosing the first available price in the following order:</para>
        <list type="bullet">
          <item>Last Traded Price (LTP)</item>
          <item>Settlement Price</item>
          <item>Price of last fill</item>
        </list>
      </summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossCalculationType.DirectBidOrAskPrice">
      <summary>
        <para>Use the direct bid or direct ask price, as follows:</para>
        <list type="bullet">
          <item>Direct Bid for a long position</item>
          <item>Direct Ask for a short position</item>
        </list>
      </summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.QuantityDisplayFormat">
      <summary>Defines constants for different ways to represent quantities for contracts that deliver across multiple delivery-periods</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuantityDisplayFormat.Contracts">
      <summary>Represents the delivery amount of a contract</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuantityDisplayFormat.Flow">
      <summary>Represents the amount delivered in each delivery period.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.QuantityMode">
      <summary>Defines constants for ways to interpret a quantity value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuantityMode.None">
      <summary>Not yet defined</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuantityMode.Percentage">
      <summary>Interprets the quantity as a percentage of the related value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuantityMode.Quantity">
      <summary>Interprets the quantity value as the specified number</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.QuoteQuantityCondition">
      <summary>Defines constants for possible conditions for triggering an order based on the quote quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuoteQuantityCondition.MoreOrEqual">
      <summary>Triggers when the quantity is greater than or equal to a value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.QuoteQuantityCondition.LessOrEqual">
      <summary>Triggers when the quantity is less than or equal to a value</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.RejectImmediateTrigger">
      <summary>Defines constants for possible actions to take when a synthetic order would trigger immediately</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectImmediateTrigger.Allow">
      <summary>Submit the order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectImmediateTrigger.None">
      <summary>Take no action</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectImmediateTrigger.Reject">
      <summary>Reject the order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.RejectReasonDetails">
      <summary>Defines possible reasons for an order rejection</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectReasonDetails.OrderNotFoundFillLikely">
      <summary>Indicates that the request was rejected by the exchange because the order was not found, most likely because the order has been filled</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectReasonDetails.TTUserThrottleExceeded">
      <summary>Indicates that the request was rejected by the order server due to the request exceeding the user's throttle limit</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectReasonDetails.NotTradable">
      <summary>Indicates that the request was rejected by the exchange because the contract is not currently tradable, but the contract will become tradable (i.e., likely not
expired)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RejectReasonDetails.NoDetails">
      <summary>Default value</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.RelatedLinkType">
      <summary>Defines constants for possible types of relationships between non-parent-child orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RelatedLinkType.OMA">
      <summary>Related because the orders are part of an algorithmic order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.RelatedLinkType.OCO">
      <summary>Related because the orders are part of an Order-Cancels-Order (OCO) order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Rounding">
      <summary>Defines constants for the available rounding methods</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Rounding.None">
      <summary>Performs no rounding</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Rounding.Nearest">
      <summary>Rounds to the nearest valid value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Rounding.Down">
      <summary>Rounds down to the next lower valid value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Rounding.Up">
      <summary>Rounds up to the next higher valid value</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SlicerType">
      <summary>Defines constants for supported sliced order types</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.Reload">
      <summary>Sends disclosed quantity child orders after each child order fills until the entire spread quantity is filled</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.None">
      <summary>Indicates a non-sliced order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.VolumeDuration">
      <summary>Sends child orders after a number of trades occur until a defined quantity is reached</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.TimeDuration">
      <summary>Sends child orders at fixed time intervals until a defined end-time is reached</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.VolumeSliced">
      <summary>Sends child orders at variable intervals based on traded volume</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.TimeSliced">
      <summary>Sends child orders at fixed time intervals</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SlicerType.Iceberg">
      <summary>Slices large orders into several smaller quantity orders and waits for each child order to fill before submitting the next order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.StatusCode">
      <summary>Describes possible status codes for asynchronous operations</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.StatusHistory">
      <summary>Possible order triggers</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.StatusHistory.Triggered">
      <summary>Order triggered by a stop price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.StatusHistory.TriggeredTime">
      <summary>Order triggered by a time duration</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.StatusHistory.None">
      <summary>No trigger</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SubscriptionStatus">
      <summary>Describes the possible statuses for subscription requests</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SubscriptionStatus.Subscribed">
      <summary>The subscription is active.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SubscriptionStatus.NotSubscribed">
      <summary>The subscription is not active.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SubscriptionStatus.Failed">
      <summary>The subscription request failed.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SyntheticActionCode">
      <summary>Defines constants for synthetic and staged order actions</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.Resume">
      <summary>Resume actions for the paused parent synthetic order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.None">
      <summary>No action defined</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.Pause">
      <summary>Stop all further actions for the parent synthetic order, but leave existing child orders working</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.Unclaim">
      <summary>Unclaim a staged order and make it available for others to claim and work</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.Claim">
      <summary>Claim a staged order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.Promote">
      <summary>Unclaim an internal staged order and change it to a broker staged order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.Unmanage">
      <summary>Synthetic SE no longer manages the order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticActionCode.GoToMarket">
      <summary>Convert all working children of a working synthetic order to a single market order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SyntheticOrderModifier">
      <summary>Possible changes to synthetic orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderModifier.Snipe">
      <summary>Submits an Autospreader order only when it can cross the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderModifier.QueueHolder">
      <summary>Uses multiple orders per leg to maintain the position in the queue when re-quoting to a new price level</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderModifier.TrailingLimit">
      <summary>Acts as a trailing stop order, but submits a limit order instead of a market order when triggered</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderModifier.MachineGun">
      <summary>Repeatedly sends rejected orders until accepted</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SyntheticOrderStatus">
      <summary>Defines constants for possible states of a synthetic order managed by Synthetic SE</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Completed">
      <summary>Synthetic SE submitted all of the child orders or the order has reached its defined end time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.None">
      <summary>Order is not managed by Synthetic SE</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Paused">
      <summary>Synthetic SE paused the parent order (existing child orders continue working)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Initializing">
      <summary>(currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Starting">
      <summary>(currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Deleting">
      <summary>Synthetic SE is in the process of deleting a parent synthetic orders and its child orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Resuming">
      <summary>Synthetic SE is restarting a held or paused order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Pausing">
      <summary>Synthetic SE is starting to pause an order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Recovery">
      <summary>Synthetic SE is in the process of recovering from a restart and puts its orders in this state so clients can complete the order book download</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Unmanaged">
      <summary>Synthetic SE converted child orders to unmanaged orders</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Pulling">
      <summary>Synthetic SE is in the process of converting child orders to unmanaged orders (a transitional state)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Expired">
      <summary>Order reached its defined end time</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Failed">
      <summary>Some error occurred</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Deleted">
      <summary>Synthetic SE deleted an order before it completed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Working">
      <summary>Synthetic SE is working at least one child order of the synthetic order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.PendingTrigger">
      <summary>Synthetic SE is waiting for the order's price trigger condition to be met</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Waiting">
      <summary>Synthetic SE is waiting for the order's start time to be met</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.RejectedAfterOK">
      <summary>(currently unused)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Rejected">
      <summary>Order was rejected by the target Exchange</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.Hold">
      <summary>Order is currently on hold</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.SyntheticOrderStatus.OK">
      <summary>Order is active in the market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimeInForceCode">
      <summary>Defines constants for specifying how long to leave an order working in the market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeInForceCode.GoodTillDate">
      <summary>Good until the contract's expiration date</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeInForceCode.GoodInSession">
      <summary>Good until the end of the current trading session</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeInForceCode.GoodTillDay">
      <summary>Good until the end of the trading day</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeInForceCode.GoodTillCancel">
      <summary>Good until canceled</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimeUnits">
      <summary>Defines constants for units of time for measuring inter-slice delay</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeUnits.Hours">
      <summary>Value represent a number of hours</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeUnits.Min">
      <summary>Value represents a number of minutes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeUnits.None">
      <summary>Value units not specified</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeUnits.MSec">
      <summary>Value represents a number of milliseconds</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TimeUnits.Sec">
      <summary>Value represents a number of seconds</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TradeDirection">
      <summary>Defines constants for identifying the side of the market corresponding to the last trade</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeDirection.Hit">
      <summary>Sell side</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeDirection.Take">
      <summary>Buy side</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeDirection.Unknown">
      <summary>Unable to determine the direction</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TradeState">
      <summary>Defines constants for the different states in the life of an trade</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.Routing">
      <summary>Internal use only</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.PositionReserve">
      <summary>The order represents a system-generated order to account for potential risk for synthetic orders.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.PartiallyFilled">
      <summary>The order has been partially filled.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.FullyFilled">
      <summary>
        <para>The order has been completely filled.</para>
      </summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.Unknown">
      <summary>The TT API cannot determine the state of the order.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.Deleted">
      <summary>The order was deleted.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.Cancelled">
      <summary>The order was cancelled.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradeState.Working">
      <summary>The order is working in the market.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TradingStatus">
      <summary>Defines constants for the possible trading statuses of instruments and markets</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Freeze">
      <summary>Market is frozen</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Unknown">
      <summary>Trading status cannot be determined</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.CircuitBreaker">
      <summary>Trading is temporarily halted due to extreme market volatility</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Leveling">
      <summary>Market is in leveling phase that determines the indicative market opening price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.PriceDiscovery">
      <summary>(LME only) Market is in price discovery mode (similar to pre-open)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Reserve">
      <summary>(CME only) Market is in reserve mode</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.ClosingAuction">
      <summary>Instrument in day close auction</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.OpeningAuction">
      <summary>Instrument in day open auction</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Expired">
      <summary>Instrument has expired</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.PreOpen">
      <summary>Pre-open phase</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.NotTradable">
      <summary>Instrument is not tradable (used for price feeds)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Closed">
      <summary>Market is closed</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.PostTrading">
      <summary>Post-trading phase</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Auction">
      <summary>Market is in the auction phase</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.FastMarket">
      <summary>Fast market or volatility interruption</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.Trading">
      <summary>Normal trading</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TradingStatus.PreTrading">
      <summary>Pre-trading phase</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TriggerPriceType">
      <summary>Defines constants identifying supported types of price triggers</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TriggerPriceType.Bid">
      <summary>Triggers when the Bid price changes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TriggerPriceType.None">
      <summary>Does not set a trigger when a price changes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TriggerPriceType.OppositeSide">
      <summary>Triggers when the price at the opposite side of the market changes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TriggerPriceType.SameSide">
      <summary>Triggers when the price on the same side of the market changes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TriggerPriceType.Ask">
      <summary>Triggers when the Ask price changes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TriggerPriceType.LTP">
      <summary>Triggers when the last-traded price changes</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UDPCouponFreq">
      <summary>Number of coupons per year for fixed income yield contracts</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPCouponFreq.UdpCfMonthly">
      <summary>Monthly payout</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPCouponFreq.UdpCfQuarterly">
      <summary>Quarterly payout</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPCouponFreq.UdpCfSemiAnnually">
      <summary>Semi-annually payout</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPCouponFreq.UdpCfAnnually">
      <summary>Annual payout</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UDPDayCountType">
      <summary>Defines constants for supported methods of counting the number of days between two contract dates</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPDayCountType.UdpDctActual_365">
      <summary>Count is the actual number of days based on a 365-day calendar year</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPDayCountType.UdpDct_30E_360">
      <summary>Count is the number of days based on a 360 day calendar year, where the second date is changed from the 31st to the 30th</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPDayCountType.UdpDct_30_365">
      <summary>Count is the number of days based on a 365 day calendar year, where the second date is changed from the 31st to the 30th only if the first date falls on the
30th or 31st</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPDayCountType.UdpDct_30_360">
      <summary>Count is the number of days based on a 360 day calendar year, where the second date is changed from the 31st to the 30th only if the first date falls on the
30th or 31st</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPDayCountType.UdpDctActual_360">
      <summary>Count is the actual number of days based on a 360-day calendar year</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPDayCountType.UdpDctActualActual">
      <summary>Count is the actual number of days based on an actual calendar year (leap year counts for 366 days)</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UDPPriceType">
      <summary>Defines constants for ways to represent user-defined price types</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPPriceType.UDPPT_ExchangePrice">
      <summary>Represents the price as the price determined by the Exchange</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPPriceType.UDPPT_Custom">
      <summary>Represents the price as a user-defined value</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPPriceType.UDPPT_YieldToMaturity">
      <summary>Represents a price based on the rate of return if the contract is held to its maturity date</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPPriceType.UDPPT_Yield">
      <summary>Represents the price as a percentage based on the annual rate of return</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UDPPriceType.UDPPT_NetChanged">
      <summary>Represents the price as the price of the contract minus the settlement price</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UpdateType">
      <summary>Defines constants for types of subscription updates</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UpdateType.Update">
      <summary>Returns a picture of the market and provides continuing updates</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.UpdateType.Snapshot">
      <summary>Returns a single picture of the market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.WorkupState">
      <summary>Possible states of a workup order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.SfeFirstAskOrderImplied">
      <summary>First best ask order quantity is implied (TT SFE Gateway only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.SfeFirstBidOrderImplied">
      <summary>First best bid order quantity is implied (TT SFE Gateway only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.WorkupCorrection">
      <summary>Corrections are being updated after the workup phase completes</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.Hit">
      <summary>Someone hit the bid</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.Take">
      <summary>Someone took the offer</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.WorkupPublic">
      <summary>Public workup phase</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.WorkupState.WorkupPrivate">
      <summary>Private workup phase</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.BrokerKey">
      <summary>Represents a broker in the TT multi-broker environment</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CompanyKey">
      <summary>Represents a company in the TT multi-broker environment</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Currency">
      <summary>Provides properties and methods for managing a currency</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Date">
      <summary>Overloads the standard .NET <strong>DateTime</strong> structure to support partial dates</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FeedConnectionKey">
      <summary>Represents a connection between the application and a Market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FeedStatus">
      <summary>Represents the status of a Price, Order, or Fill feed</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FieldsUpdatedEventArgs">
      <summary>Represents the event arguments sent in a PriceSubscription.FieldsUpdated callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.GatewayKey">
      <summary>Represents the key that uniquely identifies a TT Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentKey">
      <summary>Represents a unique key for a tradable contract</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.MarketKey">
      <summary>Represents a trading market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderRestriction">
      <summary>Possible order restrictions</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Price">
      <summary>Provides methods and properties for accessing price data for an Instrument, Order, or Fill</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProductKey">
      <summary>Represents a key that uniquely identifies a product</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProductType">
      <summary>Describes the different types of products available for trading</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProfitLossStatistics">
      <summary>Represents statistics related to P&amp;L</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProfitLossValue">
      <summary>Provides properties for retrieving P&amp;L values in different currencies and representations</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Quantity">
      <summary>Provides methods and properties for accessing quantity data for an Instrument, Order, or Fill</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TickPrice">
      <summary>Represents the tick size for a contract</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimeAndSalesData">
      <summary>Represents a single trade transaction for an Instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimeInForce">
      <summary>Represents the different options for determining how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BrokerKey.Id">
      <summary>Gets the ID associated with the broker</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BrokerKey.Name">
      <summary>Gets the name of the broker associated with this key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CompanyKey.Id">
      <summary>Gets the numeric id of the company associated with this key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CompanyKey.Name">
      <summary>Gets the name of the company associated with this key.</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.#ctor(System.String)">
      <summary>Instantiates an instance of the Currency structure</summary>
      <returns>New Currency instance</returns>
      <param name="currencyCode"> containing the ISO currency code</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetConversionRate">
      <summary>Gets the exchange rate between two currencies</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetCurrencies">
      <summary>Gets a list of supported currencies</summary>
      <returns>List of Currency objects currently defined in the TT Guardian currency table</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.ToString">
      <summary>Implements the standard .NET method for Currency objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.Equals(TradingTechnologies.TTAPI.Currency)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.Equals(System.Object)">
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetConversionRate(System.String)">
      <summary>Gets the rate to use when converting this currency to a target currency identified by the currency code</summary>
      <returns> value representing the conversion rate</returns>
      <param name="targetCurrencyCode"> containing the ISO code for the currency</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetConversionRate(TradingTechnologies.TTAPI.Currency)">
      <summary>Gets the rate to use when converting this currency to a target currency identified by the Currency object</summary>
      <returns> value representing the conversion rate</returns>
      <param name="targetCurrency"> object representing the target currency</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetConversionRate(System.String,System.String)">
      <summary>Gets the rate to use when converting between to currencies identified by their currency codes</summary>
      <returns> value representing the conversion rate</returns>
      <param name="sourceCurrencyCode"> containing the ISO code for the source currency</param>
      <param name="targetCurrencyCode"> containing the ISO code for the target currency</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.GetConversionRate(TradingTechnologies.TTAPI.Currency,TradingTechnologies.TTAPI.Currency)">
      <summary>Gets the rate to use when converting between two Currency objects</summary>
      <returns> value representing the conversion rate</returns>
      <param name="sourceCurrency"> object representing the source currency</param>
      <param name="targetCurrency"> object representing the target currency</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.op_Equality(TradingTechnologies.TTAPI.Currency,TradingTechnologies.TTAPI.Currency)">
      <summary>Implements the standard .NET operator for Currency objects</summary>
      <param name="left">Currency object to compare</param>
      <param name="right">Currency object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Currency.op_Inequality(TradingTechnologies.TTAPI.Currency,TradingTechnologies.TTAPI.Currency)">
      <summary>Implements the standard .NET operator for Currency objects</summary>
      <param name="left">Currency object to compare</param>
      <param name="right">Currency object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Currency.Code">
      <summary>Gets the ISO-standard symbol for this currency</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Currency.PrimaryCurrency">
      <summary>Gets the primary currency associated with the Session</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.CompareTo(TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.Equals">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.GetHashCode">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.ToDateTime">
      <summary>Converts a Date object to a .NET DateTime object</summary>
      <returns>New DateTime object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.ToString">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.Equals(TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.Equals(System.Object)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.ToString(System.String)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.ToString">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.op_Equality(TradingTechnologies.TTAPI.Date,TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET operator for Date objects</summary>
      <param name="lhs">Date object to compare</param>
      <param name="rhs">Date object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.op_GreaterThan(TradingTechnologies.TTAPI.Date,TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET operator for Date objects</summary>
      <param name="lhs">Date object to compare</param>
      <param name="rhs">Date object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.op_GreaterThanOrEqual(TradingTechnologies.TTAPI.Date,TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET operator for Date objects</summary>
      <param name="lhs">Date object to compare</param>
      <param name="rhs">Date object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.op_Inequality(TradingTechnologies.TTAPI.Date,TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET operator for Date objects</summary>
      <param name="lhs">Date object to compare</param>
      <param name="rhs">Date object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.op_LessThan(TradingTechnologies.TTAPI.Date,TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET operator for Date objects</summary>
      <param name="lhs">Date object to compare</param>
      <param name="rhs">Date object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Date.op_LessThanOrEqual(TradingTechnologies.TTAPI.Date,TradingTechnologies.TTAPI.Date)">
      <summary>Implements the standard .NET operator for Date objects</summary>
      <param name="lhs">Date object to compare</param>
      <param name="rhs">Date object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Date.Day">
      <summary>Gets or sets the day component for this Date</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Date.Month">
      <summary>Gets or sets the month component for this Date</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Date.Year">
      <summary>Gets or sets the year component for this Date</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.#ctor(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.BrokerKey,TradingTechnologies.TTAPI.CompanyKey)">
      <summary>Creates a new instance of FeedConnectionKey using specified GatewayKey and BrokerKey.</summary>
      <returns>New FeedConnectionKey instance</returns>
      <param name="gatewayKey">GatewayKey object identifying the market gateway</param>
      <param name="brokerKey">BrokerKey object representing the broker for the connection</param>
      <param name="companyKey">CompanyKey object identifying the broker's company</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.#ctor(TradingTechnologies.TTAPI.GatewayKey)">
      <summary>Creates a new instance of FeedConnectionKey using specified GatewayKey and empty BrokerKey.</summary>
      <returns>New FeedConnectionKey instance</returns>
      <param name="gatewayKey">GatewayKey object identifying the market
gateway</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.ToString">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.Equals(TradingTechnologies.TTAPI.FeedConnectionKey)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.Equals(System.Object)">
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.op_Equality(TradingTechnologies.TTAPI.FeedConnectionKey,TradingTechnologies.TTAPI.FeedConnectionKey)">
      <summary>Implements the standard .NET operator for FeedConnectionKey objects</summary>
      <param name="lhs">FeedConnectionKey to compare</param>
      <param name="rhs">FeedConnectionKey to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedConnectionKey.op_Inequality(TradingTechnologies.TTAPI.FeedConnectionKey,TradingTechnologies.TTAPI.FeedConnectionKey)">
      <summary>Implements the standard .NET operator for FeedConnectionKey objects</summary>
      <param name="lhs">FeedConnectionKey to compare</param>
      <param name="rhs">FeedConnectionKey to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.BrokerKey">
      <summary>Gets or sets the broker key associated with this feed connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.CompanyKey">
      <summary>Gets or sets the company key associated with this feed connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.GatewayKey">
      <summary>Gets or sets the TT Gateway associated with this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.GroupId">
      <summary>Gets or sets the TT MGT Group ID of associated with the trader's login credentials</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.IsAutoGenerated">
      <summary>Gets whether the gateway login is an auto-generated admin login</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.MemberId">
      <summary>Gets or sets the TT MGT Member ID of associated with the trader's login credentials</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedConnectionKey.TraderId">
      <summary>Gets or sets the TT MGT Trader ID of associated with the trader's login credentials</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.ToString">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.Equals(System.Object)">
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.Equals(TradingTechnologies.TTAPI.FeedStatus)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.op_Equality(TradingTechnologies.TTAPI.FeedStatus,TradingTechnologies.TTAPI.FeedStatus)">
      <summary>Implements the standard .NET operator for FeedStatus objects</summary>
      <param name="lhs">FeedStatus object to compare</param>
      <param name="rhs">FeedStatus object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatus.op_Inequality(TradingTechnologies.TTAPI.FeedStatus,TradingTechnologies.TTAPI.FeedStatus)">
      <summary>Implements the standard .NET operator for FeedStatus objects</summary>
      <param name="lhs">FeedStatus object to compare</param>
      <param name="rhs">FeedStatus object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedStatus.Availability">
      <summary>Gets the status of this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedStatus.IPAddress">
      <summary>Gets the IP address associated with this feed status</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedStatus.Version">
      <summary>Gets the software version of the TT Gateway associated with this feed status</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FieldsUpdatedEventArgs.#ctor(TradingTechnologies.TTAPI.PriceSubscription,TradingTechnologies.TTAPI.AsyncOperationError,TradingTechnologies.TTAPI.UpdateType,System.Int64)">
      <summary>Creates an instance of the FieldsUpdatedEventArgs class</summary>
      <returns>New FieldsUpdatedEventArgs instance</returns>
      <param name="subscription">PriceSubscription object that triggered the event</param>
      <param name="error">
        <u>
          <font color="blue">Exception</font>
        </u> object representing the error, or <strong>null</strong> if no error occurred</param>
      <param name="updateType">UpdateType enumeration indicating whether the data returned includes a full update or only a
snapshot of the data that changed since the previous event</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FieldsUpdatedEventArgs.Error">
      <summary>Gets the error included in the event, if present</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FieldsUpdatedEventArgs.Fields">
      <summary>Returns the market data for an Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FieldsUpdatedEventArgs.UpdateReceivedFromCore">
      <summary>(TT Internal)</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FieldsUpdatedEventArgs.UpdateType">
      <summary>Gets whether the update represents a market data snapshot or update</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.#ctor">
      <summary>Instantiates a  structure</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.#ctor(System.String)">
      <summary>Creates a  object from a Gateway name</summary>
      <returns>New  instance</returns>
      <param name="gatewayName"> value containing the <em>Gateway-Flavor</em> name</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.#ctor(System.Int32)">
      <summary>Creates a  from the Gateway ID</summary>
      <param name="key"> representing the ID of the TT Gateway</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.FromName(System.String)">
      <summary>Returns a gateway key associated with a gateway name</summary>
      <exception caption="ArgumentException" cref="T:System.ArgumentException">&lt;p&gt;&lt;i&gt;Gateway name must not be null nor empty&lt;/i&gt;&lt;br /&gt;
The &lt;i&gt;gatewayName&lt;/i&gt; parameter is null or empty.&lt;/p&gt;</exception>
      <returns>GatewayKey object corresponding to the named gateway</returns>
      <param name="gatewayName"> containing the name of a TT Gateway</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.IsEmpty(TradingTechnologies.TTAPI.GatewayKey)">
      <summary>Gets a value that indicates whether the GatewayKey is a null object</summary>
      <returns>
        <strong>true</strong> if the object is empty; <strong>false</strong>, otherwise</returns>
      <param name="key">GatewayKey object to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.ToString">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.Equals(TradingTechnologies.TTAPI.GatewayKey)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.Equals(System.Object)">
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.op_Equality(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.GatewayKey)">
      <summary>Implements the standard .NET operator for GatewayKey objects</summary>
      <returns>For more information, refer to the Microsoft .NET Framework Class Library documentation.</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.op_Implicit(TradingTechnologies.TTAPI.GatewayKey)~System.Int32">
      <summary>Implements the standard .NET operator for GatewayKey objects</summary>
      <returns>For more information, refer to the Microsoft .NET Framework Class Library documentation.</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.GatewayKey.op_Inequality(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.GatewayKey)">
      <summary>Implements the standard .NET operator for GatewayKey objects</summary>
      <returns>For more information, refer to the Microsoft .NET Framework Class Library documentation.</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.GatewayKey.Alias">
      <summary>Gets the alias for the TT Gateway associated with this key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.GatewayKey.Id">
      <summary>Gets the unique ID for the TT Gateway associated with this key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.GatewayKey.MarketKey">
      <summary>Gets the unique key for the  associated with TT Gateway represented by this <see cref="GatewayKey" /></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.GatewayKey.Name">
      <summary>Gets the market name associated with the TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.GatewayKey.Empty">
      <summary>Represents an empty gateway key object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.#ctor">
      <summary>Instantiates an instance of the InstrumentKey structure</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Creates a new instance of the InstrumentKey structure from four strings representing a gateway name, product type, product name, and TT series key</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;seriesKey must not be null or empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;seriesKey&lt;/i&gt; parameter does not contain a valid string.</exception>
      <returns>InstrumentKey object for the specified Instrument</returns>
      <param name="marketName">String containing the name of the market (e.g. "<strong>CBOT</strong>" or "<strong>CME-B</strong>")</param>
      <param name="productType">String specifying the name of the product type associated with the Instrument (such as, "<strong>FUTURE</strong>")</param>
      <param name="productName">String specifying the name of the product associated with the Instrument (such as, "<strong>6E</strong>")</param>
      <param name="seriesKey">String contain the name of the specific contract or series (such as, "<strong>Sep10</strong>")</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.#ctor(System.String,TradingTechnologies.TTAPI.ProductType,System.String,System.String)">
      <summary>Creates a new instance of the InstrumentKey structure from a market name, ProductType object, product name, and TT series key</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;seriesKey must not be null or empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;seriesKey&lt;/i&gt; parameter does not contain a valid string.</exception>
      <returns>InstrumentKey object for the specified Instrument</returns>
      <param name="marketName">String containing the name of the market (e.g. "<strong>CBOT</strong>" or "<strong>CME-B</strong>")</param>
      <param name="productType">ProductType enumeration identifying the product type (such as,
<strong>ProductType.Future</strong>)</param>
      <param name="productName">String specifying the name of the product associated with the Instrument (such as, "<strong>6E</strong>")</param>
      <param name="seriesKey">String contain the name of the specific contract or series (such as, "<strong>Sep10</strong>")</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.#ctor(TradingTechnologies.TTAPI.MarketKey,TradingTechnologies.TTAPI.ProductType,System.String,System.String)">
      <summary>Creates a new instance of the InstrumentKey structure from four strings representing a MarketKey, ProductType, product name, and TT series key</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;seriesKey must not be null or empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;seriesKey&lt;/i&gt; parameter does not contain a valid string.</exception>
      <returns>InstrumentKey object for the specified Instrument</returns>
      <param name="marketKey">MarketKey object identifying the market on which the Instrument trades</param>
      <param name="productType">String specifying the name of the product type associated with the Instrument (such as, "<strong>FUTURE</strong>")</param>
      <param name="productName">String specifying the name of the product associated with the Instrument (such as, "<strong>6E</strong>")</param>
      <param name="seriesKey">String contain the name of the specific contract or series (such as, "<strong>Sep10</strong>")</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.#ctor(TradingTechnologies.TTAPI.ProductKey,System.String)">
      <summary>Creates a new instance of the InstrumentKey structure from a ProductKey and TT series key</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;seriesKey must not be null or empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;seriesKey&lt;/i&gt; parameter does not contain a valid string.</exception>
      <returns>InstrumentKey object for the specified Instrument</returns>
      <param name="productKey">ProductKey object identifying the tradable product</param>
      <param name="seriesKey">String contain the name of the specific contract or series (such as, "<strong>Sep10</strong>")</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.IsEmpty(TradingTechnologies.TTAPI.InstrumentKey)">
      <summary>Checks for an empty Instrument Key</summary>
      <returns>
        <strong>true</strong>, if the Instrument Key is empty; <strong>false</strong>, otherwise</returns>
      <param name="key">InstrumentKey object to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.ToString">
      <summary>Implements the standard .NET method for InstrumentKey objects</summary>
      <returns>String containing the converted value</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.Equals(TradingTechnologies.TTAPI.InstrumentKey)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.Equals(System.Object)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.op_Equality(TradingTechnologies.TTAPI.InstrumentKey,TradingTechnologies.TTAPI.InstrumentKey)">
      <summary>Implements the standard .NET operator for InstrumentKey objects</summary>
      <param name="lhs">InstrumentKey object to compare</param>
      <param name="rhs">InstrumentKey object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentKey.op_Inequality(TradingTechnologies.TTAPI.InstrumentKey,TradingTechnologies.TTAPI.InstrumentKey)">
      <summary>Implements the standard .NET operator for InstrumentKey objects</summary>
      <param name="lhs">InstrumentKey object to compare</param>
      <param name="rhs">InstrumentKey object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentKey.IsAutospreader">
      <summary>Gets whether this key references a Autospreader instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentKey.MarketKey">
      <summary>Gets the Market key that identifies the Instrument associated with this Instrument key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentKey.ProductKey">
      <summary>Gets the ProductKey that uniquely identifies the product associated for the
<see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see> corresponding to this instrument key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentKey.SeriesKey">
      <summary>Gets the unique ID for the Instrument object corresponding to this key</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.InstrumentKey.Empty">
      <summary>Returns an empty Instrument Key object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.#ctor(System.Int32)">
      <summary>Sets the unique ID for the market associated with this key</summary>
      <returns>New  instance</returns>
      <param name="id"> value for the associated market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.Parse">
      <summary>Converts the string representation of a market key to its MarketKey equivalent</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.ToString">
      <summary>Converts the market key to a string</summary>
      <returns>String representation of the market key</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.TryParse">
      <summary>Converts the string representation of a market key to its MarketKey equivalent, returning a value to indicate whether the conversion succeeded</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.Equals(System.Object)">
      <summary>Implements the standard .NET method to compare this market key with another object</summary>
      <returns>
        <strong>true</strong> if they key is the same as the object; <strong>false</strong> otherwise</returns>
      <param name="other"> to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.Equals(TradingTechnologies.TTAPI.MarketKey)">
      <summary>Implements the standard .NET method to compare market keys</summary>
      <returns>
        <strong>true</strong> if the market keys match; <strong>false</strong>, otherwise</returns>
      <param name="other"> to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.Parse(System.String,System.Boolean)">
      <summary>Creates a MarketKey from a string, with the option to ignore capitalization</summary>
      <returns>MarketKey object matching the string</returns>
      <param name="text">string containing the market key text</param>
      <param name="ignoreCase">
        <strong>true</strong> to ignore capitalization; <strong>false</strong>, otherwise</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.Parse(System.String)">
      <summary>Creates a MarketKey from a case-sensitive string</summary>
      <returns>MarketKey object matching the string</returns>
      <param name="text">string containing the market key text</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.TryParse(System.String,System.Boolean,TradingTechnologies.TTAPI.MarketKey@)">
      <summary>Creates a MarketKey from a string, with the option to ignore capitalization</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="text">string containing the market key</param>
      <param name="ignoreCase">
        <strong>true</strong> to ignore capitalization; <strong>false</strong>, otherwise</param>
      <param name="out">MarketKey object matching the string</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.TryParse(System.String,TradingTechnologies.TTAPI.MarketKey@)">
      <summary>Creates a MarketKey from a case-sensitive string</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="text">string containing the market key</param>
      <param name="out">MarketKey object matching the string</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.op_Equality(TradingTechnologies.TTAPI.MarketKey,TradingTechnologies.TTAPI.MarketKey)">
      <summary>Implements the standard .NET method for MarketKey objects</summary>
      <param name="lhs">MarketKey object to compare</param>
      <param name="rhs">MarketKey object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketKey.op_Inequality(TradingTechnologies.TTAPI.MarketKey,TradingTechnologies.TTAPI.MarketKey)">
      <summary>Implements the standard .NET method for MarketKey objects</summary>
      <param name="lhs">MarketKey object to compare</param>
      <param name="rhs">MarketKey object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketKey.AllAvailableValues">
      <summary>Gets a collection of market keys for all markets visible to the trader</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketKey.Id">
      <summary>Gets the unique ID for the market associated with this key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketKey.IsValid">
      <summary>Determines whether this object represents a valid market key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketKey.Name">
      <summary>Gets the name of the market associated with this key</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.AlgoSE">
      <summary>Returns the unique market key for the Algo SE market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Arch">
      <summary>Returns the unique market key for the Arch market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Asx">
      <summary>Returns the unique market key for the ASX marketAustralian Securities Exchange</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Autospreader">
      <summary>Returns the unique market key for the Autospreader market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.BTec">
      <summary>Returns the unique market key for the BrokerTec market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.BTecFuture">
      <summary>Returns the unique market key for the BrokerTec Futures market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Bvmf">
      <summary>Returns the unique market key for the BVMF market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Cboe">
      <summary>Returns the unique market key for the CBOE market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Cbot">
      <summary>Returns the unique market key for the CBOT market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Ccfe">
      <summary>Returns the unique market key for the CCFE market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Ccx">
      <summary>Returns the unique market key for the CCX market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Cme">
      <summary>Returns the unique market key for the Chicago Mercantile Exchange market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Dme">
      <summary>Returns the unique market key for the Dubai Mercantile Exchange market</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.MarketKey.Ebs">
      <summary>Returns the unique market key for the Electronic Broking Exchange market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.Parse">
      <summary>Converts the string representation of an order restriction to its OrderRestriction equivalent</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.ToString">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.TryParse">
      <summary>Converts the string representation of an order restriction to its OrderRestriction equivalent, returning a value to indicate whether the conversion succeeded</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.Equals(System.Object)">
      <summary>Compares this order restriction with another object</summary>
      <param name="other"> to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.Equals(TradingTechnologies.TTAPI.OrderRestriction)">
      <summary>Compares this order restriction with another order restriction object</summary>
      <param name="other">OrderRestriction object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.Parse(System.String,System.Boolean)">
      <summary>Creates an OrderRestriction from a string with the option to ignore capitalization</summary>
      <returns>OrderRestriction object matching the string</returns>
      <param name="text">string containing the order restriction text</param>
      <param name="ignoreCase">
        <strong>true</strong> to ignore capitalization; <strong>false</strong>, otherwise</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.Parse(System.String)">
      <summary>Creates an OrderRestriction from a case-sensitive string</summary>
      <returns>OrderRestriction object matching the string</returns>
      <param name="text">string containing the order restriction text</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.TryParse(System.String,System.Boolean,TradingTechnologies.TTAPI.OrderRestriction@)">
      <summary>Creates an OrderRestriction from a string with the option to ignore capitalization</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="text">string containing the order restriction text</param>
      <param name="ignoreCase">
        <strong>true</strong> to ignore capitalization; <strong>false</strong>, otherwise</param>
      <param name="out">OrderRestriction object matching the string</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.TryParse(System.String,TradingTechnologies.TTAPI.OrderRestriction@)">
      <summary>Creates an OrderRestriction from a case-sensitive string</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="text">string containing the order restriction text</param>
      <param name="out">OrderRestriction object matching the string</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.op_Equality(TradingTechnologies.TTAPI.OrderRestriction,TradingTechnologies.TTAPI.OrderRestriction)">
      <summary>Implements the standard .NET operator for OrderRestriction objects</summary>
      <param name="lhs">OrderRestriction object to compare</param>
      <param name="rhs">OrderRestriction object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRestriction.op_Inequality(TradingTechnologies.TTAPI.OrderRestriction,TradingTechnologies.TTAPI.OrderRestriction)">
      <summary>Implements the standard .NET operator for OrderRestriction objects</summary>
      <param name="lhs">OrderRestriction object to compare</param>
      <param name="rhs">OrderRestriction object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRestriction.AllAvailableValues">
      <summary>Gets a list of all valid order restrictions</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRestriction.Id">
      <summary>Gets the order restriction ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRestriction.IsValid">
      <summary>Gets whether this OrderRestriction is defined in the aconfig file</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRestriction.Name">
      <summary>Gets the name associated with the order restriction</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.AgainstActuals">
      <summary>Strategy composed of a futures leg and an underlying commodity (i.e. cash). The futures contract trades at the Exchange, while the cash trades OTC or at
another Exchange.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Aon">
      <summary>Order that specifies the order can only be activated if the full order will be filled.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.AssetAllocation">
      <summary>Type of OTC trade reporting.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Basis">
      <summary>OTC trade for strategies that comprise a Futures leg and an Underlying (cash) leg.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Block">
      <summary>Order, usually quite large in size, that is negotiated between two parties. Such parties<br />
prefer receiving a single, negotiated price, even if the price is slightly discounted from the current market, to avoid the risk of receiving multiple, unknown
fills to execute their large futures order.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.ExchangeForPhysical">
      <summary>Order involving exchanging a cash commodity for an equivalent quantity of futures</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.ExchangeForSwap">
      <summary>Strategy that trades the position in an underlying (leg) contract for a futures position. For example, a trader with a long OTC swap position and a short
futures position might want to swap with another trader with short OTC position and along futures position.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.FillAndSave">
      <summary>Order to fill as much as possible. If partially filled, the remaining quantity rests in the market as a passive order (BrokerTec only).</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Flex">
      <summary>Order where the buyer and seller are permitted to negotiate the exact terms of the option contract. The order can include the exercise price, the expiration
date, and the terms of exercise.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Fok">
      <summary>Market or limit-price order to be executed in its entirety as soon as it is represented in the market; if not executed in full, the order is canceled.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.GuaranteedCross">
      <summary>OTC order where the Exchange guarantees that the two indicated orders will match each other and not with different orders.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Iceberg">
      <summary>Order where only a portion of the total order quantity is sent to the market at a time. Each disclosed order quantity is equal. Iceberg orders allow you to set
the quantity parameter as a number or percentage.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Ioc">
      <summary>Order executed against any existing orders at the stated price or better, up to the volume of the IOC order. Any additional volume from the IOC order is
cancelled.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.LimitOnClose">
      <summary>Limit order that will either be filled or killed when the market closes.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.LimitOnOpen">
      <summary>Order that allows you to trade volatility by calculating the limit price as the function of the implied volatility.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.LimitStopMarket">
      <summary>Limit order with a stop price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.LimitToMarketOnClose">
      <summary>Limit order that converts to a market order when the market closes.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.MarketOnOpen">
      <summary>Order to trade stocks, options, or futures as close as possible to the market open. A MOO order instructs the broker to fill the order at the market during the
open. The order must be filled at a price that falls within the opening range.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.MarketToLimitOnLeftover">
      <summary>Market order that, if not completely filled, converts the unfilled quantity to a limit order at the executed price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Minvol">
      <summary>Order that is executed only if a minimum volume available, at the stated price or better. If not, the whole order is cancelled. Any additional volume from a
partially executed minimum volume order is retained in the central order book.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Moc">
      <summary>Order to trade stocks, options, or futures as close as possible to the market close. An MOC order instructs the broker to fill the order at the market during
the close. The order must be filled at a price that falls within the closing range.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Professional">
      <summary>Professional order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.TT_WHOLESALE_ORDER_RES">
      <summary>Transaction negotiated outside of the Exchange that requires Exchange approval</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.OrderRestriction.Volatility">
      <summary>Order that allows you to trade volatility by calculating the limit price as the function of the implied volatility.</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Add">
      <summary>Returns a  object based on the sum of the value of this <see cref="Price" /> object and another value</summary>
      <returns>Price object representing the sum of the two prices</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.CompareTo">
      <summary>Compares the price in this Price with another value</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Divide">
      <summary>Returns a  object based on the division of the value of this <see cref="Price" /> object by another value</summary>
      <returns>Price object representing the quotient of the two prices</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Equals">
      <summary>Implements the .NET  method to compare the equality of two prices</summary>
      <returns>
        <strong>true</strong> if the prices are equal; <strong>false</strong> otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble">
      <summary>Creates a Price object from a double value with or without rounding</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString">
      <summary>Creates a Price object from a string value with or without rounding</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;price&lt;/i&gt;  parameter does not contain a string with at least one character.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick">
      <summary>Creates a Price object from a tick price value with or without rounding</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.GetTickPrice">
      <returns>Price object containing a tradable price</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.IsEmpty(TradingTechnologies.TTAPI.Price)">
      <summary>Indicates whether a price is empty</summary>
      <returns>
        <strong>true</strong> if the price is empty; <strong>false</strong> otherwise</returns>
      <param name="price">Price object to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Multiply">
      <summary>Returns a  object based on the product of the value of this <see cref="Price" /> object and another value</summary>
      <returns>Price object representing the product of the two prices</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Offset">
      <summary>Returns a Price object a number of price levels away from this price</summary>
      <returns>Price object containing the calculated price</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Round(TradingTechnologies.TTAPI.Rounding)">
      <summary>Rounds a price</summary>
      <returns>Price object representing the rounded price</returns>
      <param name="rounding">Rounding enumeration identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Subtract">
      <summary>Returns a  object based on the difference of the value of this <see cref="Price" /> object and another value</summary>
      <returns>Price object representing the difference of the two prices</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.ToDouble">
      <summary>Gets the value of this field and returns it as a decimal value</summary>
      <returns> representation of the price</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.ToNativeCurrency">
      <summary>Returns the price in the Instrument's native currency</summary>
      <returns>Decimal value representing the price in the native currency</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.ToPrimaryCurrency">
      <summary>Returns the price in the system's primary currency</summary>
      <returns>Decimal value representing the price in the system's currency</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.ToString">
      <summary>Implements the .NET <strong>System.Object.ToString</strong> method</summary>
      <returns>String representation of the price</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.ToTicks">
      <summary>Gets the value of this field and returns it in ticks</summary>
      <returns> representation of the price in ticks</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Add(System.Int32)">
      <summary>Adds the specified number of ticks and the current Price object</summary>
      <returns>Price object containing the result of this operation</returns>
      <param name="tick"> representing the number of ticks to add</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Add(TradingTechnologies.TTAPI.Price)">
      <summary>Adds the price from another Price object and this <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see></summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on prices with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;price&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Price&lt;/b&gt; object.</exception>
      <returns>Price object containing the result of this operation</returns>
      <param name="price">Price object containing the price to use (must use the same <see cref="Instrument" />)</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.CompareTo(System.Int32)">
      <summary>Compares the price in this Price with an integer value</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.CompareTo(System.Double)">
      <summary>Compares the price in this Price with a double value</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.CompareTo(TradingTechnologies.TTAPI.Price)">
      <summary>Compares the price in this Price to the price in another <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Divide(System.Int32)">
      <summary>Divides the value of this  object by a number of ticks</summary>
      <returns>Price object containing the result of this operation</returns>
      <param name="tick"> representing the number of ticks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Divide(TradingTechnologies.TTAPI.Price)">
      <summary>Divides the value of this <paramref name="Price" /> object by the value of another <paramref name="Price" /> object</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on prices with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;price&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Price&lt;/b&gt; object.</exception>
      <returns>Price object containing the result of this operation</returns>
      <param name="price">Price object containing the price to use (must use the same <see cref="Instrument" />)</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Equals(System.Int32)">
      <summary>Compares the price in this <strong>Price</strong> object with an integer value</summary>
      <returns>
        <strong>true</strong> if both are equal; <strong>false</strong>, otherwise</returns>
      <param name="rhs">Integer value representing the price to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Equals(System.Double)">
      <summary>Compares the price in this <strong>Price</strong> object with a double value</summary>
      <returns>
        <strong>true</strong> if both are equal; <strong>false</strong>, otherwise</returns>
      <param name="rhs">Double value representing the price to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Equals(TradingTechnologies.TTAPI.Price)">
      <summary>Compares the price in this <strong>Price</strong> object with the price of another <strong>Price</strong> object</summary>
      <returns>
        <strong>true</strong> if both are equal; <strong>false</strong>, otherwise</returns>
      <param name="rhs">Price object containing the price to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Equals(System.Object)">
      <summary>Compares the price in this <strong>Price</strong> object with a value in another <strong>Object</strong></summary>
      <returns>
        <strong>true</strong> if both are equal; <strong>false</strong>, otherwise</returns>
      <param name="other">object containing the price to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.InstrumentDetails,System.Double)">
      <summary>Creates a Price object from a double value with or without rounding</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.InstrumentDetails,System.Double,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a double value with or without rounding</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.OrderProfileBase,System.Double)">
      <summary>Creates a Price object from a double price value based on the Instrument
associated with an <see cref="OrderProfileBase" /></summary>
      <returns>New Price instance</returns>
      <param name="orderProfile">Order profile containing the desired Instrument</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.Fill,System.Double)">
      <summary>Creates a Price object from a double price value based on the Instrument
associated with an <paramref name="Fill" /></summary>
      <returns>New Price instance</returns>
      <param name="fill">Fill containing the desired Instrument</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.Order,System.Double)">
      <summary>Creates a Price object from a double price value based on the Instrument
associated with an <paramref name="Order" /></summary>
      <returns>New Price instance</returns>
      <param name="order">Order containing the desired Instrument</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.Instrument,System.Double)">
      <summary>Creates a Price object from a double price value based on an <paramref name="Instrument" /></summary>
      <returns>New Price instance</returns>
      <param name="instrument">
        <paramref name="Instrument" /> object containing the price-conversion details</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.OrderProfileBase,System.Double,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a double price value based on the Instrument
associated with an <see cref="OrderProfileBase" /></summary>
      <returns>New Price instance</returns>
      <param name="orderProfile">Order profile containing the desired Instrument</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.Fill,System.Double,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a double price value based on the Instrument
associated with an <paramref name="Fill" /> using the specified rounding method</summary>
      <returns>New Price instance</returns>
      <param name="fill">Fill containing the desired Instrument</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.Order,System.Double,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a double price value based on the Instrument
associated with an <paramref name="Order" /> using the specified rounding method</summary>
      <returns>New Price instance</returns>
      <param name="order">Order containing the desired Instrument</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromDouble(TradingTechnologies.TTAPI.Instrument,System.Double,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a double price value based on an <paramref name="Instrument" /> using
the specified rounding method</summary>
      <returns>New Price instance</returns>
      <param name="instrument">
        <paramref name="Instrument" /> object containing the price-conversion details</param>
      <param name="price"> value representing the price to use in the new <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</param>
      <param name="rounding">Price.Rounding enumeration identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.InstrumentDetails,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a string value with or without rounding</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;&lt;br /&gt;
The &lt;i&gt;price&lt;/i&gt; parameter does not contain a string with at least one character.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.OrderProfileBase,System.String)">
      <summary>Creates a Price object from a price in X_TRADER display format based on the
Instrument associated with an <see cref="OrderProfileBase" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="orderProfile">Order profile containing the desired Instrument</param>
      <param name="price">String containing the price in X_TRADER display format</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.Fill,System.String)">
      <summary>Creates a Price object from a price in X_TRADER display format based on the
Instrument associated with a <paramref name="Fill" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="fill">Fill containing the desired Instrument</param>
      <param name="price">String containing the price in X_TRADER display format</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.Order,System.String)">
      <summary>Creates a Price object from a price in X_TRADER display format based on the
Instrument associated with an <paramref name="Order" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="order">Order containing the desired Instrument</param>
      <param name="price">String containing the price in X_TRADER display format</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.Instrument,System.String)">
      <summary>Creates a Price object from a price in X_TRADER display format based on an
<paramref name="Instrument" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="instrument">Instrument defining the price characteristics</param>
      <param name="price">String containing the price in X_TRADER display format</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.OrderProfileBase,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded price in X_TRADER display format based on
the Instrument associated with an <see cref="OrderProfileBase" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="orderProfile">Order profile containing the desired Instrument</param>
      <param name="price">String containing the price in X_TRADER display format</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.Fill,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded price in X_TRADER display format based on
the Instrument associated with a <paramref name="Fill" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="fill">Fill containing the desired Instrument</param>
      <param name="price">String containing the price in X_TRADER display format</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.Order,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded price in X_TRADER display format based on
the Instrument associated with an <paramref name="Order" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="order">Order containing the desired Instrument</param>
      <param name="price">String containing the price in X_TRADER display format</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromString(TradingTechnologies.TTAPI.Instrument,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded price in X_TRADER display format based on an
<paramref name="Instrument" /></summary>
      <exception caption="Argument" cref="System.ArgumentException">&lt;i&gt;Price cannot be null or empty&lt;/i&gt;
&lt;br&gt;
The  &lt;i&gt;price&lt;/i&gt; parameter is null or contains an empty string ("").</exception>
      <returns>New Price instance</returns>
      <param name="instrument">Instrument defining the price characteristics</param>
      <param name="price">String containing the price in X_TRADER display format</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.OrderProfileBase,System.Int32)">
      <summary>Creates a Price object from a tick price value based on the Instrument associated
with an <see cref="OrderProfileBase" /></summary>
      <returns>New Price instance</returns>
      <param name="orderProfile">Order profile containing the desired Instrument</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.Fill,System.Int32)">
      <summary>Creates a Price object from a tick price value based on the Instrument associated
with a <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Fill.html">Fill</see></summary>
      <returns>New Price instance</returns>
      <param name="fill">Fill containing the desired Instrument</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.Order,System.Int32)">
      <summary>Creates a Price object from a tick price value based on the Instrument associated
with an <paramref name="Order" /></summary>
      <returns>New Price instance</returns>
      <param name="order">Order containing the desired Instrument</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.Instrument,System.Int32)">
      <summary>Creates a Price object from a tick price value based on an <paramref name="Instrument" /></summary>
      <returns>New Price instance</returns>
      <param name="instrument">Instrument defining the price characteristics</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.OrderProfileBase,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>
        <div>
    Creates a Price object from a rounded tick price value based on the Instrument
    associated with an <see cref="OrderProfileBase" /></div>
      </summary>
      <returns>New Price instance</returns>
      <param name="orderProfile">Order profile containing the desired Instrument</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.Fill,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded tick price value based on the Instrument
associated with a <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Fill.html">Fill</see></summary>
      <returns>New Price instance</returns>
      <param name="fill">Fill containing the desired Instrument</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.Order,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded tick price value based on the Instrument
associated with an <paramref name="Order" /></summary>
      <returns>New Price instance</returns>
      <param name="order">Order containing the desired Instrument</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.FromTick(TradingTechnologies.TTAPI.Instrument,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Price object from a rounded tick price value based on an <paramref name="Instrument" /></summary>
      <returns>New Price instance</returns>
      <param name="instrument">Instrument defining the price characteristics</param>
      <param name="tickPrice"> value indicating the price as ticks</param>
      <param name="rounding">Rounding enum identifying the rounding method to use</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.GetTickPrice(System.Int32,System.Boolean)">
      <summary>Returns an offset price with the option to determine how the price is returned for Instruments that use inverted markets</summary>
      <returns>Price object containing a tradable price</returns>
      <param name="offset">Number of ticks away from the current price</param>
      <param name="negateInvertedMarket">
        <strong>true</strong> to switch the direction if the instrument trades in an inverted market; <strong>false</strong>, otherwise</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.GetTickPrice(System.Int32)">
      <summary>Returns the tradeable price some number of ticks (the offset or nth tradeable price) from the current price.</summary>
      <returns> object containing the offset price</returns>
      <param name="offset">Number of ticks away from the current price.</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Multiply(System.Int32)">
      <summary>Multiplies the value of the current Price object with the specified number</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Multiply(TradingTechnologies.TTAPI.Price)">
      <summary>Multiplies the value of another Price object and this <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see></summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on prices with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;price&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Price&lt;/b&gt; object.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Offset(System.Int32,TradingTechnologies.TTAPI.Rounding,System.Boolean)">
      <summary>Returns a Price object a number of price levels away from this price</summary>
      <returns>Price object containing the calculated price</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Offset(System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Returns the current Price which is offset by a given amount of ticks.</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Subtract(System.Int32)">
      <summary>Subtracts the specified number of ticks from the current Price object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.Subtract(TradingTechnologies.TTAPI.Price)">
      <summary>Subtracts the value of another Price object from the current <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Price.html">Price</see> object</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on prices with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;price&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Price&lt;/b&gt; object.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.ToCurrency(TradingTechnologies.TTAPI.Currency)">
      <summary>Returns the price in a specified currency</summary>
      <returns>Decimal value representing the price in the specified currency</returns>
      <param name="targetCurrency">Currency object identifying the currency to return</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Addition">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Decrement(TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with a Price object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Division">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Equality">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThan">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThanOrEqual">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Increment(TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with a Price object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Inequality">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThan">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThanOrEqual">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Multiply">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Subtraction">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Addition(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Addition(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Addition(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Division(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Division(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Division(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Equality(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Equality(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Equality(TradingTechnologies.TTAPI.Price,System.Double)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Equality(System.Double,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Equality(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThan(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThan(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThan(TradingTechnologies.TTAPI.Price,System.Double)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThan(System.Double,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThan(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThanOrEqual(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThanOrEqual(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThanOrEqual(TradingTechnologies.TTAPI.Price,System.Double)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThanOrEqual(System.Double,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_GreaterThanOrEqual(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Inequality(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Inequality(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Inequality(TradingTechnologies.TTAPI.Price,System.Double)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Inequality(System.Double,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Inequality(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThan(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThan(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThan(TradingTechnologies.TTAPI.Price,System.Double)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThan(System.Double,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThan(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThanOrEqual(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThanOrEqual(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThanOrEqual(TradingTechnologies.TTAPI.Price,System.Double)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThanOrEqual(System.Double,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_LessThanOrEqual(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Multiply(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Multiply(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Multiply(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Subtraction(System.Int32,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Subtraction(TradingTechnologies.TTAPI.Price,System.Int32)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Price.op_Subtraction(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Price)">
      <summary>Implements the standard .NET operator to work with Price objects</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Price.InstrumentDetails">
      <summary>Returns the Instrument details associated with this price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Price.IsTradable">
      <summary>Indicates whether this price is tradable for the associated Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Price.IsValid">
      <summary>Indicates whether this price is valid for the associated instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Price.Empty">
      <summary>Represents an empty price</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Price.Invalid">
      <summary>Represents an invalid price</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.#ctor">
      <summary>Instantiates an instance of the  structure</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.#ctor(System.String,System.String,System.String)">
      <summary>Instantiates a new ProductKey object based on the market name, product type,
and product name</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Product name must not be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;productName&lt;/i&gt; paramater does not contain a valid String value.
&lt;p&gt;
&lt;i&gt;Product type must not be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;productType&lt;/i&gt; paramater does not contain a valid String value.
&lt;p&gt;
&lt;i&gt;Problem parsing product type&lt;/i&gt;
&lt;br&gt;
Some internal system error occurred.</exception>
      <returns>New ProductKey instance</returns>
      <param name="marketName"> containing the name of the market (such as <strong>CME</strong>)</param>
      <param name="productType">
        <para> enum value corresponding to the product type (such as <strong>FUTURE</strong> or <strong>NRG</strong>)</para>
      </param>
      <param name="productName">
        <para> containing the name of the product associated with this key (such as <strong>ES</strong> or <strong>ZB</strong>)</para>
      </param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.#ctor(System.String,TradingTechnologies.TTAPI.ProductType,System.String)">
      <summary>Instantiates a new ProductKey object based on the market name, <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.ProductType.html">ProductType</see> object, and product name</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Product name must not be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;productName&lt;/i&gt; paramater does not contain a valid String value.
</exception>
      <returns>New ProductKey instance</returns>
      <param name="marketName"> containing the name of the market (such as <strong>CME</strong>)</param>
      <param name="productType">
        <para>
          <paramref name="ProductType" /> enum value corresponding to the product type (such as <strong>FUTURE</strong> or <strong>NRG</strong>)</para>
      </param>
      <param name="productName">
        <para> containing the name of the product associated with this key (such as <strong>ES</strong> or <strong>ZB</strong>)</para>
      </param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.#ctor(TradingTechnologies.TTAPI.MarketKey,TradingTechnologies.TTAPI.ProductType,System.String)">
      <summary>Instantiates a new ProductKey object based on the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.MarketKey.html">MarketKey</see> object, <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.ProductType.html">ProductType</see> object, and product name</summary>
      <returns>
        <para>New ProductKey instance</para>
      </returns>
      <param name="marketKey">MarketKey object identifying the market</param>
      <param name="productType">
        <para>ProductType enum value corresponding to the product type (such as
<strong>FUTURE</strong> or <strong>NRG</strong>)</para>
      </param>
      <param name="productName">
        <para>String containing the name of the product associated with this key (such as <strong>ES</strong> or <strong>ZB</strong>)</para>
      </param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.Equals">
      <summary>Returns whether this <strong>ProductKey</strong> and another object are equal</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.IsEmpty(TradingTechnologies.TTAPI.ProductKey)">
      <summary>Returns whether a ProductKey object is empty</summary>
      <param name="key">ProductKey to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.ToString">
      <summary>Returns a string-representation of this object</summary>
      <returns> that represents the current <see cref="T:System.Object" /></returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.Equals(TradingTechnologies.TTAPI.ProductKey)">
      <summary>Returns whether this and another <strong>ProductKey</strong> are equal</summary>
      <returns>
        <strong>true</strong> if the objects are equal; <strong>false</strong>, otherwise</returns>
      <param name="rhs">ProductKey to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.Equals(System.Object)">
      <summary>Returns whether this <strong>ProductKey</strong> and another object are equal</summary>
      <returns>
        <strong>true</strong> if the objects are equal; <strong>false</strong>, otherwise</returns>
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.op_Equality(TradingTechnologies.TTAPI.ProductKey,TradingTechnologies.TTAPI.ProductKey)">
      <summary>Implements the standard .NET operator for ProductKey objects</summary>
      <param name="lhs">ProductKey object to compare</param>
      <param name="rhs">ProductKey object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductKey.op_Inequality(TradingTechnologies.TTAPI.ProductKey,TradingTechnologies.TTAPI.ProductKey)">
      <summary>Implements the standard .NET operator for ProductKey objects</summary>
      <param name="lhs">ProductKey object to compare</param>
      <param name="rhs">ProductKey object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductKey.MarketKey">
      <summary>Returns the  for the TT Gateway that trades the <see cref="Product" /> associated with this <see cref="ProductKey" /></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductKey.Name">
      <summary>Returns the name of the product associated with this </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductKey.Type">
      <summary>Returns the  for the <see cref="Product" /> associated with this <see cref="ProductKey" /></summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.Parse">
      <summary>Converts the string representation of a product type to its ProductType equivalent</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.ToString">
      <summary>Returns a string representation of this object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.TryParse">
      <summary>Converts the string representation of a product type to its ProductType equivalent, returning a value to indicate whether the conversion succeeded</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.Parse(System.String,System.Boolean)">
      <summary>Creates a ProductType from a string, without regard to capitalization</summary>
      <returns>ProductType object matching the string</returns>
      <param name="text">string containing the product type text</param>
      <param name="ignoreCase">
        <strong>true</strong> to ignore capitalization; <strong>false</strong>, otherwise</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.Parse(System.String)">
      <summary>Creates a ProductKey from a case-sensitive string</summary>
      <returns>ProductType object matching the string</returns>
      <param name="text">string containing the product type text</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.TryParse(System.String,System.Boolean,TradingTechnologies.TTAPI.ProductType@)">
      <summary>Creates a ProductType from a string with the option to ignore capitalization</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="text">string containing the product type</param>
      <param name="ignoreCase">
        <strong>true</strong> to ignore capitalization; <strong>false</strong>, otherwise</param>
      <param name="out">ProductType object matching the string</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.TryParse(System.String,TradingTechnologies.TTAPI.ProductType@)">
      <summary>Creates a ProductType from a case-sensitive string</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="text">string containing the product type</param>
      <param name="out">ProductType object matching the string</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.op_Equality(TradingTechnologies.TTAPI.ProductType,TradingTechnologies.TTAPI.ProductType)">
      <summary>Implements the standard .NET operator for ProductType objects</summary>
      <param name="lhs">ProductType object to compare</param>
      <param name="rhs">ProductType object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductType.op_Inequality(TradingTechnologies.TTAPI.ProductType,TradingTechnologies.TTAPI.ProductType)">
      <summary>Implements the standard .NET operator for ProductType objects</summary>
      <param name="lhs">ProductType object to compare</param>
      <param name="rhs">ProductType object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductType.AllAvailableValues">
      <summary>Gets a collection of product types supported by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductType.Id">
      <summary>Gets the unique ID for this product type</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductType.IsValid">
      <summary>Gets whether this ProductType is valid</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductType.Name">
      <summary>Gets the name associated with this product type</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.AutospreaderSpread">
      <summary>Indicates a synthetic spread product created by TT Autospreader</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Bond">
      <summary>Indicates a bond product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.CFD">
      <summary>Indicates a contract-for-difference product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Energy">
      <summary>Indicates an energy product that trades in flow</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Forex">
      <summary>Indicates a foreign exchange product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Future">
      <summary>Indicates a futures product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Index">
      <summary>Indicates an index product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Invalid">
      <summary>Indicates an invalid product type</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.NDF">
      <summary>Indicates a non-disclosed forward product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Option">
      <summary>Indicates on options product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Spread">
      <summary>Indicates a spread product offered by a TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Stock">
      <summary>Indicates a stock product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Strategy">
      <summary>Indicates a strategy product offered by a TT Gateway</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Swap">
      <summary>Indicates a swap product</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProductType.Warrant">
      <summary>Indicates a warrant product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossStatistics.BuyAveragePrice">
      <summary>Gets the average price for all Buy orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossStatistics.BuyPosition">
      <summary>Gets the position based only on Buy order fills</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossStatistics.FillCount">
      <summary>Gets the number of Fill objects received</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossStatistics.NetPosition">
      <summary>Gets the net position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossStatistics.SellAveragePrice">
      <summary>Gets the average price for all Sell orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossStatistics.SellPosition">
      <summary>Gets the position based only on Sell orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.AsNativeCurrency">
      <summary>Returns a trader's P&amp;L in the contract's native currency</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.AsPrimaryCurrency">
      <summary>Returns a trader's P&amp;L in the default currency</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.AsQuantityTimesPrice">
      <summary>Returns P&amp;L using a (quantity*price) calculation</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.AsTicks">
      <summary>Returns a trader's P&amp;L as the number of ticks</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.SupportsAsNativeCurrency">
      <summary>Gets whether the associated Instrument supports P&amp;L in the native currency</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.SupportsAsPrimaryCurrency">
      <summary>Gets whether the associated Instrument supports P&amp;L in the primary currency</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.SupportsAsQuantityTimesPrice">
      <summary>Gets whether the associated Instrument supports P&amp;L quantity times price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProfitLossValue.SupportsAsTicks">
      <summary>Gets whether the associated Instrument supports P&amp;L as ticks</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.ProfitLossValue.InvalidValue">
      <summary>Represents an invalid value for the object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Add">
      <summary>Returns a  object based on the sum of the price represented by this <see cref="Quantity" /> object and another value</summary>
      <returns>Quantity object representing the sum of the two quantities</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.CompareTo">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Divide">
      <summary>Returns a  object based on the quotient of the quantity represented by this <see cref="Quantity" /> object by another value</summary>
      <returns>Quantity object representing the quotient of the two quantities</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Equals">
      <summary>Implements the .NET  method to compare the equality of two quantities</summary>
      <returns>
        <strong>true</strong> if the quantities are equal; <strong>false</strong> otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow">
      <summary>Creates a Quantity object from an integer representing a flow quantity for the
specified object's underlying Instrument</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt">
      <summary>Creates a Quantity object from an integer representing a quantity for the
specified object's underlying Instrument</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString">
      <summary>Creates a Quantity object from a string containing a quantity for the specified
object's underlying Instrument</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.IsEmpty(TradingTechnologies.TTAPI.Quantity)">
      <summary>Indicates whether a quantity is empty</summary>
      <returns>
        <strong>true</strong> if the quantity is empty; <strong>false</strong> otherwise</returns>
      <param name="quantity">Quantity object to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Multiply">
      <summary>Returns a  object based on the product of the value of this <see cref="Quantity" /> object and another value</summary>
      <returns>Quantity object containing the product of the two quantities</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Subtract">
      <summary>Returns a  object based on the difference of the value of this <see cref="Quantity" /> object and another value</summary>
      <returns>Quantity object containing the difference between the two quantities</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.ToFlow">
      <summary>Gets the value of this field and returns it as an integer value representing the contract quantity</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.ToInt">
      <summary>Returns the value as a lot quantity</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.ToString">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Add(System.Int32)">
      <summary>Adds the specified quantity to the current Quantity object</summary>
      <returns>Quantity object containing the result of this operation</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Add(TradingTechnologies.TTAPI.Quantity)">
      <summary>Adds the quantity from another Quantity object and this <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Quantity.html">Quantity</see></summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on quantities with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Quantity&lt;/b&gt; object.</exception>
      <returns>Quantity object containing the result of this operation</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.CompareTo(System.Int32)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.CompareTo(TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Divide(System.Int32)">
      <summary>Divides the quantity in this <paramref name="Quantity" /> object by a number</summary>
      <returns>Quantity object containing the result of this operation</returns>
      <param name="quantity">Integer representing the denominator</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Divide(TradingTechnologies.TTAPI.Quantity)">
      <summary>Divides the quantity of this <paramref name="Quantity" /> object by the quantity of another <paramref name="Quantity" /> object</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on quantities with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Quantity&lt;/b&gt; object.</exception>
      <returns>Quantity object containing the result of this operation</returns>
      <param name="quantity">Quantity object containing the quantity to use as the denominator (must use the
same <see cref="Instrument" />)</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Equals(System.Int32)">
      <summary>Implements the .NET method to compare the equality of two quantities</summary>
      <returns>
        <strong>true</strong> if the quantities are equal; <strong>false</strong> otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Equals(TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the .NET method to compare the equality of two quantities</summary>
      <returns>
        <strong>true</strong> if the quantities are equal; <strong>false</strong> otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Equals(System.Object)">
      <summary>Implements the .NET method to compare the equality of two quantities</summary>
      <returns>
        <strong>true</strong> if the quantities are equal; <strong>false</strong> otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.OrderProfileBase,System.Int32)">
      <summary>Creates a quantity object from a flow quantity based the Instrument derived from an Order profile</summary>
      <returns>Quantity object representing the quantity</returns>
      <param name="orderProfile"> object identifying the <see cref="Instrument" /></param>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.Fill,System.Int32)">
      <summary>Creates a quantity object from a flow quantity based the Instrument derived from a Fill</summary>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.Order,System.Int32)">
      <summary>Creates a quantity object from a flow quantity based the Instrument derived from an Order</summary>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.Instrument,System.Int32)">
      <summary>Creates a quantity object from a flow quantity for an Instrument</summary>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.OrderProfileBase,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a quantity object from a flow quantity based the Instrument derived from an Order profile</summary>
      <returns>Quantity object representing the quantity</returns>
      <param name="orderProfile"> object identifying the <see cref="Instrument" /></param>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.Fill,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a quantity object from a flow quantity based the Instrument derived from a Fill</summary>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.Order,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a quantity object from a flow quantity based the Instrument derived from an Order</summary>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromFlow(TradingTechnologies.TTAPI.Instrument,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a quantity object from a flow quantity for an Instrument</summary>
      <param name="flowAmount">Integer representing the flow quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.OrderProfileBase,System.Int32)">
      <summary>Creates a Quantity object based on the Instrument in an OrderProfile object</summary>
      <returns>New Quantity object</returns>
      <param name="orderProfile">OrderProfileBase object representing the OrderProfile containing the
Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.Fill,System.Int32)">
      <summary>Creates a Quantity object based on the Instrument in a Fill object</summary>
      <returns>New Quantity object</returns>
      <param name="fill">Fill object representing the Fill containing the Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.Order,System.Int32)">
      <summary>Creates a Quantity object based on the Instrument in an Order object</summary>
      <returns>New Quantity object</returns>
      <param name="order">Order object representing the Order containing the Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.Instrument,System.Int32)">
      <summary>Creates a Quantity object based on an Instrument object</summary>
      <returns>New Quantity object</returns>
      <param name="instrument">Instrument object representing the Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.OrderProfileBase,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in an OrderProfile object</summary>
      <returns>New Quantity object</returns>
      <param name="orderProfile">OrderProfileBase object representing the OrderProfile containing the
Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the quantity, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.Fill,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in a Fill object</summary>
      <returns>New Quantity object</returns>
      <param name="fill">Fill object representing the Fill containing the Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the quantity, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.Order,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in an Order object</summary>
      <returns>New Quantity object</returns>
      <param name="order">Order object representing the Order containing the Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the quantity, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromInt(TradingTechnologies.TTAPI.Instrument,System.Int32,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument object</summary>
      <returns>New Quantity object</returns>
      <param name="instrument">Instrument object representing the Instrument</param>
      <param name="quantity">Integer representing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the quantity, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.OrderProfileBase,System.String)">
      <summary>Creates a Quantity object based on the Instrument in an OrderProfile object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="orderProfile">OrderProfileBase object representing the OrderProfile containing the
Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Fill,System.String)">
      <summary>Creates a Quantity object based on the Instrument in a Fill object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="fill">Fill object representing the Fill containing the Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Order,System.String)">
      <summary>Creates a Quantity object based on the Instrument in an Order object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="order">Order object representing the Order containing the Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Instrument,System.String)">
      <summary>Creates a Quantity object based on anInstrument object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="instrument">Instrument object representing the Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.OrderProfileBase,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in an OrderProfile object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="orderProfile">OrderProfileBase object representing the OrderProfile containing the
Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Fill,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in a Fill object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="fill">Fill object representing the Fill containing the Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Order,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in an Order object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="order">Order object representing the Order containing the Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Instrument,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on anInstrument object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="instrument">Instrument object representing the Instrument</param>
      <param name="contractsQuantity">String containing the contract quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.OrderProfileBase,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String)">
      <summary>Creates a Quantity object based on the Instrument in an OrderProfile object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="orderProfile">OrderProfileBase object representing the OrderProfile containing the
Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Fill,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String)">
      <summary>Creates a Quantity object based on the Instrument in a Fill object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="fill">Fill object representing the Fill containing the Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String)">
      <summary>Creates a Quantity object based on the Instrument in an Order object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="order">Order object representing the Order containing the Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Instrument,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String)">
      <summary>Creates a Quantity object based on anInstrument object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="instrument">Instrument object representing the Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.OrderProfileBase,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in an OrderProfile object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="orderProfile">OrderProfileBase object representing the OrderProfile containing the
Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Fill,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in a Fill object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="fill">Fill object representing the Fill containing the Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on the Instrument in an Order object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="order">Order object representing the Order containing the Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.FromString(TradingTechnologies.TTAPI.Instrument,TradingTechnologies.TTAPI.QuantityDisplayFormat,System.String,TradingTechnologies.TTAPI.Rounding)">
      <summary>Creates a Quantity object based on anInstrument object</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Quantity cannot be null or empty.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; or &lt;i&gt;contractsQuantity&lt;/i&gt; parameter does not contain a value.</exception>
      <returns>New Quantity object</returns>
      <param name="instrument">Instrument object representing the Instrument</param>
      <param name="displayFormat">QuantityDisplayFormat enum specifying how to interpret the
delivered quantity</param>
      <param name="quantity">String containing the desired quantity</param>
      <param name="rounding">Rounding enum specifying how to round the value, if necessary</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Multiply(System.Int32)">
      <summary>Multiplies the value of the current <paramref name="Quantity" /> object with the specified number</summary>
      <returns>Quantity object containing the result of this operation</returns>
      <param name="quantity">Integer representing the multiplier</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Multiply(TradingTechnologies.TTAPI.Quantity)">
      <summary>Multiplies the value of another <paramref name="Quantity" /> object and this <paramref name="Quantity" /></summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on quantities with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Quantity&lt;/b&gt; object.</exception>
      <returns>Quantity object containing the result of this operation</returns>
      <param name="quantity">Quantity object containing the quantity to use as the multiplier (must use the
same <see cref="Instrument" />)</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Subtract(System.Int32)">
      <summary>Subtracts the specified quantity from the current <paramref name="Quantity" /> object</summary>
      <returns>Quantity object containing the result of this operation</returns>
      <param name="quantity">Integer representing value to subtract</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.Subtract(TradingTechnologies.TTAPI.Quantity)">
      <summary>Subtracts the value of another <paramref name="Quantity" /> object from the current <paramref name="Quantity" /> object</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Operation not permitted on quantities with different InstrumentDetails.&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;quantity&lt;/i&gt; parameter is associated with a different Instrument than this &lt;b&gt;Quantity&lt;/b&gt; object.</exception>
      <returns>Quantity object containing the result of this operation</returns>
      <param name="quantity">Quantity object containing the quantity to use (must use the same <see cref="Instrument" />)</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.ToString">
      <summary>Gets the value of this field and returns it as a string value</summary>
      <returns> containing the contract quantity</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.ToString(TradingTechnologies.TTAPI.QuantityDisplayFormat)">
      <summary>Returns the quantity using the specified format</summary>
      <returns> containing the formatted quantity</returns>
      <param name="displayFormat">QuantityDisplayFormat enumeration indicating whether to return the
quantity as a flow or contract value</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Addition">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Decrement(TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Division">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Equality">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThan">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThanOrEqual">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Implicit(TradingTechnologies.TTAPI.Quantity)~System.Int32">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Increment(TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Inequality">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThan">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThanOrEqual">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Multiply">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Subtraction">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Addition(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Addition(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Addition(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Division(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Division(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Division(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Equality(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Equality(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Equality(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThan(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThan(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThan(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThanOrEqual(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThanOrEqual(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_GreaterThanOrEqual(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Inequality(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Inequality(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Inequality(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThan(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThan(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThan(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThanOrEqual(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThanOrEqual(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_LessThanOrEqual(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Multiply(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Multiply(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Multiply(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Subtraction(System.Int32,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Subtraction(TradingTechnologies.TTAPI.Quantity,System.Int32)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Quantity.op_Subtraction(TradingTechnologies.TTAPI.Quantity,TradingTechnologies.TTAPI.Quantity)">
      <summary>Implements the standard .NET operator to work with Quantity objects</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Quantity.InstrumentDetails">
      <summary>Returns the Instrument details associated with this quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Quantity.IsValid">
      <summary>Indicates whether this quantity is valid for the associated instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Quantity.Empty">
      <summary>Represents an empty quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Quantity.Invalid">
      <summary>Represents an invalid quantity</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TickPrice.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the  class</summary>
      <param name="numerator">
        <para>Type: </para>
        <para>Numerator portion of the tick price fraction</para>
      </param>
      <param name="denominator">
        <para>Type: </para>
        <para>Denominator portion of the tick price fraction</para>
      </param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TickPrice.CompareTo(TradingTechnologies.TTAPI.TickPrice)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TickPrice.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TickPrice.ToString">
      <summary>Implements the standard .NET method for TickPrice objects</summary>
      <returns>String representation of the tick price</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TickPrice.Denominator">
      <summary>Contract’s tick price denominator</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TickPrice.Numerator">
      <summary>Contract’s tick price numerator</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesData.Direction">
      <summary>Gets the side for a trade</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesData.Instrument">
      <summary>Gets the Instrument associated with this trade transaction</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesData.IsOverTheCounter">
      <summary>Gets whether the trade is over-the-counter (OTC)</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesData.TimeStamp">
      <summary>Gets the time the trade occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesData.TradePrice">
      <summary>Gets the price at which this trade occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesData.TradeQuantity">
      <summary>Gets the quantity traded in this trade transaction</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeInForce.#ctor">
      <summary>Instantiates an instance of the TimeInForce class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeInForce.#ctor(TradingTechnologies.TTAPI.TimeInForceCode,System.DateTime)">
      <summary>Creates a TimeInForce object with a specific end date for GoodTillDate
orders</summary>
      <returns>New TimeInForce object</returns>
      <param name="timeInforceCode">TimeInForceCode enum indicating how long to leave the order in the
market</param>
      <param name="date">DateTime object indicating the ending date for a GoodTillDate order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeInForce.#ctor(TradingTechnologies.TTAPI.TimeInForceCode)">
      <summary>Instantiates a TimeInForce object with no specific date</summary>
      <returns>New TimeInForce instance</returns>
      <param name="timeInforceCode">TimeInForceCode enum indicating how long to leave the order in the
market</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeInForce.Code">
      <summary>Gets when to pull a working order from the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeInForce.Date">
      <summary>Gets the date associated with the GoodTillDate order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AdminMessageEventArgs">
      <summary>Represents the event arguments sent in a Session.AdminMessage
event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AfterSendOrderEventArgs">
      <summary>Represents the information returned in the Session.AfterSendOrder event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Ancestor">
      <summary>Represents the parent order of a child order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ApiCreationException">
      <summary>Represents an exception thrown when creating a TTAPI object</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AsyncOperationError">
      <summary>Represents an error condition from a request</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AuthenticationStatus">
      <summary>Represents the status returned by the UniversalLoginTTAPI.AuthenticationStatusUpdate
event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AuthenticationStatusUpdateEventArgs">
      <summary>Represents the event arguments sent in a UniversalLoginTTAPI.AuthenticationStatusUpdate
callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.AutospreaderInstrument">
      <summary>Represents the an Autospreader Instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.BeforeSendOrderEventArgs">
      <summary>Represents the information returned in the Session.BeforeSendOrder event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.BooleanField">
      <summary>Represents a typed Field containing Boolean values</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CatalogUpdatedEventArgs`1">
      <summary>Represents the base class for catalog event arguments sent in a catalog update callback</summary>
      <typeparam name="TItem">TItem indicating which type of catalog was updated</typeparam>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ConfirmFillFailedEventArgs">
      <summary>Represents the base class for event arguments for the FillsSubscription.ConfirmFillFailed event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ConnectionStatus">
      <summary>Represents the status returned by the XTraderModeTTAPI.XTraderStatusChanged event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ConnectionStatusUpdateEventArgs">
      <summary>Represents the event arguments sent in an XTraderModeTTAPI.ConnectionStatusUpdate callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CurrencyUpdatedEventArgs">
      <summary>Represents the event arguments sent in a Session.CurrencyUpdated callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Dispatcher">
      <summary>Provides properties, methods, and events for managing events across application threads</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.DispatcherBoundSubscription">
      <summary>Provides properties and methods for managing a subscription bound to a Dispatcher</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.DispatcherException">
      <summary>Represents the exception thrown when an error occurs when attempting to access a Dispatcher object</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.DispatcherObject">
      <summary>Provides properties and methods for managing events for an application thread</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.DispatcherShutdownEventArgs">
      <summary>Represents the information returned from Dispatcher events</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.DoubleField">
      <summary>Represents a typed Field containing double values</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.EnumField`1">
      <summary>Represents Field with an enumeration value</summary>
      <typeparam name="T">TypedField object</typeparam>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Feed">
      <summary>Represents a connection to a Price, Order, or Fill feed for a Market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FeedStatusChangedEventArgs">
      <summary>Represents the market feed whose status changed</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Field">
      <summary>Provides an abstract representation of live market data</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Fill">
      <summary>Represents a fill sent by an Exchange</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillAddedEventArgs">
      <summary>Represents the event arguments sent in a FillAdded callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillAmendedEventArgs">
      <summary>Represents the event arguments sent in a FillAmended callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillBookDownloadEventArgs">
      <summary>Represents the event arguments sent in a FillBookDownload callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillDeletedEventArgs">
      <summary>Represents the event arguments sent in a FillDeleted callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillFeed">
      <summary>Provides properties, methods, and events for monitoring the connection to a Market's Fill Server</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillListEventArgs">
      <summary>Represents the event arguments sent to signal the beginning and ending of a block of Fills from a Market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FillsSubscription">
      <summary>Provides properties, methods, and events for monitoring Fill activity</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.GatewayLicenseExpiringEventArgs">
      <summary>Represents the event arguments sent in an TTAPI.LicenseIssue
callback for a TT Gateway license that is nearing expiration</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InitializationException">
      <summary>Creates an exception to throw when an error occurs during the application initialization</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Instrument">
      <summary>Encapsulates a tradable instrument for an Exchange</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentCatalogSubscription">
      <summary>Provides properties, methods, and events for monitoring a Product's tradable contracts</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentCatalogUpdatedEventArgs">
      <summary>Represents the event arguments sent in an InstrumentCatalog.InstrumentCatalogUpdated
callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentDetails">
      <summary>Provides properties and methods for accessing the static data associated with a tradable instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InstrumentNotFoundException">
      <summary>Represents the error returned when an InstrumentLookupSubscription returns no matching
instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.InvalidLicenseEventArgs">
      <summary>Represents the event arguments sent in an TTAPI.LicenseIssue
callback for an invalid TT license</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Leg">
      <summary>Provides methods and properties for managing underlying contracts of a multiple-contract Instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LegList">
      <summary>Provides methods and properties to access underlying contracts for a parent contract</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LicenseExpiringEventArgs">
      <summary>Represents the event arguments sent in an TTAPI.LicenseIssue
callback for a TT license that is nearing expiration</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.LicenseIssueEventArgs">
      <summary>Base class representing the event arguments sent in an TTAPI.LicenseIssue callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Market">
      <summary>Represents a provider of a well-defined set of tradable instruments</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.MarketCatalog">
      <summary>Represents the collection of markets accessible by the trader</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.MarketCatalogUpdatedEventArgs">
      <summary>Represents the information returned in a MarketCatalog.MarketsUpdated event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.NoLicenseEventArgs">
      <summary>Represents the event arguments sent in an TTAPI.LicenseIssue
callback for a TT license is unavailable</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Order">
      <summary>Defines properties that provide information about a specific order working in the market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderAddedEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderAdded callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderBookDownloadEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderBookDownload
callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderDeletedEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderDeleted callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderFeed">
      <summary>Provides properties, methods, and events for monitoring the connection to a Market's Order Server</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderFilledEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderFilled callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderProfile">
      <summary>Provides properties and methods for creating an order to submit to a TT Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderProfileBase">
      <summary>Base class that provides methods and properties common to all types of orders</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderRejectedEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderRejected callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderRoutingStatus">
      <summary>Provides properties to determine the status of an attempt to route an order profile to a TT Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderStatusUnknownEventArgs">
      <summary>Represents the event arguments sent in an TradeSubscription.OrderStatusUnknown
callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderTimeoutEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderTimeout callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.OrderUpdatedEventArgs">
      <summary>Represents the event arguments sent in a TradeSubscription.OrderUpdated callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceFeed">
      <summary>Provides properties, methods, and events for monitoring the connection to a Market's Price Server</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceField">
      <summary>Represents a data field that contains price data</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceSubscription">
      <summary>Provides properties, methods, and events for monitoring market data for an Instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceSubscriptionFields">
      <summary>Provides properties and methods for accessing trade data for an instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.PriceSubscriptionSettings">
      <summary>Identifies the types of data to include in a price subscription</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Product">
      <summary>Represents a collection of tradable contracts that share similar attributes</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProductCatalogSubscription">
      <summary>Provides properties, methods, and events for monitoring available Products in a Market</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProductCatalogUpdatedEventArgs">
      <summary>Represents the event arguments sent in a ProductCatalog.ProductCatalogUpdated callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ProductNotFoundException">
      <summary>Represents the error returned when an ProductLookupSubscription returns no matching instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.QuantityField">
      <summary>Represents a field that contains a quantity value</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Request`1">
      <summary>Represents the base class for requests</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.RequestCompletedEventArgs">
      <summary>Represents the event arguments sent in a Request&lt;TCompletedArgs&gt;
callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.RolloverEventArgs">
      <summary>Represents the event arguments sent in a FillsSubscripton.Rollover or <see cref="TradingTechnologies.TTAPI.Tradebook~TradingTechnologies.TTAPI.Tradebook.TradeSubscription~Rollover_EV.html">TradeSubscription.Rollover</see> event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Session">
      <summary>Base class that provides methods and properties for a trader's access to markets</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ShutdownEventArgs">
      <summary>Represents the event arguments sent in a ShutdownCompleted
event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SiteOrderKeyGenerationException">
      <summary>Provides methods for accessing information about exceptions thrown while generating site order keys</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SseSyntheticOrder">
      <summary>Provides the order properties unique for an Synthetic SE synthetic order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Subscription">
      <summary>Represents the base class for all TT API subscriptions, providing methods and properties common to all types of subscriptions.</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SynchronizationContext">
      <summary>Provides support for legacy threaded code you want to incorporate into a TT API application</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SyntheticOrder">
      <summary>Represents an order TT synthesizes to trade on an Exchange that does not support the order natively</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.SyntheticOrderProfile">
      <summary>Provides properties and methods for creating a synthetic order to submit to a TT Synthetic SE Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimeAndSalesEventArgs">
      <summary>Represents the event arguments sent in a TimeAndSalesSubscription.Update callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimeAndSalesSubscription">
      <summary>Provides properties, methods, and events to monitor every price change for an Instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TimedOutOrder">
      <summary>Represents an order profile that timed out before reaching the exchange</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TradingEnabledChangedEventArgs">
      <summary>Represents the event arguments sent in a TradingEnabledChanged callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TTAPI">
      <summary>Base class for TT API applications</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TTAPIOptions">
      <summary>Provides properties to customize a TT API application</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.TypedField`1">
      <summary>Represents a strongly-typed field</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UIDispatcher">
      <summary>Represents a Dispatcher used in Windows Forms applications</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UInt64Field">
      <summary>Represents a field containing an unsigned 64-bit integer value</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UnhandledManagedExceptionEventArgs">
      <summary>Provides information about an unhandled exception generated from your application code</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UnhandledNativeExceptionEventArgs">
      <summary>Provides information about an unhandled exception generated from the TT API</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UniversalLoginTTAPI">
      <summary>Represents an TT API application that usesTT Universal Login for authenticating users and connecting to TT Gateways</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions">
      <summary>Provides properties to customize an Universal Login mode TT API application</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.WorkerDispatcher">
      <summary>Represents a Dispatcher used in console or "black-box" applications</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.WorkupOwnerUpdatedEventArgs">
      <summary>Represents the information returned in a TradeSubscription.WorkupOwnerUpdated
callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.XTraderModeTTAPI">
      <summary>Represents an TT API application that uses X_TRADER for authenticating users</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions">
      <summary>Provides properties to customize an X_TRADER mode TT API application</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.AdminMessageEventArgs.#ctor(System.String)">
      <summary>Instantiates a new instance of the AdminMessageEventArgs class</summary>
      <param name="message"> containing the message included in the event</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AdminMessageEventArgs.Message">
      <summary>Gets the event message text</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Ancestor.OrderType">
      <summary>Gets the type of order associated this parent order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Ancestor.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify this parent order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ApiCreationException.IsRecoverable">
      <summary>Gets whether the TTAPI object can be created in spite of the exception</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AsyncOperationError.Code">
      <summary>Gets the error code associated with the exception</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AsyncOperationError.IsRecoverableError">
      <summary>Gets whether the TT API can return from the error</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AsyncOperationError.Message">
      <summary>Gets the text message sent with the exception</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.AuthenticationStatus.ToString">
      <summary>Returns the status as a string</summary>
      <returns>String representation of the AuthenticationResultCode property</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AuthenticationStatus.AuthenticationResultCode">
      <summary>Gets the result from the login attempt or status update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AuthenticationStatus.IsSuccess">
      <summary>Gets a value that indicates whether an authentication attempt succeeded</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AuthenticationStatus.StatusMessage">
      <summary>Gets the message sent with the login response</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AuthenticationStatusUpdateEventArgs.Status">
      <summary>Gets the status of the universal login</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.AutospreaderInstrument.GetValidOrderFeeds">
      <summary>Gets the list of Order feeds valid for this AutospreaderInstrument</summary>
      <returns>Collection of OrderFeed objects to which you can send orders for this
<strong>AutospreaderInstrument</strong></returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.AutospreaderInstrument.IsLaunched(TradingTechnologies.TTAPI.OrderFeed)">
      <summary>Gets whether this AutospreaderInstrument has been successfully launched to a specified OrderFeed</summary>
      <returns>
        <strong>true</strong> if launched to the feed; <strong>false</strong>, otherwise</returns>
      <param name="orderFeed">OrderFeed object identifying the feed to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.AutospreaderInstrument.IsTradable(TradingTechnologies.TTAPI.OrderFeed)">
      <summary>Gets whether you can currently submit an order for this AutospreaderInstrument to a specified OrderFeed</summary>
      <returns>
        <strong>true</strong> if you can send an order; <strong>false</strong>, otherwise</returns>
      <param name="orderFeed">OrderFeed object identifying the feed to check</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.AutospreaderInstrument.LaunchToOrderFeed(TradingTechnologies.TTAPI.OrderFeed)">
      <summary>Creates a request to send an Autospreader instrument to an Autospreader SE Server</summary>
      <returns>LaunchReturnCode enum value representing the request</returns>
      <param name="orderFeed">
        <para>OrderFeed identifying the Autospreader SE Server</para>
      </param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AutospreaderInstrument.InstrumentDetails">
      <summary>Gets the details of the current snapshot of the Instrument in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AutospreaderInstrument.Key">
      <summary>Gets the unique instrument definition key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AutospreaderInstrument.Product">
      <summary>Gets the Product associated with the Autospreader Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.AutospreaderInstrument.SpreadDetails">
      <summary>Gets the details of this Autospreader spread</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.AutospreaderInstrument.ConnectionDataChanged">
      <summary>Fires when a new OrderFeed becomes available for an AutospreaderInstrument</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.AutospreaderInstrument.TradableStatusChanged">
      <summary>Fires when whether this AutospreaderInstrument can be traded on an OrderFeed changes</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BeforeSendOrderEventArgs.Cancel">
      <summary>Gets or sets whether to cancel the request to submit the orders to the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.ChangeDirection">
      <summary>Gets a value that indicates the direction in which the field value changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.DepthLevel">
      <summary>Gets the price level associated with the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.Dispatcher">
      <summary>Gets the Dispatcher associated with this object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.FieldId">
      <summary>Gets the  enumeration that represents the market data value for this <see cref="TradingTechnologies.TTAPI.Field" /> object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.Fields">
      <summary>Gets the Field objects in this subscription that contain market data values</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.FormattedValue">
      <summary>Returns the field value as a String</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.HasChanged">
      <summary>Gets a value that indicates whether the value or direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.HasDirectionChanged">
      <summary>Gets a value that indicates whether the direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.HasMergeSourceChanged">
      <summary>Gets a value indicating whether the source of the price stream (Implied or Direct) changed for this value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.HasValidValue">
      <summary>Gets a value indicating whether the field contains valid data for the field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.HasValue">
      <summary>Gets a value indicating whether this field is <strong>null</strong></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.HasValueChanged">
      <summary>Gets a value that indicates whether the value of the field changed since the last price subscription update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.Instrument">
      <summary>Gets the Instrument object containing this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.InstrumentDetails">
      <summary>Gets the information about the associated Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.MergeSource">
      <summary>Gets a value that indicates whether this <strong>Field</strong> value came from a Direct or Implied price stream</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.Subscription">
      <summary>Gets the PriceSubscription that generated the callback with this
<see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Field.html">Field</see></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.BooleanField.Value">
      <summary>Gets the value of this field</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CatalogUpdatedEventArgs`1.#ctor(System.Exception,System.Collections.Generic.ICollection{`0})">
      <summary>Instantiates an instance of the CatalogUpdatedEventArgs&lt;TItem&gt; class.</summary>
      <returns>New CatalogUpdatedEventArgs&lt;TItem&gt; instance</returns>
      <param name="error"> object containing information about an error</param>
      <param name="added">Read-only collection of objects added to the catalog</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CatalogUpdatedEventArgs`1.Added">
      <summary>Gets the items added during the update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CatalogUpdatedEventArgs`1.Error">
      <summary>Gets the error that occurred while updating the catalog</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ConfirmFillFailedEventArgs.Fill">
      <summary>Gets the fill that could not be confirmed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ConfirmFillFailedEventArgs.Message">
      <summary>Gets the message returned from the gateway for the failed fill confirm</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ConnectionStatus.ToString">
      <summary>Returns the status as a string</summary>
      <returns> containing the status of the connection</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ConnectionStatus.ConnectionResultCode">
      <summary>Gets the result from the connection attempt or status update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ConnectionStatus.IsSuccess">
      <summary>Gets a value that indicates whether a connection attempt succeeded</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ConnectionStatus.StatusMessage">
      <summary>Gets the message sent with the connection response</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ConnectionStatusUpdateEventArgs.Status">
      <summary>Gets the status of the connection with X_TRADER</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CurrencyUpdatedEventArgs.Currency">
      <summary>Gets the updated currency for the callback</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.AttachUIDispatcher">
      <summary>Attaches a new UIDispatcher object to the current thread</summary>
      <exception caption="DispatcherAlreadyAttached" cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.DispatcherException">&lt;i&gt;The thread already has a Dispatcher attached to it&lt;/i&gt;
&lt;br&gt;
You can attach only one &lt;b&gt;Dispatcher&lt;/b&gt; to a thread.</exception>
      <returns>Reference to the newly attached UIDispatcher object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.AttachWorkerDispatcher">
      <summary>Attaches a new WorkerDispatcher object to the current thread</summary>
      <exception caption="Dispatcher Already Attached" cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.DispatcherException">&lt;i&gt;The thread already has a Dispatcher attached to it&lt;/i&gt;
&lt;br&gt;
You can attach only one &lt;b&gt;Dispatcher&lt;/b&gt; to a thread.</exception>
      <returns>Reference to the newly attached WorkerDispatcher object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.BeginInvoke">
      <summary>Executes the specified Delegate asynchronously
on the thread associated with this <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</see></summary>
      <exception caption="ObjectDisposed" cref="System.ObjectDisposedException">&lt;i&gt;Object has been disposed and can no longer be used.&lt;/i&gt;
&lt;br&gt;
You cannot invoke a dispatcher after it has been disposed.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.CheckAccess">
      <summary>Determines whether a thread can access this Dispatcher</summary>
      <returns>
        <strong>true</strong> if the calling thread has access to this object; <strong>false</strong>, otherwise.</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.Dispose">
      <summary>Detaches the Context object from a thread</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.Invoke">
      <summary>Executes the specified delegate with the specified arguments synchronously on the thread associated with this Dispatcher</summary>
      <exception caption="Object Disposed" cref="System.ObjectDisposedException">&lt;i&gt;Object has been disposed and can no longer be used.&lt;/i&gt;
&lt;br&gt;
You cannot invoke a dispatcher after it has been disposed.</exception>
      <returns>Object returned from the invoked <see cref="#">Delegate</see> or null if the delegate has no return value</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.InvokeRequired">
      <summary>Determines whether a thread can access this Dispatcher</summary>
      <returns>
        <strong>false</strong> if the calling thread has access to this object; <strong>true</strong>, otherwise.</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.VerifyAccess">
      <summary>Checks whether the calling thread has access to this Dispatcher</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;The calling thread does not have access to this dispatcher-bound object&lt;/i&gt;</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.BeginInvoke(System.Action)">
      <summary>Executes the specified Delegate asynchronously on the thread associated with this Dispatcher</summary>
      <exception caption="ObjectDisposed" cref="System.ObjectDisposedException">&lt;i&gt;Object has been disposed and can no longer be used.&lt;/i&gt;&lt;br /&gt;
You cannot invoke a dispatcher after it has been disposed.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.Dispose">
      <summary>Stops activity for this Dispatcher</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Dispatcher.Invoke(System.Action)">
      <summary>Executes the specified delegate with the specified arguments synchronously on the thread associated with this Dispatcher</summary>
      <exception caption="Object Disposed" cref="System.ObjectDisposedException">&lt;i&gt;Object has been disposed and can no longer be used.&lt;/i&gt;&lt;br /&gt;
You cannot invoke a dispatcher after it has been disposed.</exception>
      <returns>Object returned from the invoked Delegate or null if the delegate has no return value</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Dispatcher.Current">
      <summary>Returns the Dispatcher object attached to the current thread</summary>
      <exception caption="Dispatcher" cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.DispatcherException">&lt;i&gt;This thread needs to have a Dispatcher attached&lt;/i&gt;
&lt;br&gt;

The current thread does not have a &lt;b&gt;Dispatcher&lt;/b&gt; object attached to it.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Dispatcher.IsAttached">
      <summary>Gets whether the current thread has a Dispatcher attached to it</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Dispatcher.IsDisposed">
      <summary>Gets whether any reference to the Dispatcher still exists</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.DispatcherBoundSubscription.Start">
      <summary>Starts a subscription</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.DispatcherBoundSubscription.Dispose">
      <summary>Releases resources associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DispatcherBoundSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DispatcherBoundSubscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DispatcherBoundSubscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DispatcherException.ExceptionType">
      <summary>Gets the type of Dispatcher exception</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.DispatcherObject.CheckAccess">
      <summary>Determines whether the calling thread can access this object</summary>
      <returns>true if the calling thread has access to this object; otherwise, false.</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.DispatcherObject.VerifyAccess">
      <summary>Ensures that the calling thread has access to this DispatcherObject</summary>
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;The calling thread does not have access to this dispatcher-bound object.&lt;/i&gt;</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DispatcherObject.Dispatcher">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;96b3d0aa-8b63-4a8c-a459-94ba3922d544&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.DispatcherShutdownEventArgs.#ctor(TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Instantiates an instance of the  class</summary>
      <returns>New  object</returns>
      <param name="dispatcher">Dispatcher object to receive this event</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DispatcherShutdownEventArgs.AssociatedDispatcher">
      <summary>Returns the Dispatcher associated with this operation</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.ChangeDirection">
      <summary>Gets a value that indicates the direction in which the field value changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.DepthLevel">
      <summary>Gets the price level associated with the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.Dispatcher">
      <summary>Gets the Dispatcher associated with this object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.FieldId">
      <summary>Gets the  enumeration that represents the market data value for this <see cref="TradingTechnologies.TTAPI.Field" /> object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.FormattedValue">
      <summary>Returns the field value as a String</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.HasChanged">
      <summary>Gets a value that indicates whether the value or direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.HasDirectionChanged">
      <summary>Gets a value that indicates whether the direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.HasMergeSourceChanged">
      <summary>Gets a value indicating whether the source of the price stream (Implied or Direct) changed for this value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.HasValidValue">
      <summary>Gets a value indicating whether the field contains valid data for the field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.HasValue">
      <summary>Gets a value indicating whether this field is <strong>null</strong></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.HasValueChanged">
      <summary>Gets a value that indicates whether the value of the field changed since the last price subscription update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.Instrument">
      <summary>Gets the Instrument object containing this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.MergeSource">
      <summary>Gets a value that indicates whether this <strong>Field</strong> value came from a Direct or Implied price stream</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.DoubleField.Value">
      <summary>Gets the value of a field containing a double value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.EnumField`1.InstrumentDetails">
      <summary>Gets the information about the associated Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.EnumField`1.Value">
      <summary>Gets the value of a field containing an enumeration value</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Feed.ToString">
      <summary>Returns the name of the feed as a string</summary>
      <returns>Name of the feed</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Feed.ConnectionKey">
      <summary>Gets the unique key for the Feed connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Feed.Market">
      <summary>Gets the market associated with this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Feed.Name">
      <summary>Gets the market name for this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Feed.Session">
      <summary>Gets the trader credentials used to connect to this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Feed.Status">
      <summary>Gets the status of this feed</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Feed.FeedStatusChanged">
      <summary>Fired when the status of the feed changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FeedStatusChangedEventArgs.#ctor(TradingTechnologies.TTAPI.Feed)">
      <summary>Instantiates an instance of the FeedStatusChangedEventArgs
class</summary>
      <param name="feed">Feed object representing the market feed</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FeedStatusChangedEventArgs.Feed">
      <summary>Gets the feed whose status changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.ChangeDirection">
      <summary>Gets a value that indicates the direction in which the field value changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.DepthLevel">
      <summary>Gets the price level associated with the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.Dispatcher">
      <summary>Gets the Dispatcher associated with this object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.FieldId">
      <summary>Gets the  enumeration that represents the market data value for this <see cref="TradingTechnologies.TTAPI.Field" /> object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.Fields">
      <summary>Gets the Field objects in this subscription that contain market data values</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.FormattedValue">
      <summary>Returns the field value as a String</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasAdditionalQuantityAvailable">
      <summary>Gets whether more quantity is available that is returned in the Value field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasChanged">
      <summary>Gets a value that indicates whether the value or direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasDirectionChanged">
      <summary>Gets a value that indicates whether the direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasMergeSourceChanged">
      <summary>Gets a value indicating whether the source of the price stream (Implied or Direct) changed for this value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasValidValue">
      <summary>Gets a value indicating whether the field contains valid data for the field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasValue">
      <summary>Gets a value indicating whether this field is <strong>null</strong></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.HasValueChanged">
      <summary>Gets a value that indicates whether the value of the field changed since the last price subscription update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.Instrument">
      <summary>Gets the Instrument object containing this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.InstrumentDetails">
      <summary>Gets the information about the associated Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.MergeSource">
      <summary>Gets a value that indicates whether this <strong>Field</strong> value came from a Direct or Implied price stream</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.Subscription">
      <summary>Gets the PriceSubscription that generated the callback with this
<see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Field.html">Field</see></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Field.Value">
      <summary>Gets the value of this field</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Field.InvalidValue">
      <summary>Represents an invalid value for validating numerical data</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Confirm">
      <summary>Confirms a fill</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Equals">
      <summary>Implements the .NET  method</summary>
      <returns>
        <strong>true</strong> if the two Fill objects are equal; <strong>false</strong>,
otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Confirm(System.String,System.String@)">
      <summary>Confirms the fill and reassigns the fill account number</summary>
      <returns>true if it succeeds, false if it fails.</returns>
      <param name="newAccount">String containing the new account</param>
      <param name="errorMessage">String containing an error message if the confirm failed</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Confirm(System.String@)">
      <summary>Marks a fill as confirmed</summary>
      <returns>true if it succeeds, false if it fails.</returns>
      <param name="errorMessage">String containing an error message if the confirm failed</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Dispose">
      <summary>Disposes the object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Equals(TradingTechnologies.TTAPI.Fill)">
      <summary>Compares this fill with another Fill object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.Equals(System.Object)">
      <summary>Compares this fill with another object</summary>
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.op_Equality(TradingTechnologies.TTAPI.Fill,TradingTechnologies.TTAPI.Fill)">
      <summary>Implements the standard .NET operator for Fill objects</summary>
      <param name="lhs">Fill object to compare</param>
      <param name="rhs">Fill object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Fill.op_Inequality(TradingTechnologies.TTAPI.Fill,TradingTechnologies.TTAPI.Fill)">
      <summary>Implements the standard .NET operator for Fill objects</summary>
      <param name="lhs">Fill object to compare</param>
      <param name="rhs">Fill object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.AccountName">
      <summary>Gets the customer's or trader's account number</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.AccountType">
      <summary>Gets the account type of associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.BrokerKey">
      <summary>Gets the key for the broker associated with the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.BuySell">
      <summary>Returns the side of the market of the order that generated this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ClearingDate">
      <summary>Gets the Exchange-supplied clearing date for the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ClearingOrTransactionDateTime">
      <summary>Gets the timestamp indicating when the fill was cleared</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.Combination">
      <summary>Gets the strategy type associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.CompanyKey">
      <summary>Gets the key representing the company associated</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ConfirmAddress">
      <summary>Gets the IP address of the user who confirmed the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ConfirmDateTime">
      <summary>Gets the date and time this fill was confirmed by a third-party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ConfirmGroupId">
      <summary>Gets the Group ID for user who confirmed this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ConfirmMemberId">
      <summary>Gets the Member ID for user who confirmed this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ConfirmTraderId">
      <summary>Gets the Trader ID for user who confirmed this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.CounterPartyGiveUpId">
      <summary>Gets the give-up member's clearing ID when the fill is assigned to another member</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.CounterpartyMemberId">
      <summary>Gets the member ID of the counter party for this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ExchangeGroupId">
      <summary>Gets the Exchange Group ID for this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ExchangeMemberId">
      <summary>Gets the Exchange Member ID for this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ExchangeOrderId">
      <summary>Gets the ID the Exchange assigned to the order that generated this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ExchangeTraderId">
      <summary>Gets the Exchange Trader ID for this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.Fee">
      <summary>Gets the fee code associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FeedConnectionKey">
      <summary>Gets the Fill Feed that sent this Fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FeeType">
      <summary>Gets the type of fee associated with the Order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FFT2">
      <summary>Gets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FFT3">
      <summary>Gets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FillKey">
      <summary>Gets the ID assigned to this fill by the TT Gateway</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FillSource">
      <summary>Gets the source of the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.FillType">
      <summary>Gets a value that indicates whether this object represents a partial or full fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.GiveUpId">
      <summary>Gets the ID of the give-up member</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.GiveupMemberId">
      <summary>Gets the Give-Up member's clearing ID for the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.GroupId">
      <summary>Gets the Group ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.InstrumentDetails">
      <summary>Gets the details of the Instrument associated with this Fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.InstrumentKey">
      <summary>Gets the unique key for the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsAutospreaderLegFill">
      <summary>Gets a value that indicates whether this fill corresponds to an Autospreader leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsAutospreaderSyntheticFill">
      <summary>Gets a value that indicates whether this fill corresponds to an Autospreader parent order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsConfirmed">
      <summary>Gets a value that indicates whether the fill represents a confirmed fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsExchangeSpreadLegFill">
      <summary>Gets whether this Fill represents the leg of an Exchange-traded spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsHedge">
      <summary>Gets whether this <strong>Fill</strong> represents an Autospreader hedge order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsQuoting">
      <summary>Gets whether this <strong>Fill</strong> represents an Autospreader quoting order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsSniperLeg">
      <summary>Gets whether this <strong>Fill</strong> represents an Autospreader sniper leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsSseChildFill">
      <summary>Gets a value that indicates whether this fill corresponds to a child synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsSseFill">
      <summary>Gets a value that indicates whether this fill corresponds to a child parent order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.IsStartOfDay">
      <summary>Gets a value indicating whether the fill represents an SOD record</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.LongQuantity">
      <summary>Gets the number of contracts bought with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.MatchPrice">
      <summary>Gets the fill price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.MemberId">
      <summary>Gets the Member ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.Modifiers">
      <summary>Gets the modifier used in the originating order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.OpenClose">
      <summary>Gets a value that indicates the effect of the fill on the position or the source of an injected fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.OrderDateTime">
      <summary>Gets the date and time of the order corresponding to the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.OrderNumber">
      <summary>Gets the order number assigned by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.OrderTag">
      <summary>Gets the user-defined text included in the originating order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.OrderType">
      <summary>Gets the type of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ParentKey">
      <summary>Gets the series key of this parent of order associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.Quantity">
      <summary>Gets the fill quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.RecordNumber">
      <summary>Gets the record number for the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.Restriction">
      <summary>Gets the order restriction of the originating order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.RiskAccount">
      <summary>Gets the risk account associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.ShortQuantity">
      <summary>Gets the number of contracts sold for this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.SiteOrderKey">
      <summary>Gets the internal static key that represents the order associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.SpreadId">
      <summary>Gets the ID of the spread associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.SubUserId">
      <summary>Gets the sender ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.TraderId">
      <summary>Gets the Trader ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.TradeSession">
      <summary>Gets the Exchange-provided ID of the trading session during which this Fill was generated</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.TransactionCode">
      <summary>Gets a value that indicates the type of fill transaction</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.TransactionDateTime">
      <summary>Gets the timestamp for the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.TransactionNumber">
      <summary>Gets the Exchange-supplied ID for the Fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.UserData">
      <summary>Gets the user-defined data, if any, that was associated with the corresponding order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.UserName">
      <summary>Gets the trader login associated with the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.UserTag">
      <summary>Gets the user-defined text included in the originating order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Fill.Version">
      <summary>Gets a value that indicates the number of times an action was taken for a fill</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillAddedEventArgs.#ctor(TradingTechnologies.TTAPI.Fill)">
      <summary>Instantiates a new instance of a FillAddedEventArgs object</summary>
      <param name="fill">Fill object added with this event</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillAddedEventArgs.Fill">
      <summary>Gets the Fill object for the new fill</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillAmendedEventArgs.#ctor(TradingTechnologies.TTAPI.FillUpdateFlag,TradingTechnologies.TTAPI.Fill,TradingTechnologies.TTAPI.Fill)">
      <summary>Instantiates a new instance of a FillUpdatedEventArgs object</summary>
      <param name="flag">FillUpdateFlag indicating the cause of the fill update</param>
      <param name="newFill">Fill object containing the updated information</param>
      <param name="oldFill">Fill object representing the fill before the update</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillAmendedEventArgs.Flag">
      <summary>Gets the reason for the fill update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillAmendedEventArgs.NewFill">
      <summary>Gets the Fill object containing the updated information</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillAmendedEventArgs.OldFill">
      <summary>Gets the Fill object representing the fill before the update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillBookDownloadEventArgs.Fills">
      <summary>Gets a collection of the Fill objects included in the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FillsSubscription~FillBookDownload_EV.html">FillBookDownload</see> event</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillDeletedEventArgs.#ctor(TradingTechnologies.TTAPI.Fill)">
      <summary>Instantiates a new instance of a FillRemovedEventArgs object</summary>
      <param name="fill">Fill object removed with this event</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillDeletedEventArgs.Fill">
      <summary>Gets Fill object deleted from a TT Gateway</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillFeed.ToString">
      <summary>Returns the name of the feed as a string</summary>
      <returns>Name of the feed</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillFeed.ConnectionKey">
      <summary>Gets the unique key for the Feed connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillFeed.Market">
      <summary>Gets the market associated with this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillFeed.Name">
      <summary>Gets the market name for this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillFeed.Session">
      <summary>Gets the trader credentials used to connect to this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillFeed.Status">
      <summary>Gets the status of this feed</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillFeed.FeedStatusChanged">
      <summary>Fired when the status of the feed changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillListEventArgs.#ctor(TradingTechnologies.TTAPI.FeedConnectionKey)">
      <summary>Instantiates an instance of the FillListEventArgs class</summary>
      <returns>New FillListEventArgs instance</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillListEventArgs.FeedConnectionKey">
      <summary>Gets the FeedConnectionKey for the market sending the list of fills</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillsSubscription.#ctor">
      <summary>Instantiates an instance of the  class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillsSubscription.#ctor(TradingTechnologies.TTAPI.Session,TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Creates a FillsSubscription for a Session, with callbacks sent to a Dispatcher</summary>
      <returns>New FillsSubscription object</returns>
      <param name="session">Session object identifying the trading credentials</param>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.FillsSubscription.Start">
      <summary>Starts a subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillsSubscription.Dispatcher">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;96b3d0aa-8b63-4a8c-a459-94ba3922d544&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillsSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillsSubscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.FillsSubscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.ConfirmFillFailed">
      <summary>Fired when an attempt to confirm a fill failed</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.FillAdded">
      <summary>Triggered when the TT API receives a fill from a TT Gateway</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.FillAmended">
      <summary>Invoked when information about an existing Fill changes</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.FillBookDownload">
      <summary>Invoked when a TT Gateway delivers a block of fills</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.FillDeleted">
      <summary>Invoked when a TT Gateway deletes a fill</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.FillListEnd">
      <summary>Fired when a fill download from a TT Gateway finishes</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.FillListStart">
      <summary>Fired when the a TT Gateway begins downloading its fills</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.FillsSubscription.Rollover">
      <summary>Fires when a TT Gateway performs a session rollover to return a list of all removed fills</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.GatewayLicenseExpiringEventArgs.IPAddress">
      <summary>Gets the IP address of the Feed</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InitializationException.#ctor(System.String,System.Exception)">
      <summary>Creates a base InitializationException object with a message and
an inner exception</summary>
      <returns>New InitializationException object</returns>
      <param name="message"> containing the custom exception message text</param>
      <param name="innerException">
        <u>
          <font color="blue">Exception</font>
        </u> object representing the inner exception</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InitializationException.#ctor(System.String)">
      <summary>Creates a base InitializationException object with a message to
send if the exception is thrown</summary>
      <returns>New InitializationException object</returns>
      <param name="message"> containing the custom exception message text</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InitializationException.#ctor">
      <summary>Creates a base InitializationException object</summary>
      <returns>New InitializationException object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Instrument.GetFormattedName(TradingTechnologies.TTAPI.InstrumentNameFormat)">
      <summary>Returns the Instrument name in a specific format</summary>
      <returns>String containing the formatted Instrument name</returns>
      <param name="format">InstrumentNameFormat enumeration that specifies how to display the
name of the Instrument</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Instrument.GetLegs">
      <summary>Gets the list of instrument legs that comprise this Instrument</summary>
      <returns>LegList object containing the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see> legs</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Instrument.GetValidBrokers">
      <summary>Gets the brokers through which orders for this instrument can be routed</summary>
      <returns>Dictionary of  objects representing the valid brokers</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Instrument.GetValidGateways">
      <summary>Gets the gateways through which orders for this instrument can be routed</summary>
      <returns>Dictionary of GatewayKey objects identifying the valid gateways</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Instrument.GetValidOrderFeeds">
      <summary>Gets the order feeds through which orders for this instrument can be routed</summary>
      <returns>Dictionary of OrderFeed objects</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Instrument.IsFeatureSupported(TradingTechnologies.TTAPI.InstrumentFeature)">
      <summary>Returns whether the instrument supports the specified feature</summary>
      <returns>
        <para>
          <strong>true</strong> if the contract supports the specified InstrumentFeature; <strong>false</strong>, otherwise</para>
      </returns>
      <param name="feature">
        <para>InstrumentFeature enumeration specifying which feature to check</para>
      </param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.BondSettlementDate">
      <summary>Gets the settlement date for a bond</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.CouponFrequency">
      <summary>Gets the number of coupons per year</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.CouponRate">
      <summary>Gets the annual interest rate</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.InstrumentDetails">
      <summary>Gets the details of the current snapshot of the Instrument in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.IssueDate">
      <summary>Gets the date a bond was issued</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.Key">
      <summary>Gets the unique instrument definition key</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.MaturityDate">
      <summary>Gets the date a bond matures</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.Name">
      <summary>Gets the default name for the instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.Product">
      <summary>Gets the Product associated with this instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Instrument.Session">
      <summary>Gets the session associated with this Instrument</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Instrument.InstrumentDetailsChanged">
      <summary>Triggered when details of an Instrument changes</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Instrument.NameChanged">
      <summary>Triggered when the name of the Instrument changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentCatalogSubscription.#ctor(TradingTechnologies.TTAPI.Product,TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Instantiates a new instance of the  class</summary>
      <returns>New  object</returns>
      <param name="product">
        <paramref name="Product" /> object representing the Exchange-traded product</param>
      <param name="dispatcher">&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;463f7991-bfc0-4621-a811-8165e9f572e6&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentCatalogSubscription.Instruments">
      <summary>Gets the tradable contracts available for a </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentCatalogSubscription.Product">
      <summary>Gets the  associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentCatalogSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.InstrumentCatalogSubscription.InstrumentsUpdated">
      <summary>Triggered when the list of available Instruments changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentCatalogUpdatedEventArgs.#ctor">
      <summary>Instantiates an instance of the InstrumentSubscriptionEventArgs classInstantiates an instance of the  class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentCatalogUpdatedEventArgs.#ctor(System.Collections.Generic.ICollection{TradingTechnologies.TTAPI.Instrument})">
      <summary>Instantiates an instance of the InstrumentSubscriptionEventArgs classInstantiates an instance of the class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentCatalogUpdatedEventArgs.#ctor(System.Exception,System.Collections.Generic.ICollection{TradingTechnologies.TTAPI.Instrument})">
      <summary>Instantiates an instance of the InstrumentSubscriptionEventArgs classInstantiates an instance of the class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.Equals">
      <summary>Compares another InstrumentDetails with this one</summary>
      <returns>
        <strong>true</strong> if the two InstrumentDefinition objects
match; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.GetFormattedName(TradingTechnologies.TTAPI.InstrumentNameFormat)">
      <summary>Returns a formatted name for an Instrument</summary>
      <returns> containing the formatted name</returns>
      <param name="format">InstrumentNameFormat object indicating how to format the name</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.Equals(System.Object)">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;00ec36ed-c40b-4d48-8e98-cd78b54f196b&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
      <param name="other">Object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.Equals(TradingTechnologies.TTAPI.InstrumentDetails)">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;00ec36ed-c40b-4d48-8e98-cd78b54f196b&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
      <param name="other">InstrumentDetails object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.op_Equality(TradingTechnologies.TTAPI.InstrumentDetails,TradingTechnologies.TTAPI.InstrumentDetails)">
      <summary>Implements the standard .NET operator for InstrumentDetails objects</summary>
      <param name="lhs">InstrumentDetails object to compare</param>
      <param name="rhs">InstrumentDetails object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentDetails.op_Inequality(TradingTechnologies.TTAPI.InstrumentDetails,TradingTechnologies.TTAPI.InstrumentDetails)">
      <summary>Implements the standard .NET operator for InstrumentDetails objects</summary>
      <param name="lhs">InstrumentDetails object to compare</param>
      <param name="rhs">InstrumentDetails object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.Combination">
      <summary>Returns the series combination code for the contract represented by an </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.Currency">
      <summary>Gets the ISO currency code associated with the instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.DeliveryUnit">
      <summary>Gets the unit of delivery for the instrument that trade in flow</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.ExpirationDate">
      <summary>Gets the contract expiration date</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.HasAllTicksTradable">
      <summary>Determines whether all price ticks are tradable</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.HasInvertedMarket">
      <summary>Gets whether this instrument uses inverted prices</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.IsTradedInFlow">
      <summary>Determines whether the instrument trades in flow</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.Key">
      <summary>Gets the key uniquely identifying an Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.LotSize">
      <summary>Gets the lot size for contracts traded in flow</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.MarketPriceDecimals">
      <summary>Gets the number of implied decimals in the market price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.Name">
      <summary>Gets the default name for the instrument associated with this instrument definition</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.OptionType">
      <summary>Gets the option type associated with the instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.PriceDisplayType">
      <summary>Gets the price display type associated with this contract</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.SmallestTickIncrement">
      <summary>Returns the smallest valid tick increment for the instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.StartDate">
      <summary>Returns the start date of the contract</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.StrikeDisplayHasDecimal">
      <summary>Gets a value that indicates whether the Instrument Definition displays decimals for strike prices</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.StrikePrice">
      <summary>Gets the strike price for an options contract</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.StrikePriceDecimals">
      <summary>Gets the number of significant decimal places used for this contract's settlement price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.StrikePricePrecision">
      <summary>Gets the default market precision for the instrument’s strike price.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.TickingEqualityComparer">
      <summary>Gets an IEqualityComparer object that you can use to compare the ticking information to another contract's ticking behavior</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.TickSize">
      <summary>Gets the tick size for the Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.InstrumentDetails.TickValue">
      <summary>Gets the value, in the Instrument's currency, of one tick</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentNotFoundException.#ctor">
      <summary>Creates an instance of InstrumentNotFoundException class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentNotFoundException.#ctor(System.String)">
      <summary>Creates an instance of InstrumentNotFoundException class
with an error message</summary>
      <returns>New InstrumentNotFoundException instance</returns>
      <param name="errorMsg"> containing the error message to return in the <see cref="TradingTechnologies.TTAPI.Tradebook~TradingTechnologies.TTAPI.InstrumentLookupSubscription.html">InstrumentLookupSubscription.Update</see> event</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.InstrumentNotFoundException.#ctor">
      <summary>Creates an instance of InstrumentNotFoundException class</summary>
      <returns>New InstrumentNotFoundException instance</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Leg.Instrument">
      <summary>Gets the Instrument object that represents this leg contract</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Leg.QuantityRatio">
      <summary>Gets the ratio of the quantity of this leg within a spread</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.LegList.GetEnumerator">
      <summary>Implements the standard .NET method</summary>
      <returns>Enumerator for Leg objects</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LegList.Combination">
      <summary>Gets the type of spread or strategy represented by the combination of leg instruments</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LegList.Count">
      <summary>Gets the number of underlying contracts in this leg list</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LegList.Item(System.Int32)">
      <summary>Gets the Leg object at the specified position in the list</summary>
      <param name="index">Integer indicating which element of the LegList to retrieve</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LicenseExpiringEventArgs.ExpiryDate">
      <summary>Gets the date the license expires</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LicenseIssueEventArgs.FeedType">
      <summary>Gets the type of the Feed with the license problem</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LicenseIssueEventArgs.GatewayKey">
      <summary>Gets the Gateway key for the TT Gateway that reported the issue</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.LicenseIssueEventArgs.Message">
      <summary>Gets the message associated with the event</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Market.CreateProductCatalogSubscription(TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Submits a subscription request for products available in this market</summary>
      <exception caption="Argument Null Exception" cref="System.ArgumentNullException">The &lt;i&gt;dispatcher&lt;/i&gt; parameter is missing or is a null object.</exception>
      <returns>ProductCatalogSubscription object that monitors market's
products</returns>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.FillFeeds">
      <summary>Gets the currently-available Fill Feeds associated with this Market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.Key">
      <summary>Returns the unique key associated with this  object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.MarketCatalog">
      <summary>Gets the MarketCatalog associated with the this market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.Name">
      <summary>Returns the name of the market associated with this  object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.OrderFeeds">
      <summary>Gets the currently-available Order Feeds associated with this Market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.PriceFeeds">
      <summary>Gets the currently-available Price Feeds associated with this Market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.Session">
      <summary>Gets the session associated with this Market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Market.SupportedProductTypes">
      <summary>Gets the types of products supported by this Market</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Market.FeedStatusChanged">
      <summary>Triggered when one or more of the feeds associated with the Market changes</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Market.FillFeedsUpdated">
      <summary>Triggered when the market makes more Fill feeds available</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Market.OrderFeedsUpdated">
      <summary>Triggered when the market makes more Order feeds available</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Market.PriceFeedsUpdated">
      <summary>Fired when the market makes more Price feeds available</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Market.SupportedProductTypesChanged">
      <summary>Triggered when the market changes the product types if offers</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Market.TradingEnabledChanged">
      <summary>Triggered when a trader's ability to submit orders for an Order feed changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketCatalog.TryGetInstrument(TradingTechnologies.TTAPI.InstrumentKey,System.Boolean,TradingTechnologies.TTAPI.Instrument@)">
      <summary>Gets an Instrument in the catalog, if it exists</summary>
      <returns>
        <strong>true</strong> if the Instrument is accessible through the catalog; <strong>false</strong>, otherwise</returns>
      <param name="instrumentKey">InstrumentKey object associated with the desired <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see></param>
      <param name="instrument">Instrument object matching the requested <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.InstrumentKey.html">InstrumentKey</see></param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.MarketCatalog.TryGetProduct(TradingTechnologies.TTAPI.ProductKey,TradingTechnologies.TTAPI.Product@)">
      <summary>Gets a Product in the catalog, if it exists</summary>
      <returns>
        <strong>true</strong> if the Product is accessible through the catalog; <strong>false</strong>, otherwise</returns>
      <param name="productKey">ProductKey object associated with the desired <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Product.html">Product</see></param>
      <param name="product">Product object matching the requested <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.ProductKey.html">ProductKey</see></param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketCatalog.FillFeeds">
      <summary>Gets a snapshot of all Fill Feeds currently visible by this Market Catalog</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketCatalog.LocalAutospreaderEngineOrderFeed">
      <summary>Gets the order feed for the Autospreader engine running on the system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketCatalog.Markets">
      <summary>Gets a snapshot of all Markets currently visible by this MarketCatalog</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketCatalog.OrderFeeds">
      <summary>Gets a snapshot of all Order Feeds currently visible by this Market Catalog</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketCatalog.PriceFeeds">
      <summary>Gets a snapshot of all Price Feeds currently visible by this Market Catalog</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.MarketCatalog.Session">
      <summary>Gets the Session associated with this MarketCatalog</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.MarketCatalog.FeedStatusChanged">
      <summary>Triggered when the status of a feed for any market in the catalog changes</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.MarketCatalog.MarketsUpdated">
      <summary>Triggered when new markets are added to the catalog</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.MarketCatalog.TradingEnabledChanged">
      <summary>Triggered when a trader's ability to submit orders for an Order feed of a market in the catalog changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.CreateNewOrderProfile(TradingTechnologies.TTAPI.Session)">
      <summary>Returns an order profile based on this order to use for creating a brand new order</summary>
      <returns>OrderProfileBase object containing the same information as this order</returns>
      <param name="session">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Session.html">Session</a> object representing the trader's credentials</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Delete">
      <summary>Deletes this order from the market</summary>
      <returns />
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.GetOrderProfile">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Hold">
      <summary>Places this working order on hold</summary>
      <returns>
        <strong>true</strong> if successful; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Inquire">
      <summary>Refreshes the data in the order</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.ModifyPrice(TradingTechnologies.TTAPI.Price)">
      <summary>Submits a change order with a new price</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="price">Price object representing the new price</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.ModifyPriceAndQuantity(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Quantity)">
      <summary>Submits a change order with a new price and quantity</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="price">Price object representing the new price</param>
      <param name="newOrderQuantity">Quantity object containing the updated quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.ModifyQuantity(TradingTechnologies.TTAPI.Quantity)">
      <summary>Submits a change order with a new quantity</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="newOrderQuantity">Quantity object containing the updated quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Move(System.Int32)">
      <summary>Submits a change order to move the price some number of ticks</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="tickOffset">Number of ticks to move the price</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.RemoveFromHold">
      <summary>Resubmits a held order to the market</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Equals(TradingTechnologies.TTAPI.Order)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.Equals(System.Object)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.GetOrderProfile(TradingTechnologies.TTAPI.Session)">
      <summary>Returns an order profile based on this order</summary>
      <returns>New OrderProfileBase object</returns>
      <param name="session">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Session.html">Session</a> object representing the trader's credentials</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.GetOrderProfile">
      <summary>Returns an order profile based on this order</summary>
      <returns>New OrderProfileBase object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.op_Equality(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.Order)">
      <summary>Implements the standard .NET operator for Order objects</summary>
      <param name="lhs">Order object to compare</param>
      <param name="rhs">Order object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Order.op_Inequality(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.Order)">
      <summary>Implements the standard .NET operator for Order objects</summary>
      <param name="lhs">Order object to compare</param>
      <param name="rhs">Order object to compare</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.AccountName">
      <summary>Gets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.AccountType">
      <summary>Gets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Action">
      <summary>Gets the action to take with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Ancestors">
      <summary>Gets a collection of this order's parent orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Approval">
      <summary>Gets the approval status of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.BrokerKey">
      <summary>Gets the broker key associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.BuySell">
      <summary>Gets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.CanceledQuantity">
      <summary>Gets the number of contracts deleted in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.CompanyKey">
      <summary>Gets the company key associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.CounterpartyGroupId">
      <summary>Gets the Group portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.CounterpartyMemberId">
      <summary>Gets the Member portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.CounterpartyTraderId">
      <summary>Gets the Trader portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Destination">
      <summary>Gets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.DeviationQuantity">
      <summary>Gets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.DisclosedQuantity">
      <summary>Gets the quantity of the order visible in the market.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.ExchangeGroupId">
      <summary>Gets the Exchange member Group ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.ExchangeMemberId">
      <summary>Gets the Exchange member Member ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.ExchangeOrderId">
      <summary>Gets the ID the Exchange assigned this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.ExchangeTraderId">
      <summary>Gets the Exchange member Trader ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.ExchangeTransactionNumber">
      <summary>Gets the unique ID assigned this order by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.FeeType">
      <summary>Gets the type of fee associated with the Order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.FFT2">
      <summary>Gets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.FFT3">
      <summary>Gets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.FillQuantity">
      <summary>Gets the order quantity already filled</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.GiveUp">
      <summary>Gets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.GroupId">
      <summary>Gets the Group portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.HoldOrderFeatures">
      <summary>Gets how a held order was resubmitted to the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsAutomated">
      <summary>Gets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsChild">
      <summary>Gets whether this order represents a leg of a multi-leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsDownloaded">
      <summary>Gets whether this order was part of an order book download</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsEngineManaged">
      <summary>Gets whether the order is managed by a TT synthetic server engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsExchangeOrder">
      <summary>Gets whether an Exchange manages this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsHoldInRejectedOrder">
      <summary>Gets whether this order failed because of a hold-in timer (BrokerTec only)</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsParent">
      <summary>Gets a value that indicates whether this order has child order legs</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsPositionReserveOrder">
      <summary>Indicates whether this is a position reserve (hold) order that represents the potential position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.IsSynthetic">
      <summary>Gets whether this order manages other child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.LimitPrice">
      <summary>Gets the limit price for the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.MemberId">
      <summary>Gets the TT Member ID of the trader that submitted the orderMember portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Message">
      <summary>Gets the message text associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.MinimumQuantity">
      <summary>Gets the minimum quantity available at the limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Modifiers">
      <summary>Gets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.MonitoringUserName">
      <summary>Gets the username of the last person to modify an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OldOrderNumber">
      <summary>Gets the previous number used for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OpenClose">
      <summary>Gets a value that indicates how this order affect the current position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OrderKey">
      <summary>Gets the unique ID associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OrderNumber">
      <summary>Gets the number assigned by an Exchange for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OrderQuantity">
      <summary>Gets the number of contracts contained in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OrderTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OrderType">
      <summary>Gets the type of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.OriginalAction">
      <summary>Gets the action specified in the original order submission</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.PendingFillQuantity">
      <summary>Gets the quantity filled, but not yet sent by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.PriceCheck">
      <summary>Gets whether the TT API performs price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Processed">
      <summary>Gets the time the TT Gateway processed the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Received">
      <summary>Gets the time a TT Gateway received the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.RejectReasonDetail">
      <summary>Gets the reason this order was rejected</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.RelatedOrderKey">
      <summary>Gets the unique key for a related order, such as a OCO order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.RelatedOrderKeyType">
      <summary>Gets the relationship between two orders, if applicable</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Restriction">
      <summary>Gets the restriction associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.RoundTripId">
      <summary>Gets the identifier that uniquely identifies the single transaction associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Sender">
      <summary>Gets the IP address of the machine used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.SenderCountryCode">
      <summary>Gets the country code for the trader that submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.SenderRegionCode">
      <summary>Gets the region code of the trader who submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Sent">
      <summary>Gets the time the order was sent to the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Session">
      <summary>Gets the session representing the trader responsible for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.Status">
      <summary>Gets the status of most recent action on the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.StatusHistory">
      <summary>Gets a value indicating the history of triggers for a trigger order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.StatusModifier">
      <summary>Gets additional status information for a pending order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.StopPrice">
      <summary>Gets the stop price for stop order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.StopTriggerQuantity">
      <summary>Gets the minimum quantity to trigger a stop price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.SubUserId">
      <summary>Gets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.SyntheticOrderKey">
      <summary>Gets the site order key for the parent synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.TraderId">
      <summary>Gets the TT Trader ID of the trader that submitted the orderTrader portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.TradeSession">
      <summary>Gets the Exchange trading session ID for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.TradeState">
      <summary>Gets the current state of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.UserData">
      <summary>Gets the user-defined information associated with an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.UserName">
      <summary>Gets the trader login</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.UserTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Order.WorkingQuantity">
      <summary>Gets the quantity of the order still working in the market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderAddedEventArgs.#ctor(TradingTechnologies.TTAPI.Order,System.String,System.Boolean)">
      <summary>Instantiates an instance of the OrderAddedEventArgs class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderAddedEventArgs.InCancelReplace">
      <summary>Gets a value that indicates whether this event occurred as part of a cancel/replace order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderAddedEventArgs.Message">
      <summary>Gets the text of any message by the TT Gateway</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderAddedEventArgs.Order">
      <summary>Gets the  object representing the order accepted by a TT Gateway</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderBookDownloadEventArgs.#ctor(System.Collections.Generic.IList{TradingTechnologies.TTAPI.Order})">
      <summary>Instantiates an instance of the OrderListAddedEventArgs class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderBookDownloadEventArgs.Orders">
      <summary>Gets the working orders from a TT Gateway</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderDeletedEventArgs.#ctor(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.Order,System.String,System.Boolean)">
      <summary>Instantiates an instance of the OrderDeletedEventArgs class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderDeletedEventArgs.DeletedUpdate">
      <summary>Gets the order deleted by the TT Gateway</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderDeletedEventArgs.InCancelReplace">
      <summary>Gets a value that indicates whether this event occurred as part of a cancel/replace order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderDeletedEventArgs.Message">
      <summary>Gets the text of any message by the TT Gateway</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderDeletedEventArgs.OldOrder">
      <summary>Gets the order to delete</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderFeed.ToString">
      <summary>Returns the name of the feed as a string</summary>
      <returns>Name of the feed</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFeed.ConnectionKey">
      <summary>Gets the unique key for the Feed connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFeed.IsTradingEnabled">
      <summary>Gets whether orders can be sent to the Order feed</summary>
      <returns>
        <strong>true</strong> if the trader associated with this session is currently able to submit orders; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFeed.Market">
      <summary>Gets the market associated with this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFeed.Name">
      <summary>Gets the market name for this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFeed.Session">
      <summary>Gets the trader credentials used to connect to this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFeed.Status">
      <summary>Gets the status of this feed</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.OrderFeed.FeedStatusChanged">
      <summary>Fired when the status of the feed changes</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.OrderFeed.TradingEnabledChanged">
      <summary>Triggered when a trader's ability to submit orders for the Order Feed changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderFilledEventArgs.#ctor(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.Fill,TradingTechnologies.TTAPI.FillType,System.String)">
      <summary>Instantiates an instance of the OrderFilledEventArgs class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFilledEventArgs.Fill">
      <summary>Gets the  object corresponding to the order filled event</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFilledEventArgs.FillType">
      <summary>Gets a value that indicates whether this  represents a full or partial fill of an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFilledEventArgs.Message">
      <summary>Gets the text of any message by the TT Gateway</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFilledEventArgs.NewOrder">
      <summary>Gets the state of the Order after the fill occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderFilledEventArgs.OldOrder">
      <summary>Gets the state of the Order before the fill occurred</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfile.#ctor">
      <summary>Instantiates an instance of the  class</summary>
      <exception caption="SiteOrderKeyGenerationException Class" cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.SiteOrderKeyGenerationException">&lt;i&gt;Unable to generate a site order key&lt;/i&gt;
&lt;br&gt;
Some internal error occurred.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfile.#ctor(TradingTechnologies.TTAPI.OrderFeed,TradingTechnologies.TTAPI.Instrument,System.String)">
      <summary>Creates an OrderProfile for an <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see> with a set of customer defaults</summary>
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;OrderFeed's Session differs from Instrument's Session&lt;/i&gt;
&lt;br&gt;
The session credentials for the OrderFeed do not match the session credentials for the Instrument.
&lt;p&gt;
&lt;i&gt;Instrument cannot be used with the specified OrderFeed.&lt;/i&gt;
&lt;br&gt;
This Instrument is not supported on the specified Order Feed.
&lt;/p&gt;&lt;i&gt;Unable to generate a site order key&lt;/i&gt;
&lt;br&gt;
Some internal error occurred.</exception>
      <returns>New OrderProfile object</returns>
      <param name="orderFeed">OrderFeed object identifying the order destination</param>
      <param name="instrument">
        <para>Instrument object representing the instrument used in the order</para>
      </param>
      <param name="customer"> containing the name of the Customer Defaults to use for the order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfile.#ctor(TradingTechnologies.TTAPI.OrderFeed,TradingTechnologies.TTAPI.Instrument)">
      <summary>Creates an OrderProfile for an <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see></summary>
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;OrderFeed's Session differs from Instrument's Session&lt;/i&gt;
&lt;br&gt;
The session credentials for the OrderFeed do not match the session credentials for the Instrument.
&lt;p&gt;
&lt;i&gt;Instrument cannot be used with the specified OrderFeed.&lt;/i&gt;
&lt;br&gt;
This Instrument is not supported on the specified Order Feed.
&lt;/p&gt;&lt;i&gt;Unable to generate a site order key&lt;/i&gt;
&lt;br&gt;
Some internal error occurred.</exception>
      <returns>New OrderProfile object</returns>
      <param name="orderFeed">OrderFeed object identifying the order destination</param>
      <param name="instrument">
        <para>Instrument object representing the instrument used in the order</para>
      </param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfile.CreateNewOrderProfile">
      <summary>Returns an order profile based on this profile to use for creating a brand new order</summary>
      <returns>New order profile object (derived from OrderProfileBase) with a new site order key</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.AccountName">
      <summary>Gets or sets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.AccountType">
      <summary>Gets or sets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.AccumulateTriggerQuantity">
      <summary>Gets or sets the action to take with the trigger quantity when the trigger price retreats</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.Action">
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;Invalid order action specified.&lt;/i&gt;
&lt;br&gt;
You specified one of the following enumeration values that is not valid when setting this property: 
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;AdminDelete&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to Add if order profile has been created from an existing order.&lt;/i&gt;
&lt;br&gt;
When modifying an existing order, you cannot set this property to &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to anything other than Add or Hold if creating a new order.&lt;/i&gt;
&lt;br&gt;
When creating a new order profile, you must set the value to  &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.BuySell">
      <summary>Gets or sets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.Destination">
      <summary>Gets or sets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.DeviationQuantity">
      <summary>Gets or sets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.DisclosedQuantity">
      <summary>Gets or sets the quantity of the order visible in the market.</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.DisclosedQuantityMode">
      <summary>Gets or sets whether a disclosed quantity represents a fixed quantity or a percentage of the parent order quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.EndTime">
      <summary>Gets or sets the expiration time for the parent synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.EndTimeAction">
      <summary>Gets or sets the action to perform when a synthetic order reaches its expiration time</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.FFT2">
      <summary>Gets or sets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.FFT3">
      <summary>Gets or sets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.GiveUp">
      <summary>Gets or sets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.InterSliceDelay">
      <summary>Gets or sets the delay (in milliseconds, seconds, or minutes) between consecutive orders for Time Slicer orders</summary>
      <exception caption="ArgumentOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;InterSliceDelay must be positive&lt;/i&gt;
&lt;br&gt;
(Set only) You tried to set a non-positive value for the property.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.InterSliceDelayTimeUnits">
      <summary>Gets or sets the units to use when evaluating the InterSliceDelay property</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.InterSliceVolume">
      <summary>Gets or sets the minimal volume between consecutive orders for Volume Slicer orders</summary>
      <exception caption="ArgumentOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;InterSliceVolume must be positive.&lt;/i&gt;
&lt;br&gt;
(Set only) You tried to set a non-positive value  for the property.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.InterSliceVolumeQuantityMode">
      <summary>Gets or sets the whether a volume slice order quantity represents a fixed quantity or a percentage of the parent order quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.IsAutomated">
      <summary>Gets or sets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.LeftoverAction">
      <summary>Gets or sets the leftover action for Time and Volume slicer orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.LeftoverActionTime">
      <summary>Gets or sets when to take the leftover action for a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.LimitOffset">
      <summary>Gets or sets the limit offset for orders that dynamically set the order limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.LimitPrice">
      <summary>Gets or sets the price for a limit order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.LimitPriceType">
      <summary>Gets or sets the type of price for this limit order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.MinimumQuantity">
      <summary>Gets or sets the minimum quantity available at the limit price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.Modifiers">
      <summary>Gets or sets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.NumberOfRetries">
      <summary>Gets or sets the number of times to resubmit a rejected Order</summary>
      <exception caption="ArgumentOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;NumberOfRetries must be positive.&lt;/i&gt;
&lt;br&gt;
(Set only) You tried to set a non-positive value  for the property.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.OpenClose">
      <summary>Gets or sets the how this order affects the trader's position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.OrderTag">
      <summary>Gets or sets the optional, user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.OverrideExchangeRules">
      <summary>Gets or sets whether Synthetic SE should manage Exchange-supported synthetic order types</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.ParentWatThreshold">
      <summary>Gets or sets the order quantity at which to convert a passive order to an aggressive one</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.ParentWatThresholdQuantityMode">
      <summary>Gets or sets whether the ParentWatThreshold quantity represents an actual quantity or a percentage</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.PayupTicks">
      <summary>Gets or sets the number of ticks to pay up when canceling a resting child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.PositionReserveOrderKey">
      <summary>Gets or sets the site order key for Position Reserve order submitted to account for the risk associated with this synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.PriceCheck">
      <summary>Gets or sets whether to perform price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.PriceMode">
      <summary>Gets or sets whether to interpret price data as absolute or offset values</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.PriceTrigger">
      <summary>Gets or sets the type of price trigger associated with this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.PriceVariance">
      <summary>Gets or sets the maximum number of ticks away from the last-traded price for a price to be considered valid</summary>
      <exception caption="ArgumentOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;PriceVariance must be between 0 and 100000, inclusive&lt;/i&gt;
&lt;br&gt;
(Set only) You tried to set an invalid percentage value.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.QuoteQuantityCondition">
      <summary>Gets or sets the quantity condition to trigger an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.RejectImmediateTrigger">
      <summary>Gets or sets the action to take for orders that would trigger immediately</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.Restriction">
      <summary>Gets or sets the order restriction</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.RetryInterval">
      <summary>Gets or sets the how frequently to try resubmitting a rejected order</summary>
      <exception caption="ArgumenOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;RetryInterval must be positive&lt;/i&gt;
&lt;br&gt;
(Set only) You tried to set a non-positive value  for the property.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.SlicerType">
      <summary>Gets or sets the type for slicer orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.StartTime">
      <summary>Gets or sets a value that indicates when to put an order into the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.Status">
      <summary>Gets the status of the order used to create this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.StopPrice">
      <summary>Gets or sets the price of a stop order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.StopTriggerQuantity">
      <summary>Gets or sets the minimum quantity to trigger a stop price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.StopTriggerQuantityMode">
      <summary>Gets or sets the whether a stop-trigger order quantity represents a fixed quantity or a percentage of the parent order quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.SubUserId">
      <summary>Gets or sets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.SyntheticActionCode">
      <summary>Gets or sets the action code associated with a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.SyntheticOrderModifier">
      <summary>Gets the modifier associated with a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.TicksDeep">
      <summary>Gets the number of ticks away from the market to submit a limit order when converting it to a market order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.TotalDuration">
      <summary>Gets or sets the total length of time to work a timed duration slicer order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.TotalVolume">
      <summary>Gets the total number of volume intervals for a volume slicer order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.TrailingOffset">
      <summary>Gets or sets the limit offset for trailing orders that dynamically set the order limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.TriggerPriceType">
      <summary>Gets or sets the type of price trigger used for this synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.UserName">
      <summary>Gets or sets the trader login ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.UserTag">
      <summary>Gets or sets optional user information included in the parent order and all child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfile.VariancePercentage">
      <summary>Gets or sets the disclosed quantity randomization percentage (0-100) for slicer</summary>
      <exception caption="ArgumentOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;VariancePercentage must be between 0 and 100, inclusive.&lt;/i&gt;
&lt;br&gt;
(Set only) You tried to set an invalid percentage value.</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfileBase.CreateNewOrderProfile">
      <summary>Returns an order profile based on this profile to use for creating a brand new order</summary>
      <returns>New order profile object (derived from OrderProfileBase) with a new site order key</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfileBase.OrderProfileBase">
      <summary>Instantiates an instance of the OrderProfileBase class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderProfileBase.Dispose">
      <summary>Disposes the object, releasing its application resources</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.AccountName">
      <summary>Gets or sets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.AccountType">
      <summary>Gets or sets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.Action">
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;Invalid order action specified.&lt;/i&gt;
&lt;br&gt;
You specified one of the following enumeration values that is not valid when setting this property: 
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;AdminDelete&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to Add if order profile has been created from an existing order.&lt;/i&gt;
&lt;br&gt;
When modifying an existing order, you cannot set this property to &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to anything other than Add or Hold if creating a new order.&lt;/i&gt;
&lt;br&gt;
When creating a new order profile, you must set the value to  &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.BuySell">
      <summary>Gets or sets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.CounterpartyGroupId">
      <summary>Gets or sets the Group portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.CounterpartyMemberId">
      <summary>Gets or sets the member portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.CounterpartyTraderId">
      <summary>Gets or sets the Trader portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.Destination">
      <summary>Gets or sets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.DeviationQuantity">
      <summary>Gets or sets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.DisclosedQuantity">
      <summary>Gets or sets the quantity of the order visible in the market.</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.FFT2">
      <summary>Gets or sets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.FFT3">
      <summary>Gets or sets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.GiveUp">
      <summary>Gets or sets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.IsAutomated">
      <summary>Gets or sets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.LimitPrice">
      <summary>Gets or sets the price for a limit order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.MinimumQuantity">
      <summary>Gets or sets the minimum quantity available at the limit price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.Modifiers">
      <summary>Gets or sets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.OpenClose">
      <summary>Gets or sets the how this order affects the trader's position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.OrderQuantity">
      <summary>Gets or sets the the order quantity</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.OrderTag">
      <summary>Gets or sets the optional, user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.OrderType">
      <summary>Gets or sets the type of order represented by this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.PriceCheck">
      <summary>Gets or sets whether to perform price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.QuantityToWork">
      <summary>Gets or sets the number of contracts contained in the order</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.Restriction">
      <summary>Gets or sets the order restriction</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.RoundTripId">
      <summary>Gets the identifier that uniquely identifies the single transaction associated with this profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.RoutingStatus">
      <summary>Gets the routing status of the order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.Session">
      <summary>Gets the session representing the trader responsible for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.Status">
      <summary>Gets the status of the order used to create this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.StopPrice">
      <summary>Gets or sets the price of a stop order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.StopTriggerQuantity">
      <summary>Gets or sets the minimum quantity to trigger a stop price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.SubUserId">
      <summary>Gets or sets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.UserName">
      <summary>Gets or sets the trader login ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderProfileBase.UserTag">
      <summary>Gets or sets optional user information included in the parent order and all child orders</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderRejectedEventArgs.#ctor(TradingTechnologies.TTAPI.Order,System.String)">
      <summary>Instantiates an instance of the OrderRejectedEventArgs class</summary>
      <returns>OrderRejectedEventArgs object containing the information</returns>
      <param name="order">Order object representing the rejected order</param>
      <param name="message"> value containing the rejection message</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRejectedEventArgs.Message">
      <summary>Gets the rejection message sent with the order rejection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRejectedEventArgs.Order">
      <summary>Gets the rejected order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRoutingStatus.Message">
      <summary>Gets the message text associated with an order routing error condition</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderRoutingStatus.State">
      <summary>Gets the status of the attempt to route an order profile to a TT Gateway</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderStatusUnknownEventArgs.#ctor(TradingTechnologies.TTAPI.Order,System.String)">
      <summary>Instantiates an instance of the OrderStatusUnknownEventArgs classInstantiates an instance of the UnknownOrderStatusEventArgs class</summary>
      <param name="order">Order object corresponding to the order with an unknown status</param>
      <param name="message"> containing the message to include in the event args</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderStatusUnknownEventArgs.Message">
      <summary>Returns the message sent by the TT Gateway for the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderStatusUnknownEventArgs.Order">
      <summary>Gets the order whose status cannot be determined</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderTimeoutEventArgs.Order">
      <summary>Gets the orders that timed out</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.OrderUpdatedEventArgs.#ctor(TradingTechnologies.TTAPI.Order,TradingTechnologies.TTAPI.Order,System.String)">
      <summary>Instantiates an instance of the OrderUpdatedEventArgs class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderUpdatedEventArgs.Message">
      <summary>Gets the text of any message by the TT Gateway</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderUpdatedEventArgs.NewOrder">
      <summary>Gets the  object containing the updated information</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.OrderUpdatedEventArgs.OldOrder">
      <summary>Gets the  object representing the order before the update</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceFeed.ToString">
      <summary>Returns the name of the feed as a string</summary>
      <returns>Name of the feed</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceFeed.ConnectionKey">
      <summary>Gets the unique key for the Feed connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceFeed.Market">
      <summary>Gets the market associated with this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceFeed.Name">
      <summary>Gets the market name for this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceFeed.Session">
      <summary>Gets the trader credentials used to connect to this feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceFeed.Status">
      <summary>Gets the status of this feed</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.PriceFeed.FeedStatusChanged">
      <summary>Fired when the status of the feed changes</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.ChangeDirection">
      <summary>Gets a value that indicates the direction in which the field value changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.DepthLevel">
      <summary>Gets the price level associated with the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.Dispatcher">
      <summary>Gets the Dispatcher associated with this object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.FieldId">
      <summary>Gets the  enumeration that represents the market data value for this <see cref="TradingTechnologies.TTAPI.Field" /> object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.Fields">
      <summary>Gets the fields that contain trade data about the Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.FormattedValue">
      <summary>Returns the field value as a String</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.HasChanged">
      <summary>Gets a value that indicates whether the value or direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.HasDirectionChanged">
      <summary>Gets a value that indicates whether the direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.HasValidValue">
      <summary>Gets a value indicating whether the field contains valid data for the field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.HasValue">
      <summary>Gets a value indicating whether this field is <strong>null</strong></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.HasValueChanged">
      <summary>Gets a value that indicates whether the value of the field changed since the last price subscription update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.Instrument">
      <summary>Gets the Instrument object containing this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.MergeSource">
      <summary>Gets a value that indicates whether this <strong>Field</strong> value came from a Direct or Implied price stream</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.Subscription">
      <summary>Returns the PriceSubscription associated with this price field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceField.Value">
      <summary>Gets the value of a field containing a price value</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscription.#ctor">
      <summary>Instantiates a new instance of the PriceSubscription class</summary>
      <returns>New PriceSubscription instance</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscription.#ctor(TradingTechnologies.TTAPI.Instrument,TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Instantiates an instance of the <strong>PriceSubscription</strong> class for a specified Instrument</summary>
      <returns>New PriceSubscription object</returns>
      <param name="instrument">Instrument whose prices you want to receive</param>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscription.Dispose">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscription.Dispose">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Dispatcher">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;96b3d0aa-8b63-4a8c-a459-94ba3922d544&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Fields">
      <summary>Returns price data for the instrument associated with this price subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Instrument">
      <summary>Gets the Instrument object associated with this data subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.IsDisposed">
      <summary>Gets whether the subscription has been disposed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Settings">
      <summary>Gets or sets the current type of market data in the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.PriceSubscription.FieldsUpdated">
      <summary>Fired when a trader changes the data subscription for this Instrument</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.PriceSubscription.SupportsImpliedMatchingChanged">
      <summary>Fired when the value of the PriceSubscriptionFields.SupportsImpliedMatching
property changes for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see> associated with this subscription</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetAskMarketQuantityField">
      <summary>Gets the quantity of Asks for pre-open market orders</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget layout="block" type="Include
Topic"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskIdField">
      <summary>Gets the Exchange order number of the order with the best Ask price</summary>
      <returns>UInt64Field object containing the Exchange order number or
<strong>null</strong> if the value could not be extracted</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskPriceField">
      <summary>Gets the better of the implied and direct ask price for the instrument (<strong>BestAskPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskQuantityField">
      <summary>Gets the quantity available at the better of the implied and direct ask price for the instrument (<strong>BestAskQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidIdField">
      <summary>Gets the Exchange order number of the order for the best Bid price</summary>
      <returns>UInt64Field object containing the Exchange order number or
<strong>null</strong> if the value could not be extracted</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidPriceField">
      <summary>Gets the better of the implied and direct bid price for the instrument (<strong>BestBidPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidQuantityField">
      <summary>Gets the quantity available at the better of the implied and direct bid price for the instrument (<strong>BestBidQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBidMarketQuantityField">
      <summary>Gets the quantity of Bids for pre-open market orders</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget layout="block" type="Include
Topic"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedAskPriceField">
      <summary>Gets the TT-calculated implied ask price for the instrument (<strong>CalculatedImpliedAskPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedAskQuantityField">
      <summary>Gets the quantity available at the TT-calculated implied ask price for the instrument (<strong>CalculatedImpliedAskQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedBidPriceField">
      <summary>Gets the TT-calculated implied bid price for the instrument (<strong>CalculatedImpliedBidPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedBidQuantityField">
      <summary>Gets the quantity available at the TT-calculated implied bid price for the instrument (<strong>CalculatedImpliedBidQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetChangedFieldIds">
      <summary>Returns the FieldIDs of the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Field.html">Fields</see> updated in this callback</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetClosePriceField">
      <summary>Gets ClosePrice field for the inside market.</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCurrentSessionIdField">
      <summary>Gets the ID for the current trading session</summary>
      <returns>UInt64Field object containing the Exchange trading session ID or
<strong>null</strong> if the value could not be extracted</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskCounterpartyField">
      <summary>Gets ID of the counterparty with the direct ask price</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskCountField">
      <summary>Gets the number of ask orders at the inside market or at a specific price level</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskPriceField">
      <summary>Gets the direct ask price for the instrument (<strong>DirectAskPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskQuantityField">
      <summary>Gets the quantity available at the direct ask price for the instrument (<strong>DirectAskQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidCounterpartyField">
      <summary>Gets ID of the counterparty with the direct bid price</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidCountField">
      <summary>Gets the number of buy orders at the inside market or at a specific price level</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidPriceField">
      <summary>Gets the direct bid price for the instrument (<strong>DirectBidPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidQuantityField">
      <summary>Gets the quantity available at the direct bid price for the instrument (<strong>DirectBidQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetField">
      <summary>Returns a Field matching the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</see></summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetFieldIds">
      <summary>Returns the FieldIds of all the fields defined at the inside market or a number
of price levels away from the inside market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetHighPriceField">
      <summary>Gets HighPrice field for the inside market.</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImbalanceQuantityField">
      <summary>Gets imbalance between the number of buyers and sellers</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedAskPriceField">
      <summary>YGets the implied ask price for the instrument (<strong>ImpliedAskPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedAskQuantityField">
      <summary>Gets the quantity at the implied ask price for the instrument (<strong>ImpliedAskQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedBidPriceField">
      <summary>Gets the implied bid price for the instrument (<strong>ImpliedBidPrice</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedBidQuantityField">
      <summary>Gets the quantity at the implied bid price for the instrument (<strong>ImpliedBidQuantity</strong> field)</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeAskPriceField">
      <summary>Gets the Exchange-provided estimate of the ask price for an Instrument when the Market opens</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeAskQuantityField">
      <summary>Gets the Exchange-provided estimate of the available quantity at the indicative ask price for an Instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeBidPriceField">
      <summary>Gets the Exchange-provided estimate of the bid price for an Instrument when the Market opens</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeBidQuantityField">
      <summary>Gets the Exchange-provided estimate of the available quantity at the indicative bid price for an Instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeClosePriceField">
      <summary>Gets the Exchange-provided estimate of the closing price for an Instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeOpenPriceField">
      <summary>Gets the Exchange-provided estimate of the opening price for an Instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeOpenQuantityField">
      <summary>Gets the Exchange-provided estimate of the available quantity at the indicative opening price for an Instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetIndicativeSettlPrcField">
      <summary>Gets the Exchange-provided estimate of the settlement price for an Instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetLargestCurrentDepthLevel">
      <summary>Gets the greater of the number of Bid or Ask price levels for the market or an individual price field</summary>
      <returns> value representing the depth level</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetLastTradedPriceField">
      <summary>Gets the last price at which the Instrument traded</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetLastTradedQuantityField">
      <summary>Gets the quantity traded in the most recent transaction</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetLowPriceField">
      <summary>Gets LowPrice field for the inside market.</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMarketSideField">
      <summary>Gets the side of the order in the workup market</summary>
      <returns> object containing the workup state</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMaxDepthLevel">
      <summary>Returns the maximum number of depth levels supported by the TT Gateway or Exchange for the Instrument associated with the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription.html">PriceSubscription</see></summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedAskCounterpartyField">
      <summary>Gets the ID of the counterparty that sent an order reflected in the detailed Ask depth</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedAskCountField">
      <summary>Gets the number of orders that comprise the direct ask quantity</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedBidCounterpartyField">
      <summary>Gets the ID of the counterparty that sent an order reflected in the detailed Bid depth</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedBidCountField">
      <summary>Gets the number of orders that comprise the direct ask quantity</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetNetChangeField">
      <summary>Gets the change in the net position for the instrument</summary>
      <returns>
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceField.html">PriceField</a> object representing the price</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetNetChangePercentField">
      <summary>Gets the percentage change in the net position for the instrument</summary>
      <returns>DoubleField value representing the percentage change</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetOpenPriceField">
      <summary>Gets the opening price of the instrument for the current trading session</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetOtcTradePriceField">
      <summary>Gets the price of the last wholesale trade for the instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetOtcTradeQuantityField">
      <summary>Gets the quantity of the last wholesale trade</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetSeriesStatusField">
      <summary>Gets the trading status of the Instrument associated with the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription.html">PriceSubscription</see></summary>
      <returns>
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Field.html">Field</a> object or <b>null</b> if the value could not be retrieved</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetSessionRolloverField">
      <summary>Returns whether Exchange performed a trading session rollover</summary>
      <returns>BooleanField with a value of <strong>true</strong> if the trading session
rolled over; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetSettlementPriceField">
      <summary>Gets the settlement price for the instrument</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetTotalTradedQuantityField">
      <summary>Gets the total instrument quantity traded</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetWorkupPriceField">
      <summary>Gets the workup price for the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetWorkupStateField">
      <summary>Gets the state of a workup order</summary>
      <returns>
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Field.html">Field</a> object or <b>null</b> if the value could not be retrieved</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskPriceField">
      <summary>Gets the better of the implied and direct ask price for the instrument (<strong>BestAskPrice</strong> field) at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskPriceField(System.Int32)">
      <summary>Gets the better of the implied and direct ask price at the specified price level for the instrument (<strong>BestAskPrice</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskQuantityField">
      <summary>Gets the quantity available at the better of the implied and direct ask price for the instrument (<strong>BestAskQuantity</strong>) at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestAskQuantityField(System.Int32)">
      <summary>Gets the quantity available at the better of the implied and direct ask price for the instrument (<strong>BestAskQuantity</strong> field) at the specified
price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidPriceField">
      <summary>Gets the better of the implied and direct bid price for the instrument (<strong>BestBidPrice</strong> field) at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidPriceField(System.Int32)">
      <summary>Gets the quantity available at the better of the implied and direct bid price for the instrument (<strong>BestBidQuantity</strong> field) at the specified
price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidQuantityField">
      <summary>Gets the quantity available at the better of the implied and direct bid price at the specified price level for the instrument (<strong>BestBidQuantity</strong>
field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetBestBidQuantityField(System.Int32)">
      <summary>Gets the quantity available at the better of the implied and direct bid price for the instrument (<strong>BestBidQuantity</strong> field) at the specified
price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedAskPriceField">
      <summary>Gets the TT-calculated implied ask price at the inside market for the instrument (<strong>CalculatedImpliedAskPrice</strong> field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedAskPriceField(System.Int32)">
      <summary>Gets the TT-calculated implied ask price at the specified price level for the instrument (<strong>CalculatedImpliedAskPrice</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedAskQuantityField">
      <summary>Gets the quantity available at the TT-calculated implied ask price at the inside market for the instrument (<strong>CalculatedImpliedAskQuantity</strong>
field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedAskQuantityField(System.Int32)">
      <summary>Gets the quantity available at the TT-calculated implied ask price at the specified price level for the instrument
(<strong>CalculatedImpliedAskQuantity</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedBidPriceField">
      <summary>Gets the TT-calculated implied bid price at the inside market for the instrument (<strong>CalculatedImpliedBidPrice</strong> field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedBidPriceField(System.Int32)">
      <summary>Gets the TT-calculated implied bid price at the specified price level for the instrument (<strong>CalculatedImpliedBidPrice</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedBidQuantityField">
      <summary>Gets the quantity available at the TT-calculated implied bid price at the inside market for the instrument (<strong>CalculatedImpliedBidQuantity</strong>
field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetCalculatedImpliedBidQuantityField(System.Int32)">
      <summary>Gets the quantity available at the TT-calculated implied bid price at the specified price level for the instrument
(<strong>CalculatedImpliedBidQuantity</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetChangedFieldIds">
      <summary>Gets the fields whose values changed at the inside market</summary>
      <returns>Array of FieldId objects whose values changed in the corresponding <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">PriceSubscription.FieldsUpdated</see> event.</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetChangedFieldIds(System.Int32)">
      <summary>Gets the fields whose values changed at the specified price depth</summary>
      <returns>Array of FieldId objects whose values changed in the corresponding <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">PriceSubscription.FieldsUpdated</see> event.</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskCounterpartyField">
      <summary>ID of the counterparty with the direct ask price at the inside market</summary>
      <returns>Instance of DirectAskCounterparty field</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskCounterpartyField(System.Int32)">
      <summary>ID of the counterparty with the direct ask price a the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>Instance of DirectAskCounterparty field</returns>
      <param name="depthLevel">Depth level to extract from.</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskCountField">
      <summary>Gets the number of ask orders at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskCountField(System.Int32)">
      <summary>Gets the number of ask orders at a specific price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskPriceField">
      <summary>Gets the direct ask price at the inside market for the instrument (<strong>DirectAskPrice</strong> field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskPriceField(System.Int32)">
      <summary>Gets the direct ask price at the specified price level for the instrument (<strong>DirectAskPrice</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskQuantityField">
      <summary>Gets the quantity available at the direct ask price in the inside market for the instrument (<strong>DirectAskQuantity</strong> field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectAskQuantityField(System.Int32)">
      <summary>Gets the quantity available at the direct ask price at the specified price level for the instrument (<strong>DirectAskQuantity</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidCounterpartyField">
      <summary>Gets ID of the counterparty with the direct bid price at the inside market</summary>
      <returns>Instance of DirectBidCounterparty field</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidCounterpartyField(System.Int32)">
      <summary>Gets ID of the counterparty with the direct bid price at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>Instance of DirectBidCounterparty field</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidCountField">
      <summary>Gets the number of buy orders at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidCountField(System.Int32)">
      <summary>Gets the number of buy orders at a specific price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidPriceField">
      <summary>Gets the direct bid price at the inside market for the instrument (<strong>DirectBidPrice</strong> field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidPriceField(System.Int32)">
      <summary>Gets the direct bid price at the specified price level for the instrument (<strong>DirectBidPrice</strong> field)</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidQuantityField">
      <summary>Gets the quantity available at the direct bid price for the instrument (<strong>DirectBidQuantity</strong> field)</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetDirectBidQuantityField(System.Int32)">
      <summary>Gets DirectBidQuantity field for the specified depth level.</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetField(TradingTechnologies.TTAPI.FieldId,System.Int32)">
      <summary>Returns a Field matching the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</see> for the specified depth level</summary>
      <exception caption="ArgumentOutOfRange" cref="System.ArgumentOutOfRangeException">&lt;i&gt;Depth level&lt;/i&gt; cannot be negative
&lt;br&gt;
The &lt;i&gt;depthLevel&lt;/i&gt; parameter contains a negative value.</exception>
      <returns>Field object matching the specified <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</see> or <strong>null</strong> if the field could not be retrieved</returns>
      <param name="fieldId">FieldId enum identifying the field to retrieve</param>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetField(TradingTechnologies.TTAPI.FieldId)">
      <summary>Returns a Field matching the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</see> for the regular inside market</summary>
      <returns>Field object matching the specified <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</see> or <strong>null</strong> if the field could not be retrieved</returns>
      <param name="fieldId">FieldId enum identifying the field to retrieve</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetFieldIds">
      <summary>Returns an array of FieldIds defined for the regular inside market</summary>
      <returns>Array of FieldId enumeration values</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetFieldIds(System.Int32)">
      <summary>Returns an array of FieldIds defined for a specified number of price levels</summary>
      <returns>Array of FieldId enumeration values</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedAskPriceField">
      <summary>Gets the implied ask price at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedAskPriceField(System.Int32)">
      <summary>Gets the implied ask price at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of ticks away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedAskQuantityField">
      <summary>Gets the quantity available at the implied ask price at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedAskQuantityField(System.Int32)">
      <summary>Gets the quantity available at the implied ask price at the specified number of price levels away from the inside market</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedBidPriceField">
      <summary>Gets the implied bid price at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedBidPriceField(System.Int32)">
      <summary>Gets the implied bid price at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;b3431c39-20ff-4062-a819-5a8925a3b094&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedBidQuantityField">
      <summary>Gets the quantity available at the implied bid price at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetImpliedBidQuantityField(System.Int32)">
      <summary>Gets the quantity available at the implied bid price at the specified number of price levels away from the inside market</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Integer indicating the number of price levels away from the inside market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetLargestCurrentDepthLevel(TradingTechnologies.TTAPI.FieldId)">
      <summary>Gets the number of populated depth levels for the specified FieldId</summary>
      <returns>Number of populated depth levels</returns>
      <param name="fieldId">FieldId enum identifying the field</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetLargestCurrentDepthLevel">
      <summary>Gets the highest populated depth level among all Fields</summary>
      <returns>Integer representing the larger depth level</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMaxDepthLevel(TradingTechnologies.TTAPI.FieldId)">
      <summary>Returns the maximum number of depth levels supported of a given FieldId for the
<see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Instrument.html">Instrument</see></summary>
      <returns> representing the maximum number of price levels or 0 if price levels have no meaning for the specified <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</see></returns>
      <param name="fieldId">
        <para>
          <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.FieldId.html">FieldId</a> enumeration identifying the field to retrieve</para>
        <para></para>
      </param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMaxDepthLevel">
      <summary>Returns the maximum number of depth levels supported for the Instrument</summary>
      <returns> representing the maximum number of price levels</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedAskCounterpartyField">
      <summary>Gets the ID of the counterparty that sent an order reflected in the detailed Ask depth at the inside market</summary>
      <returns>Instance of MergedAskCounterparty field</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedAskCounterpartyField(System.Int32)">
      <summary>Gets the ID of the counterparty that sent an order reflected in the detailed Ask depth at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>Instance of MergedAskCounterparty field</returns>
      <param name="depthLevel">Depth level to extract from.</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedAskCountField">
      <summary>Gets the number of orders that comprise the direct ask quantity at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedAskCountField(System.Int32)">
      <summary>Gets the number of orders that comprise the direct ask quantity at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Depth level to extract from.</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedBidCounterpartyField">
      <summary>Gets the ID of the counterparty that sent an order reflected in the detailed Bid depth at the inside market</summary>
      <returns>Instance of MergedBidCounterparty field</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedBidCounterpartyField(System.Int32)">
      <summary>Gets the ID of the counterparty that sent an order reflected in the detailed Bid depth at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>Instance of MergedBidCounterparty field</returns>
      <param name="depthLevel">Depth level to extract from.</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedBidCountField">
      <summary>Gets the number of orders that comprise the direct ask quantity at the inside market</summary>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionFields.GetMergedBidCountField(System.Int32)">
      <summary>Gets the number of orders that comprise the direct ask quantity at the specified price level</summary>
      <exception caption="" cref="T:System.ArgumentOutOfRangeException">Depth level cannot be negative</exception>
      <returns>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;2e95b9e7-f0bd-488a-871a-81fd999e312a&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</returns>
      <param name="depthLevel">Depth level to extract from.</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.ClosePriceDecimals">
      <summary>Gets the number of decimals included in a closing price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.ClosePricePrecision">
      <summary>Gets the default market precision for the instrument’s closing price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.Dispatcher">
      <summary>Gets the Dispatcher bound to the related PriceSubscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.HasCalculatedImplieds">
      <summary>Gets a value indicating whether this contract uses TT-calculated implied values</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.HasExchangeImplieds">
      <summary>Gets a value indicating whether this contract uses Exchange-supplied implied values</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.Instrument">
      <summary>Gets the instrument associated with this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.SettlementPriceDecimals">
      <summary>Gets the number of decimals included in a settlement price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.SettlementPricePrecision">
      <summary>Gets the default market precision for the instrument’s settlement price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.Subscription">
      <summary>Gets the price subscription associated with this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionFields.SupportsImpliedMatching">
      <summary>Gets whether the Exchange supports crossing an order to match an implied price for an Instrument</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.#ctor">
      <summary>Instantiates an instance of the PriceSubscriptionSettings structure</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.#ctor(TradingTechnologies.TTAPI.PriceSubscriptionType,System.Boolean)">
      <summary>Instantiates an instance of the PriceSubscriptionSettings
struct for a type of price data using TT-calculated implied prices</summary>
      <returns>New PriceSubscriptionSettings object for monitoring price data</returns>
      <param name="priceData">PriceSubscriptionType enumeration indicating the type of market
depth to include</param>
      <param name="deliverTTCalculatedImpliedPrices">
        <strong>true</strong> to use implied prices calculated by the TT Implieds Engine; <strong>false</strong> to use Exchange-provided implied prices</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.#ctor(TradingTechnologies.TTAPI.PriceSubscriptionType)">
      <summary>Instantiates an instance of the PriceSubscriptionSettings
struct for a type of price data</summary>
      <returns>New PriceSubscriptionSettings object for monitoring price data</returns>
      <param name="priceData">PriceSubscriptionType enumeration indicating the type of market
depth to include</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.#ctor">
      <summary>Instantiates a default instance of the PriceSubscriptionSettings struct</summary>
      <returns>New PriceSubscriptionSettings instance</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.Clone">
      <summary>Implements the standard .NET <strong>Clone</strong> method for this object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.Equals(System.Object)">
      <summary>Implements the .NET  method</summary>
      <param name="other">object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.Equals(TradingTechnologies.TTAPI.PriceSubscriptionSettings)">
      <summary>Implements the .NET  method</summary>
      <param name="filter">PriceSubscriptionSettings object to compare</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.op_Equality(TradingTechnologies.TTAPI.PriceSubscriptionSettings,TradingTechnologies.TTAPI.PriceSubscriptionSettings)">
      <summary>Implements the standard .NET <strong>op_Equality</strong> operator for this object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.PriceSubscriptionSettings.op_Inequality(TradingTechnologies.TTAPI.PriceSubscriptionSettings,TradingTechnologies.TTAPI.PriceSubscriptionSettings)">
      <summary>Implements the standard .NET <strong>op_Inequality</strong> operator for this object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionSettings.DeliverTTCalculatedImpliedPrices">
      <summary>Gets or sets a value that indicates whether to include prices calculated by the TT Implieds Engine in the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.PriceSubscriptionSettings.PriceData">
      <summary>Gets or sets a value that represents the type of trade data subscription</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Product.ToString">
      <summary>Returns a string-representation of this object</summary>
      <returns> that represents the current <see cref="T:System.Object" /></returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Alias">
      <summary>Gets the alias associated with the product in Guardian, if defined</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Currency">
      <summary>Returns the currency associated with this product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Description">
      <summary>Gets the description associated with the product in Guardian, if defined</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.FormattedName">
      <summary>Gets the alias associated with the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Key">
      <summary>Gets the unique ID for a product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Margin">
      <summary>Gets the margin associated with the product in the trader's risk management system, if defined</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Market">
      <summary>Returns the Market object associated with this product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Name">
      <summary>Gets the Exchange-provided name for a product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Session">
      <summary>Gets the session associated with this Product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Product.Type">
      <summary>Returns the product type associated with this </summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductCatalogSubscription.#ctor(TradingTechnologies.TTAPI.Market,TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Instantiates an instance of the <strong>ProductCatalogSubscription</strong> class</summary>
      <param name="market">Market object representing the market that offers the products</param>
      <param name="dispatcher">&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;463f7991-bfc0-4621-a811-8165e9f572e6&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductCatalogSubscription.Start">
      <summary>Starts a subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductCatalogSubscription.Dispatcher">
      <summary>Gets the Dispatcher object associated with this catalog</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductCatalogSubscription.Market">
      <summary>Gets the Market associated with this product catalog subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductCatalogSubscription.Products">
      <summary>Gets a moment-in-time snapshot of the Products included in this product catalog subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductCatalogSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductCatalogSubscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ProductCatalogSubscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.ProductCatalogSubscription.ProductsUpdated">
      <summary>Triggered when a Market changes its Product offering</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductCatalogUpdatedEventArgs.#ctor">
      <summary>Instantiates an instance of the ProductsUpdatedEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductCatalogUpdatedEventArgs.#ctor(System.Collections.Generic.ICollection{TradingTechnologies.TTAPI.Product})">
      <summary>Instantiates an instance of the ProductsUpdatedEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductCatalogUpdatedEventArgs.#ctor(System.Exception,System.Collections.Generic.ICollection{TradingTechnologies.TTAPI.Product})">
      <summary>Instantiates an instance of the ProductsUpdatedEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductNotFoundException.#ctor">
      <summary>Creates an instance of the ProductNotFoundException class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductNotFoundException.#ctor(System.String)">
      <summary>Creates an instance of the ProductNotFoundException class with
an error message</summary>
      <returns>New ProductNotFoundException instance</returns>
      <param name="errorMsg"> containing the error message to return in the <see cref="TradingTechnologies.TTAPI.Tradebook~TradingTechnologies.TTAPI.ProductLookupSubscription~Update_EV.html">ProductLookupSubscription.Update</see> event</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.ProductNotFoundException.#ctor">
      <summary>Creates an instance of the ProductNotFoundException class with
no error message</summary>
      <returns>New ProductNotFoundException instance</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.ChangeDirection">
      <summary>Gets a value that indicates the direction in which the field value changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.DepthLevel">
      <summary>Gets the price level associated with the </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.Dispatcher">
      <summary>Gets the Dispatcher associated with this object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.FieldId">
      <summary>Gets the  enumeration that represents the market data value for this <see cref="TradingTechnologies.TTAPI.Field" /> object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.FormattedValue">
      <summary>Returns the field value as a String</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasAdditionalQuantityAvailable">
      <summary>Gets whether more quantity is available that is returned in the Value field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasChanged">
      <summary>Gets a value that indicates whether the value or direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasDirectionChanged">
      <summary>Gets a value that indicates whether the direction of the field changed since the last PriceSubscription.FieldsUpdated event for the <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.PriceSubscription~FieldsUpdated_EV.html">Instrument</see> occurred</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasMergeSourceChanged">
      <summary>Gets a value indicating whether the source of the price stream (Implied or Direct) changed for this value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasValidValue">
      <summary>Gets a value indicating whether the field contains valid data for the field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasValue">
      <summary>Gets a value indicating whether this field is <strong>null</strong></summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.HasValueChanged">
      <summary>Gets a value that indicates whether the value of the field changed since the last price subscription update</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.Instrument">
      <summary>Gets the Instrument object containing this field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.MergeSource">
      <summary>Gets a value that indicates whether this <strong>Field</strong> value came from a Direct or Implied price stream</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.QuantityField.Value">
      <summary>Gets the value of a field containing a quantity value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Request`1.Dispatcher">
      <summary>Gets the Dispatcher object that manages the callbacks for this request</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Request`1.IsCompleted">
      <summary>Gets whether the request completed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Request`1.Session">
      <summary>Gets the session associated with this request</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Request`1.Tag">
      <summary>Gets or sets a user-defined object for the request</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Request`1.Completed">
      <summary>Fired when the request completes</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.RequestCompletedEventArgs.Error">
      <summary>Gets the error returned with the request, if provided</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.RolloverEventArgs.#ctor(TradingTechnologies.TTAPI.FeedConnectionKey,System.Int32,System.Collections.Generic.IList{TradingTechnologies.TTAPI.Fill})">
      <summary>Instantiates an instance of the  class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.RolloverEventArgs.FeedConnectionKey">
      <summary>Gets the FeedConnectionKey for the TT Gateway that performed a session rollover</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.RolloverEventArgs.Fills">
      <summary>Gets a collection of the fills involved in the rollover</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.RolloverEventArgs.SessionId">
      <summary>Gets the Exchange trading session ID</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.ConvertToMarketOrderAndSend">
      <summary>Converts and submits an order as a market order</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.GetAvoidCrossing">
      <summary>Gets how to handle a new order that would ordinarily cross the working order</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Cannot call this method while in Non-MultiBroker environment.&lt;/i&gt;
&lt;br&gt;
This method is valid only for MultiBroker environments. Use the &lt;b&gt;AvoidCrossing&lt;/b&gt; property instead.</exception>
      <returns>Dictionary of BrokerKey object and
<see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.AvoidCrossing.html">AvoidCrossing</see> enum pairs indicating
the action to take for each broker</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.SendOrder">
      <summary>Sends one or more orders to the market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.ConvertToMarketOrderAndSend(System.Collections.Generic.IEnumerable{TradingTechnologies.TTAPI.OrderProfileBase},System.UInt16)">
      <summary>Converts an existing order to a market order at a specified number of ticks away from the inside market</summary>
      <exception caption="DispatcherNotAttachedException" cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.DispatcherNotAttachedException">&lt;i&gt;This thread needs to have a Dispatcher attached&lt;/i&gt;
&lt;br&gt;The Dispatcher associated with this session has been disposed.</exception>
      <returns>
        <strong>true</strong> if the order was sent successfully; <strong>false</strong>, otherwise</returns>
      <param name="ticksDeep"> representing the number of ticks away from the market</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.ConvertToMarketOrderAndSend(System.Collections.Generic.IEnumerable{TradingTechnologies.TTAPI.OrderProfileBase})">
      <summary>Converts an existing order to a market order at the current market price</summary>
      <exception caption="DispatcherNotAttachedException" cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.DispatcherNotAttachedException">&lt;i&gt;This thread needs to have a Dispatcher attached&lt;/i&gt;
&lt;br&gt;The Dispatcher associated with this session has been disposed.</exception>
      <returns>
        <strong>true</strong> if the order was sent successfully; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.Dispose">
      <summary>Disposes the object</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.SendOrder(System.Collections.Generic.IEnumerable{TradingTechnologies.TTAPI.OrderProfileBase})">
      <summary>Submits a group of orders to one or more markets</summary>
      <returns>
        <strong>true</strong> if all orders are sent successfully; <strong>false</strong>, otherwise</returns>
      <param name="orderProfiles">Collection of order profiles derived from the OrderProfileBase Class class (i.e. <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.OrderProfile.html">OrderProfile</see> or <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.html">AutospreaderSyntheticOrderProfile</see>) representing
the orders to submit</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Session.SendOrder(TradingTechnologies.TTAPI.OrderProfileBase)">
      <summary>Submits an order represented by an OrderProfile object to a TT Gateway</summary>
      <returns>
        <strong>true</strong> if the order was submitted successfully; <strong>false</strong>, otherwise</returns>
      <param name="orderProfile">Order profile derived from the OrderProfileBase class (i.e. <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.OrderProfile.html">OrderProfile</see> or <see cref="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.html">AutospreaderSyntheticOrderProfile</see>) representing
the order to submit</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.AvoidCrossing">
      <summary>Gets how to handle a new order that would ordinarily cross an existing working order</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Not allowed to use this property while in MultiBroker environment.&lt;/i&gt;
&lt;br&gt;
This method is not valid for MultiBroker environments. Use the &lt;b&gt;GetAvoidCrossing&lt;/b&gt; method instead.</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.DefaultDispatcher">
      <summary>Returns the Dispatcher associated with the session</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.MarketCatalog">
      <summary>Gets the markets available to the session's trading credentials</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.SyntheticSenderCountryCode">
      <summary>Gets or sets the country code for the sender of a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.SyntheticSenderRegionCode">
      <summary>Gets or sets the region code for the sender of a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.TTAPI">
      <summary>Gets the TTAPI object associated with the application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Session.UserName">
      <summary>Returns the user name associated with the user login for this session</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Session.AdminMessage">
      <summary>Fired when the TT API receives a system message</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Session.AfterSendOrder">
      <summary>Fired after order profiles in the SendOrder method are routed to the appropriate markets</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Session.BeforeSendOrder">
      <summary>Fires before routing the order profiles specified in the SendOrder method</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Session.CurrencyUpdated">
      <summary>Fired when Guardian updates its currency table</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.ShutdownEventArgs.Error">
      <summary>Gets the error, if any, that was returned during shutdown</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.CreateNewOrderProfile(TradingTechnologies.TTAPI.Session)">
      <summary>Returns an order profile based on this order to use for creating a brand new order</summary>
      <returns>OrderProfileBase object containing the same information as this order</returns>
      <param name="session">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Session.html">Session</a> object representing the trader's credentials</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.GetOrderProfile">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.ModifyPrice(TradingTechnologies.TTAPI.Price)">
      <summary>Submits a change order with a new price</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="price">Price object representing the new price</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.ModifyPriceAndQuantity(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Quantity)">
      <summary>Submits a change order with a new price and quantity</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="price">Price object representing the new price</param>
      <param name="newOrderQuantity">Quantity object containing the updated quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.ModifyQuantity(TradingTechnologies.TTAPI.Quantity)">
      <summary>Submits a change order with a new quantity</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="newOrderQuantity">Quantity object containing the updated quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.Move(System.Int32)">
      <summary>Submits a change order to move the price some number of ticks</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="tickOffset">Number of ticks to move the price</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.RemoveFromHold">
      <summary>Resubmits a held order to the market</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.Dispose">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.GetOrderProfile(TradingTechnologies.TTAPI.Session)">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SseSyntheticOrder.GetOrderProfile">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.AccountName">
      <summary>Gets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.AccountType">
      <summary>Gets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.AccumulateTriggerQuantity">
      <summary>Gets the action to take with the trigger quantity when the trigger price retreats</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Action">
      <summary>Gets the action to take with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Approval">
      <summary>Gets the approval status of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.BuySell">
      <summary>Gets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.CanceledQuantity">
      <summary>Gets the number of contracts deleted in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.CounterpartyGroupId">
      <summary>Gets the Group portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.CounterpartyMemberId">
      <summary>Gets the Member portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.CounterpartyTraderId">
      <summary>Gets the Trader portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Destination">
      <summary>Gets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.DeviationQuantity">
      <summary>Gets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.DisclosedQuantity">
      <summary>Gets the quantity of the order visible in the market.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.DisclosedQuantityMode">
      <summary>Gets whether a disclosed quantity represents a fixed quantity or a percentage of the parent order quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.EndTime">
      <summary>Gets the expiration time for the parent order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.EndTimeAction">
      <summary>Gets the action to perform when the Synthetic SE synthetic order reaches its expiration time</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.ExchangeGroupId">
      <summary>Gets the Exchange member Group ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.ExchangeMemberId">
      <summary>Gets the Exchange member Member ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.ExchangeOrderId">
      <summary>Gets the ID the Exchange assigned this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.ExchangeTraderId">
      <summary>Gets the Exchange member Trader ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.ExchangeTransactionNumber">
      <summary>Gets the unique ID assigned this order by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.FeeType">
      <summary>Gets the type of fee associated with the Order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.FFT2">
      <summary>Gets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.FFT3">
      <summary>Gets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.FillQuantity">
      <summary>Gets the order quantity already filled</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.GiveUp">
      <summary>Gets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.GroupId">
      <summary>Gets the Group portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.HoldOrderFeatures">
      <summary>Gets how a held order was resubmitted to the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.InterSliceDelay">
      <summary>Gets the delay (in milliseconds, seconds, or minutes) between consecutive orders for Time Slicer orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.InterSliceDelayTimeUnits">
      <summary>Gets the units to use when evaluating the InterSliceDelay
property</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.InterSliceVolume">
      <summary>Gets the minimal volume between consecutive orders for Volume Slicer orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsAutomated">
      <summary>Gets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsChild">
      <summary>Gets whether this order represents a leg of a multi-leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsDownloaded">
      <summary>Gets whether this order was part of an order book download</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsEngineManaged">
      <summary>Gets whether the order is managed by a TT synthetic server engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsExchangeOrder">
      <summary>Gets whether an Exchange manages this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsHoldInRejectedOrder">
      <summary>Gets whether this order failed because of a hold-in timer (BrokerTec only)</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsParent">
      <summary>Gets a value that indicates whether this order has child order legs</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsPositionReserveOrder">
      <summary>Indicates whether this is a position reserve (hold) order that represents the potential position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.IsSynthetic">
      <summary>Gets whether this order manages other child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.LeftoverAction">
      <summary>Gets the leftover action for Time and Volume slicer orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.LeftoverActionTime">
      <summary>Gets the time to take the leftover action for a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.LimitOffset">
      <summary>Gets the offset for orders that dynamically set the order limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.LimitPrice">
      <summary>Gets the limit price for the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.LimitPriceType">
      <summary>Gets the type of price for this limit order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.MemberId">
      <summary>Gets the TT Member ID of the trader that submitted the orderMember portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Message">
      <summary>Gets the message text associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.MinimumQuantity">
      <summary>Gets the minimum quantity available at the limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Modifiers">
      <summary>Gets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.NumberOfRetries">
      <summary>Gets the number of times to retry sending an order if it is rejected</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OldOrderNumber">
      <summary>Gets the previous number used for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OpenClose">
      <summary>Gets a value that indicates how this order affect the current position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OrderKey">
      <summary>Gets the unique ID associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OrderNumber">
      <summary>Gets the number assigned by an Exchange for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OrderQuantity">
      <summary>Gets the number of contracts contained in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OrderTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OrderType">
      <summary>Gets the type of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OriginalAction">
      <summary>Gets the action specified in the original order submission</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.OverrideExchangeRules">
      <summary>Gets whether Synthetic SE should manage Exchange-supported synthetic order types</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.ParentWatThreshold">
      <summary>Gets or sets the order quantity at which to convert a passive order to an aggressive one</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PayupTicks">
      <summary>Gets the number of ticks to pay up to offset a hedged leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PendingFillQuantity">
      <summary>Gets the quantity filled, but not yet sent by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PositionReserveOrderKey">
      <summary>Gets the site order key for Position Reserve</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PriceCheck">
      <summary>Gets whether the TT API performs price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PriceMode">
      <summary>Gets whether to interpret price data as absolute or offset values</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PriceTrigger">
      <summary>Gets the type of price trigger associated with this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.PriceVariance">
      <summary>Gets the maximum number of ticks away from the last-traded price for a price to be considered valid</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Processed">
      <summary>Gets the time the TT Gateway processed the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.QuoteQuantityCondition">
      <summary>Gets the quantity condition to trigger an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Received">
      <summary>Gets the time a TT Gateway received the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.RejectImmediateTrigger">
      <summary>Gets the action to take for orders that would trigger immediately</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.RelatedOrderKey">
      <summary>Gets the unique key for a related order, such as a OCO order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.RelatedOrderKeyType">
      <summary>Gets the relationship between two orders, if applicable</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Restriction">
      <summary>Gets the restriction associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.RetryInterval">
      <summary>Gets the interval between consecutive retries</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Sender">
      <summary>Gets the IP address of the machine used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SenderCountryCode">
      <summary>Gets the country code for the trader that submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SenderRegionCode">
      <summary>Gets the region code of the trader who submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Sent">
      <summary>Gets the time the order was sent to the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Session">
      <summary>Gets the session representing the trader responsible for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SlicerType">
      <summary>Gets the type of the slicer order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.StartTime">
      <summary>Gets the start time for the synthetic parent order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.Status">
      <summary>Gets the status of most recent action on the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.StatusHistory">
      <summary>Gets a value indicating the history of triggers for a trigger order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.StatusModifier">
      <summary>Gets additional status information for a pending order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.StopPrice">
      <summary>Gets the stop price for stop order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.StopTriggerQuantity">
      <summary>Gets the minimum quantity to trigger a stop price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.StopTriggerQuantityMode">
      <summary>Gets the whether a stop-trigger order quantity represents a fixed quantity or a percentage of the parent order quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SubUserId">
      <summary>Gets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SyntheticActionCode">
      <summary>Gets the action code associated with a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SyntheticOrderKey">
      <summary>Gets the site order key for the parent synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SyntheticOrderModifier">
      <summary>Gets the modifier associated with a synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.SyntheticOrderStatus">
      <summary>Gets the status of this synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetAccountType">
      <summary>Gets the AccountType field of the Customer Defaults used to submit the child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetExpiration">
      <summary>Gets the expiration date for the synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetFFT1">
      <summary>Gets the FFT1 field of the Customer Defaults used to submit the child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetFFT2">
      <summary>Gets the FFT2 field of the Customer Defaults used to submit the child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetFFT3">
      <summary>Gets the FFT3 field of the Customer Defaults used to submit the child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetGiveUp">
      <summary>Gets the GiveUp field of the Customer Defaults used to submit the child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetGroupId">
      <summary>Gets the group portion of the MGT of the target Gateway for child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetMemberId">
      <summary>Gets the member portion of the MGT of the target Gateway for child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetOpenClose">
      <summary>Gets the OpenClose field of the Customer Defaults used to submit the child order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TargetTraderId">
      <summary>Gets the trader portion of the MGT of the target Gateway for child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TicksDeep">
      <summary>Gets the number of ticks away from the market to submit a limit order when converting it to a market order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TotalDuration">
      <summary>Gets or sets the total length of time to work a timed duration slicer order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TraderId">
      <summary>Gets the TT Trader ID of the trader that submitted the orderTrader portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TradeSession">
      <summary>Gets the Exchange trading session ID for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TradeState">
      <summary>Gets the current state of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TrailingOffset">
      <summary>Gets the limit offset for trailing orders that dynamically set the order limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.TriggerPriceType">
      <summary>Gets the type of price trigger used for this synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.UndisclosedQuantity">
      <summary>Gets the quantity of the order hidden from the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.UserData">
      <summary>Gets the user-defined information associated with an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.UserName">
      <summary>Gets the trader login</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.UserTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.VariancePercentage">
      <summary>Gets the disclosed quantity randomization percentage (0-100) for slicer</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SseSyntheticOrder.WorkingQuantity">
      <summary>Gets the quantity of the order still working in the market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Subscription.Dispose">
      <summary>Closes and releases resources used by the Subscription instance</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Subscription.Start">
      <summary>Starts a subscription</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Subscription.Dispose">
      <summary>Releases resources associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Subscription.Dispatcher">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;96b3d0aa-8b63-4a8c-a459-94ba3922d544&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Subscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Subscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Subscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SynchronizationContext.CreateCopy">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.CreateNewOrderProfile(TradingTechnologies.TTAPI.Session)">
      <summary>Returns an order profile based on this order to use for creating a brand new order</summary>
      <returns>OrderProfileBase object containing the same information as this order</returns>
      <param name="session">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Session.html">Session</a> object representing the trader's credentials</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Delete">
      <summary>Deletes this order from the market</summary>
      <returns />
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Equals">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.GetHashCode">
      <summary>Implements the .NET  method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.GetOrderProfile">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Hold">
      <summary>Places this working order on hold</summary>
      <returns>
        <strong>true</strong> if successful; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Inquire">
      <summary>Refreshes the data in the order</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.ModifyPrice(TradingTechnologies.TTAPI.Price)">
      <summary>Submits a change order with a new price</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="price">Price object representing the new price</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.ModifyPriceAndQuantity(TradingTechnologies.TTAPI.Price,TradingTechnologies.TTAPI.Quantity)">
      <summary>Submits a change order with a new price and quantity</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="price">Price object representing the new price</param>
      <param name="newOrderQuantity">Quantity object containing the updated quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.ModifyQuantity(TradingTechnologies.TTAPI.Quantity)">
      <summary>Submits a change order with a new quantity</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="newOrderQuantity">Quantity object containing the updated quantity</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Move(System.Int32)">
      <summary>Submits a change order to move the price some number of ticks</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="tickOffset">Number of ticks to move the price</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.RemoveFromHold">
      <summary>Resubmits a held order to the market</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Equals(TradingTechnologies.TTAPI.Order)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.Equals(System.Object)">
      <summary>Implements the .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.GetOrderProfile(TradingTechnologies.TTAPI.Session)">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrder.GetOrderProfile">
      <summary>Returns an order profile for this order so you can change the order</summary>
      <returns>OrderProfileBase object containing the information from this order</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.AccountName">
      <summary>Gets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.AccountType">
      <summary>Gets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Action">
      <summary>Gets the action to take with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Approval">
      <summary>Gets the approval status of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.BuySell">
      <summary>Gets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.CanceledQuantity">
      <summary>Gets the number of contracts deleted in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.CounterpartyGroupId">
      <summary>Gets the Group portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.CounterpartyMemberId">
      <summary>Gets the Member portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.CounterpartyTraderId">
      <summary>Gets the Trader portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Destination">
      <summary>Gets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.DeviationQuantity">
      <summary>Gets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.DisclosedQuantity">
      <summary>Gets the quantity of the order visible in the market.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.ExchangeGroupId">
      <summary>Gets the Exchange member Group ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.ExchangeMemberId">
      <summary>Gets the Exchange member Member ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.ExchangeOrderId">
      <summary>Gets the ID the Exchange assigned this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.ExchangeTraderId">
      <summary>Gets the Exchange member Trader ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.ExchangeTransactionNumber">
      <summary>Gets the unique ID assigned this order by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.FeeType">
      <summary>Gets the type of fee associated with the Order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.FFT2">
      <summary>Gets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.FFT3">
      <summary>Gets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.FillQuantity">
      <summary>Gets the order quantity already filled</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.GiveUp">
      <summary>Gets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.GroupId">
      <summary>Gets the Group portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.HoldOrderFeatures">
      <summary>Gets how a held order was resubmitted to the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsAutomated">
      <summary>Gets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsChild">
      <summary>Gets whether this order represents a leg of a multi-leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsDownloaded">
      <summary>Gets whether this order was part of an order book download</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsEngineManaged">
      <summary>Gets whether the order is managed by a TT synthetic server engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsExchangeOrder">
      <summary>Gets whether an Exchange manages this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsHoldInRejectedOrder">
      <summary>Gets whether this order failed because of a hold-in timer (BrokerTec only)</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsParent">
      <summary>Gets a value that indicates whether this order has child order legs</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsPositionReserveOrder">
      <summary>Indicates whether this is a position reserve (hold) order that represents the potential position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.IsSynthetic">
      <summary>Gets whether this order manages other child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.LimitPrice">
      <summary>Gets the limit price for the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.MemberId">
      <summary>Gets the TT Member ID of the trader that submitted the orderMember portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Message">
      <summary>Gets the message text associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.MinimumQuantity">
      <summary>Gets the minimum quantity available at the limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Modifiers">
      <summary>Gets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OldOrderNumber">
      <summary>Gets the previous number used for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OpenClose">
      <summary>Gets a value that indicates how this order affect the current position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OrderKey">
      <summary>Gets the unique ID associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OrderNumber">
      <summary>Gets the number assigned by an Exchange for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OrderQuantity">
      <summary>Gets the number of contracts contained in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OrderTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OrderType">
      <summary>Gets the type of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.OriginalAction">
      <summary>Gets the action specified in the original order submission</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.PendingFillQuantity">
      <summary>Gets the quantity filled, but not yet sent by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.PriceCheck">
      <summary>Gets whether the TT API performs price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Processed">
      <summary>Gets the time the TT Gateway processed the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Received">
      <summary>Gets the time a TT Gateway received the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.RelatedOrderKey">
      <summary>Gets the unique key for a related order, such as a OCO order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.RelatedOrderKeyType">
      <summary>Gets the relationship between two orders, if applicable</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Restriction">
      <summary>Gets the restriction associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Sender">
      <summary>Gets the IP address of the machine used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.SenderCountryCode">
      <summary>Gets the country code for the trader that submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.SenderRegionCode">
      <summary>Gets the region code of the trader who submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Sent">
      <summary>Gets the time the order was sent to the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Session">
      <summary>Gets the session representing the trader responsible for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.Status">
      <summary>Gets the status of most recent action on the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.StatusHistory">
      <summary>Gets a value indicating the history of triggers for a trigger order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.StatusModifier">
      <summary>Gets additional status information for a pending order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.StopPrice">
      <summary>Gets the stop price for stop order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.StopTriggerQuantity">
      <summary>Gets the minimum quantity to trigger a stop price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.SubUserId">
      <summary>Gets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.SyntheticOrderKey">
      <summary>Gets the site order key for the parent synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.SyntheticOrderStatus">
      <summary>Gets the status of this synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.TraderId">
      <summary>Gets the TT Trader ID of the trader that submitted the orderTrader portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.TradeSession">
      <summary>Gets the Exchange trading session ID for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.TradeState">
      <summary>Gets the current state of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.UserData">
      <summary>Gets the user-defined information associated with an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.UserName">
      <summary>Gets the trader login</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.UserTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrder.WorkingQuantity">
      <summary>Gets the quantity of the order still working in the market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.SyntheticOrderProfile.CreateNewOrderProfile">
      <summary>Returns an order profile based on this profile to use for creating a brand new order</summary>
      <returns>New order profile object (derived from OrderProfileBase) with a new site order key</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.AccountName">
      <summary>Gets or sets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.AccountType">
      <summary>Gets or sets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.Action">
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;Invalid order action specified.&lt;/i&gt;
&lt;br&gt;
You specified one of the following enumeration values that is not valid when setting this property: 
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;AdminDelete&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to Add if order profile has been created from an existing order.&lt;/i&gt;
&lt;br&gt;
When modifying an existing order, you cannot set this property to &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to anything other than Add or Hold if creating a new order.&lt;/i&gt;
&lt;br&gt;
When creating a new order profile, you must set the value to  &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.BuySell">
      <summary>Gets or sets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.Destination">
      <summary>Gets or sets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.DeviationQuantity">
      <summary>Gets or sets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.DisclosedQuantity">
      <summary>Gets or sets the quantity of the order visible in the market.</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.FFT2">
      <summary>Gets or sets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.FFT3">
      <summary>Gets or sets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.GiveUp">
      <summary>Gets or sets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.IsAutomated">
      <summary>Gets or sets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.LimitPrice">
      <summary>Gets or sets the price for a limit order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.MinimumQuantity">
      <summary>Gets or sets the minimum quantity available at the limit price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.Modifiers">
      <summary>Gets or sets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.OpenClose">
      <summary>Gets or sets the how this order affects the trader's position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.OrderTag">
      <summary>Gets or sets the optional, user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.PriceCheck">
      <summary>Gets or sets whether to perform price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.QuantityToWork">
      <summary>Gets or sets the number of contracts contained in the order</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.Restriction">
      <summary>Gets or sets the order restriction</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.Status">
      <summary>Gets the status of the order used to create this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.StopPrice">
      <summary>Gets or sets the price of a stop order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.StopTriggerQuantity">
      <summary>Gets or sets the minimum quantity to trigger a stop price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.SubUserId">
      <summary>Gets or sets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.UserName">
      <summary>Gets or sets the trader login ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.SyntheticOrderProfile.UserTag">
      <summary>Gets or sets optional user information included in the parent order and all child orders</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.#ctor">
      <summary>Instantiates an instance of the TimeAndSalesEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.#ctor(TradingTechnologies.TTAPI.Instrument,System.Exception,System.Collections.Generic.IList{TradingTechnologies.TTAPI.TimeAndSalesData})">
      <summary>Instantiates an instance of the TimeAndSalesEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.#ctor(TradingTechnologies.TTAPI.Instrument,System.Exception,System.Collections.ObjectModel.ReadOnlyCollection{TradingTechnologies.TTAPI.TimeAndSalesData})">
      <summary>Instantiates an instance of the TimeAndSalesEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.#ctor(TradingTechnologies.TTAPI.Instrument,System.Collections.Generic.IList{TradingTechnologies.TTAPI.TimeAndSalesData})">
      <summary>Instantiates an instance of the TimeAndSalesEventArgs class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.#ctor(TradingTechnologies.TTAPI.Instrument,System.Collections.ObjectModel.ReadOnlyCollection{TradingTechnologies.TTAPI.TimeAndSalesData})">
      <summary>Instantiates an instance of the TimeAndSalesEventArgs class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.Data">
      <summary>Gets a collection of time and sales data for the Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.Error">
      <summary>Gets the asynchronous exception relating to a time and sales event</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesEventArgs.Instrument">
      <summary>Gets the Instrument associated with the event</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesSubscription.#ctor">
      <summary>Instantiates a new instance of the TimeAndSalesSubscription
class</summary>
      <returns>New TimeAndSalesSubscription object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesSubscription.#ctor(TradingTechnologies.TTAPI.Instrument,TradingTechnologies.TTAPI.Dispatcher,System.Boolean)">
      <summary>Instantiates a new instance of the TimeAndSalesSubscription class</summary>
      <returns>New TimeAndSalesSubscription object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesSubscription.#ctor(TradingTechnologies.TTAPI.Instrument,TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Instantiates a new instance of the TimeAndSalesSubscription class</summary>
      <returns>New TimeAndSalesSubscription object</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Start">
      <summary>Submits a subscription request for time and sales data for this Instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Dispatcher">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;96b3d0aa-8b63-4a8c-a459-94ba3922d544&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Instrument">
      <summary>Gets the instrument associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.TimeAndSalesSubscription.Update">
      <summary>Fired when time and sales data changes for an instrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TimedOutOrder.SiteOrderKey">
      <summary>Gets the TT-generated site order key associated with the order</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TradingEnabledChangedEventArgs.#ctor(TradingTechnologies.TTAPI.OrderFeed)">
      <summary>Instantiates an instance of the  class</summary>
      <returns> object associated with the <paramref name="OrderFeed" /></returns>
      <param name="orderFeed">
        <paramref name="OrderFeed" /> object</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TradingEnabledChangedEventArgs.OrderFeed">
      <summary>Gets the OrderFeed whose trading status changed</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.CreateUniversalLoginTTAPI">
      <summary>Creates a TT API application instance based on a TT Universal LoginCreates a TT API application instance based on a TT Universal Login with default options</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.CreateXTraderModeTTAPI">
      <summary>Creates a TT API application instance based on the currently-running X_TRADER application</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.Shutdown">
      <summary>Terminates the TT API application</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.Start">
      <summary>Starts the TT API and connects to the appropriate price feeds</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.StartFillFeed">
      <summary>Logs in to the Fill Feeds for all visible Markets</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.StartOrderFeed">
      <summary>Logs in to the Order Feeds for all visible Markets</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.CreateUniversalLoginTTAPI(TradingTechnologies.TTAPI.Dispatcher,System.String,System.String,TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions,TradingTechnologies.TTAPI.ApiInitializeHandler)">
      <summary>Creates a TT API application instance based on a TT Universal Login with custom options</summary>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
      <param name="userName">String containing the trader login username</param>
      <param name="password">String containing the trader login password</param>
      <param name="options">UniversalLoginTTAPIOptions object contain the custom settingsUniversalLoginTTAPIOptions object contain the custom settings</param>
      <param name="callback">ApiInitializeHandler delegate to call</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.CreateUniversalLoginTTAPI(TradingTechnologies.TTAPI.Dispatcher,System.String,System.String,TradingTechnologies.TTAPI.ApiInitializeHandler)">
      <summary>Creates a TT API application instance based on a TT Universal Login with default options</summary>
      <param name="dispatcher">Dispatcher object associated with the thread that manages the callbacks</param>
      <param name="userName">String containing the trader login username</param>
      <param name="password">String containing the trader login password</param>
      <param name="callback">ApiInitializeHandler delegate to call</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.CreateXTraderModeTTAPI(TradingTechnologies.TTAPI.Dispatcher,TradingTechnologies.TTAPI.XTraderModeTTAPIOptions,TradingTechnologies.TTAPI.ApiInitializeHandler)">
      <summary>Creates a TT API application instance based on the currently-running X_TRADER application with custom settings</summary>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
      <param name="options">XTraderModeTTAPIOptions object contain the custom settings</param>
      <param name="callback">ApiInitializeHandler delegate to call</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPI.CreateXTraderModeTTAPI(TradingTechnologies.TTAPI.Dispatcher,TradingTechnologies.TTAPI.ApiInitializeHandler)">
      <summary>Creates a TT API application instance based on the currently-running X_TRADER application</summary>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
      <param name="callback">ApiInitializeHandler delegate to call</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPI.ApplicationId">
      <summary>Gets the ID assigned to the application by the operating system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPI.AutospreaderManager">
      <summary>Gets the AutospreaderManager object that manages the
collection of spreads</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPI.IsMultiBroker">
      <summary>Gets whether the application is running in a TT multi-broker environment</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPI.IsSimulation">
      <summary>Gets whether the application is running in simulation mode</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.TTAPI.LicenseIssue">
      <summary>Fired when a licensing issue is detected for a TT product</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.TTAPI.ShutdownCompleted">
      <summary>Triggered when the application completes its shutdown tasks</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.TTAPI.UnhandledManagedException">
      <summary>Triggered when a managed exception is thrown</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.TTAPI.UnhandledNativeException">
      <summary>Triggered when a native exception is thrown</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.TTAPIOptions.#ctor">
      <summary>Creates a new instance of the TTAPIOptions class</summary>
      <returns>New TTAPIOptions instance</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPIOptions.ApplicationId">
      <summary>Gets or sets the ID assigned to the application by the operating system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPIOptions.EnableImplieds">
      <summary>Gets or sets whether to use the TT Implieds Engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPIOptions.PreferredGatewayRules">
      <summary>Gets or sets which gateways to use for accessing market data</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPIOptions.StartOrderFillFeed">
      <summary>Gets or sets whether to start the Order and Fill Feeds automatically during startup</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPIOptions.UseExchangeNames">
      <summary>Gets or sets whether to use Exchange-provided contract names, when available</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TTAPIOptions.UseProductAlias">
      <summary>Gets or sets whether to use product aliases when searching for products</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.TTAPIOptions.DefaultApplicationId">
      <summary>Gets the default application ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TypedField`1.ChangeDirection">
      <summary>Gets a value that indicates the direction in which the field value changed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.TypedField`1.Value">
      <summary>Returns the value of a typed field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UInt64Field.Value">
      <summary>Gets the field value</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UnhandledManagedExceptionEventArgs.Exception">
      <summary>Gets the thrown exception</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UnhandledManagedExceptionEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether you handled the exception</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UnhandledNativeExceptionEventArgs.ExceptionCode">
      <summary>Gets the thrown exception</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UnhandledNativeExceptionEventArgs.Handled">
      <summary>Gets or sets a value that indicates whether you handled the exception</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.UniversalLoginTTAPI.Start">
      <summary>Attempts to login to TT User Setup with the specified username and password</summary>
      <exception caption="InvalidOperation" cref="System.InvalidOperationException">&lt;i&gt;Already authenticated&lt;/i&gt;
&lt;br&gt;
The TTAPI allows an application to log into TT User Setup only once.
&lt;p&gt;
&lt;i&gt;Cannot attempt to authenticate while in the process of authenticating&lt;/i&gt;
&lt;br&gt;
An authentication attempt is currently in progress.
&lt;/p&gt;</exception>
    </member>
    <member name="M:TradingTechnologies.TTAPI.UniversalLoginTTAPI.StartFillFeed">
      <summary>Logs in to the Fill Feeds for all visible Markets</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.UniversalLoginTTAPI.StartOrderFeed">
      <summary>Logs in to the Order Feeds for all visible Markets</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPI.ApplicationId">
      <summary>Gets the ID assigned to the application by the operating system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPI.AutospreaderManager">
      <summary>Gets the AutospreaderManager object that manages the
collection of spreads</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPI.Session">
      <summary>Gets the session that created this <strong>UniversalLoginTTAPI</strong> instance</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.UniversalLoginTTAPI.AuthenticationStatusUpdate">
      <summary>Triggered when the status of a Market login connection changes</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions.ApplicationId">
      <summary>Gets or sets the ID assigned to the application by the operating system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions.EnableImplieds">
      <summary>Gets or sets whether to use the TT Implieds Engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions.StartOrderFillFeed">
      <summary>Gets or sets whether to start the Order and Fill Feeds automatically during startup</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions.UseExchangeNames">
      <summary>Gets or sets whether to use Exchange-provided contract names, when available</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.UniversalLoginTTAPIOptions.UseProductAlias">
      <summary>Gets or sets whether to use product aliases when searching for products</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.WorkerDispatcher.BeginInvokeShutdown">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.WorkerDispatcher.Dispose">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.WorkerDispatcher.InvokeShutdown">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.WorkerDispatcher.Run">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.WorkerDispatcher.Dispose">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.WorkerDispatcher.IsDisposed">
      <summary>Gets whether any reference point to the Dispatcher still exists</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.WorkupOwnerUpdatedEventArgs.IsOwner">
      <summary>Gets whether this trader is the owner of the workup order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.WorkupOwnerUpdatedEventArgs.Order">
      <summary>Gets the workup order that changed owners</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.XTraderModeTTAPI.Start">
      <summary>Logs into TT User Setup with the credentials associated with the active X_TRADER application</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.XTraderModeTTAPI.StartFillFeed">
      <summary>Logs in to the Fill Feeds for all visible Markets</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.XTraderModeTTAPI.StartOrderFeed">
      <summary>Logs in to the Order Feeds for all visible Markets</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.XTraderModeTTAPI.WriteAuditTrail(TradingTechnologies.TTAPI.AuditTrailSeverity,System.String)">
      <summary>Writes a custom message to the X_TRADER Audit Trail</summary>
      <returns>
        <strong>true</strong> if successful; <strong>false</strong>, otherwise</returns>
      <param name="severity">AuditTrailSeverity enumeration indicating the severity to attach to
the message</param>
      <param name="message">
        <para>String containing the message text (255 character maximum)</para>
      </param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPI.ApplicationId">
      <summary>Gets the ID assigned to the application by the operating system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPI.AutospreaderManager">
      <summary>Gets the AutospreaderManager object that manages the
collection of spreads</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPI.Session">
      <summary>Gets the session that created this <strong>XTraderModeTTAPI</strong> instance</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.XTraderModeTTAPI.ConnectionStatusUpdate">
      <summary>Triggered when the connection between the application and X_TRADER updates</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.XTraderModeTTAPI.XTraderStatusChanged">
      <summary>Triggered when the available features of the X_TRADER application associated with this TT API client changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.#ctor">
      <summary>Instantiates an instance of the XTraderModeTTAPIOptions class</summary>
      <returns>New XTraderModeTTAPIOptions instance</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.ApplicationId">
      <summary>Gets or sets the ID assigned to the application by the operating system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.EnableImplieds">
      <summary>Gets or sets whether to use the TT Implieds Engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.StartOrderFillFeed">
      <summary>Gets or sets whether to start the Order and Fill Feeds automatically during startup</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.SupportDetailedPosition">
      <summary>Gets or sets whether to aggregate SODs by account or MGT</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.UseExchangeNames">
      <summary>Gets or sets whether to use Exchange-provided contract names, when available</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.UseProductAlias">
      <summary>Gets or sets whether to use product aliases when searching for products</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTraderModeTTAPIOptions.XTServicesConnectionTimeout">
      <summary>Gets or sets a timeout value used while waiting for a connection to XTServices</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Timeout cannot be less than zero.&lt;/i&gt;
&lt;br&gt;
The timeout must be a positive integer.</exception>
    </member>
    <member name="T:TradingTechnologies.TTAPI.ApiInitializeHandler">
      <summary>Represents the method that notifies callers when the requested TTAPI object is initialized</summary>
      <returns>New TTAPI.ApiInitializeHandler delegate</returns>
    </member>
    <member name="T:TradingTechnologies.TTAPI.FieldsUpdatedEventHandler">
      <summary>Delegate matching the PriceSubscription.FieldsUpdated
event</summary>
      <returns>Void</returns>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.ASReturnCodes">
      <summary>Possible return codes for Autospreader requests</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType">
      <summary>Defines constants for types of Autospreader spread legs</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType.SniperLeg">
      <summary>Leg is part of a sniper order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType.TradeOut">
      <summary>Currently unused</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType.Hedge">
      <summary>Leg represents a hedge order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType.Quoting">
      <summary>Leg represents a quoting order</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType.None">
      <summary>Undefined</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegType.PositionReserve">
      <summary>Leg represents a position reserve order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode">
      <summary>Defines constants for the potential return codes when launching an Autospreader Instrument</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode.InvalidInstrumentMustBeSynthetic">
      <summary>(TT internal use only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode.InvalidConnectionInfo">
      <summary>An invalid OrderFeed was used in the LaunchToOrderFeed method call.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode.SpreadDetailsNotFound">
      <summary>(TT internal use only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode.SpreadNotFound">
      <summary>(TT internal use only)</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode.CommunicationError">
      <summary>Some internal error occurred</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.LaunchReturnCode.Success">
      <summary>The AutospreaderInstrument launched successfully to the specified OrderFeed</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.QuotingMode">
      <summary>Possible values for defining how quoting orders react to changes in the minimum hedge quantity</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.QuotingMode.DynamicInsideLean">
      <summary>Leans on only the inside market of the hedge legs and, therefore, only considers the size of the hedge leg’s inside market. If that volume is less than the
minimum hedge quantity, the quoting order will be reduced to the largest size that could be fully hedged at the inside market of the hedge leg(s).</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.QuotingMode.AllOrNoneWithResubmit">
      <summary>Resubmits a quoting order sufficient hedge volume returns, use. Note that with this option, the spread order will persist and remain working even though no
quoting orders are working in the market; quoting orders will automatically be resubmitted if sufficient hedge quantity returns.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.QuotingMode.AllOrNone">
      <summary>If the hedge market quantity drops below the minimum hedge quantity, the associated quoting order will be pulled from the market and will not be resubmitted
even if sufficient hedge market volume reappears at some later time.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.QuotingMode.NoDynamicLeaning">
      <summary>&lt;Internal use only&gt;</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.YieldType">
      <summary>Defines constants more ways to calculate yield</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.YieldType.Type6">
      <summary>Yield To Maturity: Price based on the rate of return if held until the maturity date.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.YieldType.Type5">
      <summary>((100000-Price)/1000): CBOT 30-day Fed Fund (ZQ) contract.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.YieldType.Type4">
      <summary>((10000-(Price+Strip Base))/100): Eurodollar Strip type yield, a base (settlement) is added to the instrument price before the Eurodollar conversion.
Calculation for the exchange traded Strip, Pack or Bundle.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.YieldType.Type3">
      <summary>((10000-Price)/100): yield is calculated by subtracting the instrument price from 10000 and dividing the result by 100. Calculation for the Eurodollar.</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.YieldType.Type2">
      <summary>
        <para>(100-price): Yield is calculated by subtracting the instrument price from 100. Calculation for the Euribor.</para>
      </summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Autospreader.YieldType.Type1">
      <summary>Instrument price is in yield, so no conversion is necessary</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder">
      <summary>Provides properties for accessing information about a leg of an Autospreader order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager">
      <summary>Provides methods for managing the collection of spreads available for Autospreader</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder">
      <summary>Provides properties and methods for accessing a working synthetic Autospreader order</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile">
      <summary>Provides properties and methods for creating a regular or synthetic Autospreader order to submit to a TT Gateway</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.ConnectionDataChangedEventArgs">
      <summary>Represents the information provided by the ASInstrumentTradeSubscription.ConnectionDataChanged
event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequest">
      <summary>Submits a request to create an Autospreader Instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequestEventArgs">
      <summary>Represents the information provided by the CreateAutospreaderInstrumentRequest.Completed
event</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.Legs">
      <summary>Represents the group of legs comprising an Autospreader instrument</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.SpreadDetails">
      <summary>Represents the characteristics of an Autospreader spread</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.SpreadDetailsEventArgs">
      <summary>Represents the event arguments sent in one of the SpreadDetailSubscription callbacks</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription">
      <summary>Provides properties, methods, and events for monitoring an Autospreader SpreadDetails object</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.SpreadException">
      <summary>Represents an exception thrown when working with spreads</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails">
      <summary>Represents the characteristics of a single leg of an Autospreader spread</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.SpreadReadyStateChangedEventArgs">
      <summary>Represents the event arguments sent in an AutospreaderInstrument.TradableStatusChanged callback</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Autospreader.TradableStatusChangedEventArgs">
      <summary>Represents the event arguments sent in an AutospreaderInstrument.TradableStatusChanged
callback</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.Color">
      <summary>Gets the color to associate with the spread and its leg orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.IsHedge">
      <summary>Gets whether the leg is the hedge order of the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.IsQuoting">
      <summary>Gets whether the leg is the quoting order of the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.IsSniperLeg">
      <summary>Gets whether the leg is part of a sniper spread order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.LegInstrumentQuantity">
      <summary>Gets the spread ratio quantity for the spread leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.LegMultiplier">
      <summary>Gets the spread multiplier for the spread leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.LegNumber">
      <summary>Gets the index position of this leg in the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.LegType">
      <summary>Gets the type of order represented by this leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.SpreadGatewayKey">
      <summary>Gets the GatewayKey associated with the ASE Server</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.SpreadId">
      <summary>Gets the unique ID for the associated AutospreaderInstrument</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderLegOrder.SpreadName">
      <summary>Gets the name of the spread associated with this spread leg order</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.AddSpreadDetails(TradingTechnologies.TTAPI.Autospreader.SpreadDetails)">
      <summary>Adds a spread to the spread manager</summary>
      <exception caption="ArgumentNullException" cref="System.ArgumentNullException">The &lt;i&gt;spreadDetail&lt;/i&gt; parameter is null.</exception>
      <returns>ASReturnCodes enum indicating the status of the request</returns>
      <param name="spreadDetail">SpreadDetails object representing the spread to add</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.CloneSpreadDetails(TradingTechnologies.TTAPI.Autospreader.SpreadDetails,TradingTechnologies.TTAPI.Autospreader.SpreadDetails@)">
      <summary>Duplicates an existing SpreadDetails</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Invalid InstrumentKey: SeriesKey is empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;spreadDetails&lt;/i&gt; parameter has an empty &lt;b&gt;SpreadDetails.InstrumentKey.SeriesKey&lt;/b&gt; property.The &lt;i&gt;spreadDetails&lt;/i&gt; or  &lt;i&gt;clonedSpreadDetails&lt;/i&gt; parameter is null.</exception>
      <returns>ASReturnCodes enum indicating the status of the request</returns>
      <param name="spreadDetails">SpreadDetails object representing the spread to duplicate</param>
      <param name="clonedSpreadDetails">(Out parameter) SpreadDetails object containing the duplicate
spread</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.DeleteSpreadDetails(TradingTechnologies.TTAPI.Autospreader.SpreadDetails)">
      <summary>Removes a spread from the spread manager</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Invalid InstrumentKey: SeriesKey is empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;spreadDetails&lt;/i&gt; parameter has an empty &lt;b&gt;SpreadDetails.InstrumentKey.SeriesKey&lt;/b&gt; property.The &lt;i&gt;spreadDetail&lt;/i&gt; parameter is null.</exception>
      <returns>ASReturnCodes enum indicating the status of the request</returns>
      <param name="spreadDetail">SpreadDetails object representing the spread to delete</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.GetAllSpreadDetails">
      <summary>Returns a list of all spreads managed by the spread manager</summary>
      <returns>List of SpreadDetails objects</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.GetSpreadDetails(TradingTechnologies.TTAPI.InstrumentKey)">
      <summary>Returns the spread identified by its InstrumentKey</summary>
      <returns>SpreadDetails object for the spread</returns>
      <param name="instrumentKey">InstrumentKey object mapped to the spread</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.GetValidOrderFeeds(TradingTechnologies.TTAPI.Autospreader.SpreadDetails,TradingTechnologies.TTAPI.Session)">
      <summary>Gets the order feeds to which a spread can be launched</summary>
      <returns>Collection of OrderFeed objects to which you can launch the specified thread</returns>
      <param name="spreadDetails">SpreadDetails object representing the spread to check</param>
      <param name="session">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Session.html">Session</a> object representing the trader's credentials</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.RenameSpreadDetails(TradingTechnologies.TTAPI.Autospreader.SpreadDetails,System.String)">
      <summary>Changes the name of a spread</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;Invalid InstrumentKey: SeriesKey is empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;spreadDetails&lt;/i&gt; parameter has an empty &lt;b&gt;SpreadDetails.InstrumentKey.SeriesKey&lt;/b&gt; property.
&lt;p&gt;
&lt;i&gt;New name is empty&lt;/i&gt;
&lt;br&gt;
The &lt;i&gt;newName&lt;/i&gt; parameter is empty.The &lt;i&gt;spreadDetail&lt;/i&gt; or &lt;i&gt;newName&lt;/i&gt; parameter is null.</exception>
      <returns>ASReturnCodes enum indicating the status of the request</returns>
      <param name="spreadDetails">SpreadDetails object representing the spread to rename</param>
      <param name="newName"> containing the new name</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderManager.UpdateSpreadDetails(TradingTechnologies.TTAPI.Autospreader.SpreadDetails)">
      <summary>Updates a spread with new spread parameters</summary>
      <exception caption="ArgumentNullException" cref="System.ArgumentNullException">The &lt;i&gt;spreadDetail&lt;/i&gt; parameter is null.</exception>
      <returns>ASReturnCodes enum indicating the status of the request</returns>
      <param name="spreadDetail">SpreadDetails object representing the updated spread</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.GetPositionReserveSOK(System.Int32)">
      <summary>Gets the site order key of a position reserve leg order</summary>
      <param name="legIndex">Position in the spread leg list of the desired leg order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.GetQueueHolderOrders(System.Int32)">
      <summary>Gets a collection of QueueHolder counts for the spread leg orders</summary>
      <returns>Number of queue holder orders for the specified leg</returns>
      <param name="legIndex">Position in the spread leg list of the desired leg order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.GetQueueHolderOrdersTotalCount">
      <summary>Gets the number of Queue Holder orders in both legs of a spread</summary>
      <returns>Sum of the number of Queue Holders in both legs of the spread</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.GetQuotingSOK(System.Int32,System.Int32)">
      <summary>Gets the site order key of a quoting leg order</summary>
      <returns>Site order key for the quoting leg order</returns>
      <param name="legIndex">Position in the spread leg list of the desired leg order</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.AccountName">
      <summary>Gets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.AccountType">
      <summary>Gets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Action">
      <summary>Gets the action to take with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Approval">
      <summary>Gets the approval status of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.BuySell">
      <summary>Gets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.CanceledQuantity">
      <summary>Gets the number of contracts deleted in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.CounterpartyGroupId">
      <summary>Gets the Group portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.CounterpartyMemberId">
      <summary>Gets the Member portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.CounterpartyTraderId">
      <summary>Gets the Trader portion of the TT MGT credentials of the counter party for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Destination">
      <summary>Gets the Exchange-specific order destination</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.DeviationQuantity">
      <summary>Gets the deviation factor to randomize the quantities submitted for disclosed quantity orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.DisclosedQuantity">
      <summary>Gets the quantity of the order visible in the market.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.ExchangeGroupId">
      <summary>Gets the Exchange member Group ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.ExchangeMemberId">
      <summary>Gets the Exchange member Member ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.ExchangeOrderId">
      <summary>Gets the ID the Exchange assigned this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.ExchangeTraderId">
      <summary>Gets the Exchange member Trader ID</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.ExchangeTransactionNumber">
      <summary>Gets the unique ID assigned this order by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.FeedConnectionKey">
      <summary>Gets the key for the Order Feed associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.FeeType">
      <summary>Gets the type of fee associated with the Order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.FFT2">
      <summary>Gets the FFT2 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.FFT3">
      <summary>Gets the FFT3 free-form text field</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.FillQuantity">
      <summary>Gets the order quantity already filled</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.GiveUp">
      <summary>Gets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.GroupId">
      <summary>Gets the Group portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.HoldOrderFeatures">
      <summary>Gets how a held order was resubmitted to the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsAutomated">
      <summary>Gets whether this order originates from an automated application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsChild">
      <summary>Gets whether this order represents a leg of a multi-leg order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsDownloaded">
      <summary>Gets whether this order was part of an order book download</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsEngineManaged">
      <summary>Gets whether the order is managed by a TT synthetic server engine</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsExchangeOrder">
      <summary>Gets whether an Exchange manages this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsHoldInRejectedOrder">
      <summary>Gets whether this order failed because of a hold-in timer (BrokerTec only)</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsOnHold">
      <summary>Gets whether the order is currently being held at the TT Gateway or Exchange.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsParent">
      <summary>Gets a value that indicates whether this order has child order legs</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsPositionReserveOrder">
      <summary>Indicates whether this is a position reserve (hold) order that represents the potential position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.IsSynthetic">
      <summary>Gets whether this order manages other child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.LegCount">
      <summary>Gets the number of legs in the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.LimitPrice">
      <summary>Gets the limit price for the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.MemberId">
      <summary>Gets the message text associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Message">
      <summary>Gets the message text associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.MinimumQuantity">
      <summary>Gets the minimum quantity available at the limit price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Modifiers">
      <summary>Gets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OldOrderNumber">
      <summary>Gets the previous number used for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OpenClose">
      <summary>Gets a value that indicates how this order affect the current position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OrderKey">
      <summary>Gets the unique ID associated with this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OrderNumber">
      <summary>Gets the number assigned by an Exchange for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OrderQuantity">
      <summary>Gets the number of contracts contained in this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OrderTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OrderType">
      <summary>Gets the type of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.OriginalAction">
      <summary>Gets the action specified in the original order submission</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.PendingFillQuantity">
      <summary>Gets the quantity filled, but not yet sent by the Exchange</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.PendingQuantity">
      <summary>Gets the quantity of spread units in a pending state</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.PriceCheck">
      <summary>Gets whether the TT API performs price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Processed">
      <summary>Gets the time the TT Gateway processed the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Received">
      <summary>Gets the time a TT Gateway received the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.RelatedOrderKey">
      <summary>Gets the unique key for a related order, such as a OCO order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.RelatedOrderKeyType">
      <summary>Gets the relationship between two orders, if applicable</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.ReloadOffset">
      <summary>Gets the number of ticks away from the price of the previously-disclosed order to submit the next</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Restriction">
      <summary>Gets the restriction associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Sender">
      <summary>Gets the IP address of the machine used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SenderCountryCode">
      <summary>Gets the country code for the trader that submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SenderRegionCode">
      <summary>Gets the region code of the trader who submitted the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Sent">
      <summary>Gets the IP address of the machine used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Session">
      <summary>Gets the session representing the trader responsible for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SiteOrderKey">
      <summary>Gets the unique ID that TT uses to identify an order throughout its lifetime</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SlicerType">
      <summary>Gets the type of slicer to use for the spread order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SpreadColor">
      <summary>Gets the color associated with the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.Status">
      <summary>Gets the status of most recent action on the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.StatusHistory">
      <summary>Gets a value indicating the history of triggers for a trigger order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.StatusModifier">
      <summary>Gets additional status information for a pending order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.StopPrice">
      <summary>Gets the stop price for stop order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.StopTriggerQuantity">
      <summary>Gets the minimum quantity to trigger a stop price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SubUserId">
      <summary>Gets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SyntheticOrderKey">
      <summary>Gets the site order key for the parent synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SyntheticOrderModifier">
      <summary>Gets the synthetic order modifier set for the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.SyntheticOrderStatus">
      <summary>Gets the status of this synthetic order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.TimeInForce">
      <summary>Gets or sets how long to leave an order working in the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.TraderId">
      <summary>Gets the TT Trader ID of the trader that submitted the orderTrader portion of the TT MGT used to submit the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.TradeSession">
      <summary>Gets the Exchange trading session ID for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.TradeState">
      <summary>Gets the current state of the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.UndisclosedQuantity">
      <summary>Gets the undisclosed quantity of the existing order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.UserData">
      <summary>Gets the user-defined information associated with an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.UserName">
      <summary>Gets the trader login</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.UserTag">
      <summary>Gets the user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrder.WorkingQuantity">
      <summary>Gets the quantity of the order still working in the market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.#ctor">
      <summary>Instantiates and instance of the AutoSpreaderSyntheticOrderProfile class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.#ctor(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.AutospreaderInstrument,System.String)">
      <summary>Instantiates an instance of the AutoSpreaderSyntheticOrderProfile class with
custom Customer Defaults</summary>
      <returns>New AutoSpreaderSyntheticOrderProfile
instance</returns>
      <param name="gatewayKey">GatewayKey object identifying the
Autospreader SE Server to handle the order</param>
      <param name="autospreaderInstrument">AutospreaderInstrument object for the spread to submit</param>
      <param name="customer"> containing the X_TRADER Customer Defaults to use for the order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.#ctor(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.AutospreaderInstrument)">
      <summary>Instantiates an instance of the AutoSpreaderSyntheticOrderProfile class with
default Customer Defaults</summary>
      <returns>New AutoSpreaderSyntheticOrderProfile
instance</returns>
      <param name="gatewayKey">GatewayKey object identifying the Autospreader SE Server to handle the order</param>
      <param name="autospreaderInstrument">AutospreaderInstrument object for the spread to submit</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.#ctor(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.BrokerKey,TradingTechnologies.TTAPI.AutospreaderInstrument,System.String)">
      <summary>Instantiates an instance of the AutoSpreaderSyntheticOrderProfile class for a broker, using custom Customer Defaults</summary>
      <returns>New AutoSpreaderSyntheticOrderProfile
instance</returns>
      <param name="gatewayKey">GatewayKey object identifying the
Autospreader SE Server to handle the order</param>
      <param name="brokerKey">BrokerKey object identifying the broker</param>
      <param name="autospreaderInstrument">AutospreaderInstrument object for the spread to submit</param>
      <param name="customer"> containing the X_TRADER Customer Defaults to use for the order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.#ctor(TradingTechnologies.TTAPI.GatewayKey,TradingTechnologies.TTAPI.BrokerKey,TradingTechnologies.TTAPI.AutospreaderInstrument)">
      <summary>Instantiates an instance of the AutoSpreaderSyntheticOrderProfile class for a broker, using default Customer Defaults</summary>
      <returns>New AutoSpreaderSyntheticOrderProfile
instance</returns>
      <param name="gatewayKey">GatewayKey object identifying the Autospreader SE Server to handle the order</param>
      <param name="brokerKey">BrokerKey object identifying the broker</param>
      <param name="autospreaderInstrument">AutospreaderInstrument object for the spread to submit</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.CreateNewOrderProfile">
      <summary>Creates a new order profile based on this Autospreader order</summary>
      <returns>New OrderProfileBase instance</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GetPositionReserveSOK(System.Int32)">
      <summary>Gets the site order key of a position reserve leg order</summary>
      <param name="legIndex">Position in the spread leg list of the desired leg order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GetQueueHolderOrders">
      <summary>Gets a collection of QueueHolder counts for the spread leg orders</summary>
      <returns>List with the count for each leg of the spread order</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GetQueueHolderOrdersTotalCount">
      <summary>Gets the number of Queue Holder orders in both legs of a spread</summary>
      <returns>Sum of the number of Queue Holders in both legs of the spread</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GetQuotingSOK(System.Int32,System.Int32)">
      <summary>Gets the site order key of a quoting leg order</summary>
      <returns>Site order key for the quoting leg order</returns>
      <param name="legIndex">Position in the spread leg list of the desired leg order</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.SetQueueHolderOrders(System.Collections.Generic.IList{System.Int32})">
      <summary>Sets the number of Queue Holder orders to submit for each leg of a spread</summary>
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">Cannot enable Queue Holder Order if order profile has been created from an existing order. -- Spread Configuration not found. -- Must have exactly 2 legs to set Queue Holder OrdersQueue Holder Orders collection must contain 2 elements. -- Queue Holder Orders value must be between 0 and 9.</exception>
      <param name="queuHolderOrders">Two-element list of integers indicating the number of Queue Holder orders to use for each leg</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GetQueueHolderOrders">
      <summary>Gets the number of Queue Holder orders for each leg of a spread</summary>
      <returns>Two-element list with the number of Queue Holder orders for each leg</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GetQueueHolderOrders(System.Int32)">
      <summary>Gets the number of orders for one leg of a spread</summary>
      <returns>Number of orders in the specified spread leg</returns>
      <param name="legIndex">
        <strong>0</strong> for the first leg or <strong>1</strong> for the second leg</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.AccountName">
      <summary>Gets or sets the customer or trader account ID for an order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.AccountType">
      <summary>Gets or sets the type of trading account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.Action">
      <exception caption="InvalidOperationException" cref="System.InvalidOperationException">&lt;i&gt;Invalid order action specified.&lt;/i&gt;
&lt;br&gt;
You specified one of the following enumeration values that is not valid when setting this property: 
&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;li&gt;AdminDelete&lt;/li&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to Add if order profile has been created from an existing order.&lt;/i&gt;
&lt;br&gt;
When modifying an existing order, you cannot set this property to &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Cannot set action to anything other than Add or Hold if creating a new order.&lt;/i&gt;
&lt;br&gt;
When creating a new order profile, you must set the value to  &lt;b&gt;Add&lt;/b&gt; or &lt;b&gt;Hold&lt;/b&gt;.
&lt;/p&gt;</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.BuySell">
      <summary>Gets or sets the side of the market to take with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.GiveUp">
      <summary>Gets or sets the account of the give-up party</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.InstrumentDetails">
      <summary>Gets the information about the Instrument associated with the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.InstrumentKey">
      <summary>Gets the unique key associated with the Instrument used for this order profile</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.IsQueueHolderOrdersEnabled">
      <summary>Gets whether the spread uses Queue Holder orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.LegCount">
      <summary>Gets the number of legs in the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.LimitPrice">
      <summary>Gets or sets the price for a limit order</summary>
      <exception caption="Argument" cref="System.ArgumentException">%%Ex_VerifyPrice%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.MinimumQuantity">
      <summary>Gets or sets the minimum quantity available at the limit price</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">%%Ex_VerifyQuantity%%</exception>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.Modifiers">
      <summary>Gets or sets the change to a standard order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.OpenClose">
      <summary>Gets or sets the how this order affects the trader's position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.OrderTag">
      <summary>Gets or sets the optional, user-defined information included in parent and child orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.PendingQuantity">
      <summary>Gets the quantity of spread units in a pending state</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.PriceCheck">
      <summary>Gets or sets whether to perform price reasonability checks for this order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.ReloadOffset">
      <summary>Gets or sets the number of ticks away from the price of the previously-disclosed order to submit the next</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.Restriction">
      <summary>Gets or sets the order restriction</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.SlicerType">
      <summary>Gets or sets the type of slicer to use for the spread order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.SpreadColor">
      <summary>Gets the color associated with the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.SubUserId">
      <summary>Gets or sets the User ID of a trader within the same MGT group</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.SyntheticOrderModifier">
      <summary>Gets the synthetic order modifier set for the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.AutospreaderSyntheticOrderProfile.UndisclosedQuantity">
      <summary>Gets the undisclosed quantity of the existing order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.ConnectionDataChangedEventArgs.OrderFeed">
      <summary>Gets the OrderFeed whose connection status changed</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequest.#ctor(TradingTechnologies.TTAPI.Session,TradingTechnologies.TTAPI.Dispatcher,TradingTechnologies.TTAPI.Autospreader.SpreadDetails)">
      <summary>Creates an Autospreader instrument to execute on an ASE Server</summary>
      <param name="session">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Session.html">Session</a> object representing the trader's credentials</param>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
      <param name="spreadDetails">SpreadDetails object identifying the characteristics of the
spread</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequest.Error">
      <summary>Gets the error, if available</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequest.Instrument">
      <summary>Gets the Instrument associated with this subscription, if available</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequest.SpreadDetails">
      <summary>Gets the legs and characteristics of the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.CreateAutospreaderInstrumentRequestEventArgs.Instrument">
      <summary>Gets the AutospreaderInstrument found by the request</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.Legs.Append(TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails)">
      <summary>Adds a SpreadLegDetails to the end of the Legs collection</summary>
      <exception caption="ArgumentException" cref="System.ArgumentException">&lt;i&gt;spreadLegDetail already belongs to another SpreadDetails.&lt;/i&gt;
&lt;br&gt;
The specified &lt;i&gt;spreadLegDetail&lt;/i&gt; can only be used in one spread, so it cannot be added to this Legs collection.</exception>
      <returns>ASReturnCodes object indicating the status of the request</returns>
      <param name="spreadLegDetail">SpreadLegDetails object representing the leg to add</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.Legs.Clear">
      <summary>Deletes all spread legs in the Legs collection</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.Legs.CopyTo(System.Array,System.Int32)">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.Legs.Insert(System.Int32,TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails)">
      <summary>Inserts a SpreadLegDetails at the specified index position</summary>
      <exception caption="IndexOutOfRangeException" cref="System.IndexOutOfRangeException">&lt;i&gt;Index Out Of Range&lt;/i&gt;
&lt;br&gt;
The value of the &lt;i&gt;index&lt;/i&gt; parameter is not a valid index position for this collection.&lt;i&gt;spreadLegDetail already belongs to another SpreadDetails.&lt;/i&gt;
&lt;br&gt;
The specified &lt;i&gt;spreadLegDetail&lt;/i&gt; can only be used in one spread, so it cannot be added to this Legs collection.</exception>
      <returns>ASReturnCodes object indicating the status of the request</returns>
      <param name="index">Position (0-based) in the leg list to insert the new leg details</param>
      <param name="spreadLegDetail">SpreadLegDetails object representing the leg to add</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.Legs.Remove(System.Int32)">
      <summary>Deletes the SpreadLegDetails at the specified index position</summary>
      <returns>
        <b>true</b> if successful; <b>false</b>, otherwise</returns>
      <param name="index">Position (0-based) in the list of the leg to remove</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.Legs.Count">
      <summary>Gets the number of legs defined for the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.Legs.IsSynchronized">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.Legs.Item(System.Int32)">
      <summary>Gets the spread leg details for the leg at a specified index position</summary>
      <param name="i">Position (0-based) in the list of spread legs</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.Legs.SyncRoot">
      <summary>Implements the standard .NET method</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.#ctor">
      <summary>Instantiates an instance of the  class</summary>
      <returns>New SpreadDetails object</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.BasicSlop">
      <summary>Gets whether to use basic slop to control requoting</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.Color">
      <summary>Gets or sets a color to associate with the spread and its leg orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.InsideSlop">
      <summary>Gets or sets the worst price acceptable for this spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.InstrumentKey">
      <summary>Gets the InstrumentKey for the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.ISQSlop">
      <summary>Gets or sets whether to use inside smart quote to control requoting</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.Legs">
      <summary>Gets the legs in the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.LTPModel">
      <summary>Gets or sets how to calculate the last traded price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.Name">
      <summary>Gets or sets the name for this spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.OutsideSlop">
      <summary>Gets or sets the best price acceptable for this spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.PricingModel">
      <summary>Gets or sets how Autospreader represents the price for this spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.UserDefinedDenominator">
      <summary>Gets or sets the denominator for a custom tick size for the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.UserDefinedNumerator">
      <summary>Gets or sets the numerator for a custom tick size for the spread</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.UsingUserDefinedTickSize">
      <summary>Gets or sets whether to override the default spread tick size</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetails.Yield">
      <summary>Gets or sets whether the spread is a trades in yield</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetailsEventArgs.Key">
      <summary>Gets the  for the <see cref="SpreadDetails" /> identifying the spread</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.#ctor(TradingTechnologies.TTAPI.Session,TradingTechnologies.TTAPI.Dispatcher)">
      <summary>Instantiates an instance of the SpreadDetailSubscription class</summary>
      <returns>New  instance</returns>
      <param name="session">Session object representing the trader</param>
      <param name="dispatcher">
        <a href="TradingTechnologies.TTAPI~TradingTechnologies.TTAPI.Dispatcher.html">Dispatcher</a> object associated with the thread that manages the callbacks</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.Start">
      <summary>Starts a subscription</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.Dispose">
      <summary>Releases resources associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.Dispatcher">
      <summary>&lt;?xml:namespace prefix = innovasys ns = "http://www.innovasys.com/widgets" /&gt;&lt;innovasys:widget type="Include Topic"
layout="block"&gt;&lt;innovasys:widgetproperty layout="block"
name="source"&gt;96b3d0aa-8b63-4a8c-a459-94ba3922d544&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.Session">
      <summary>Gets the session associated with this subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.Status">
      <summary>Gets the current status of the subscription</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.Tag">
      <summary>Gets or sets a user-defined object for the subscription</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.SpreadDetailsAdded">
      <summary>Triggered when a new spread is created</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.SpreadDetailsDeleted">
      <summary>Triggered when a spread is deleted</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.Autospreader.SpreadDetailSubscription.SpreadDetailsUpdated">
      <summary>Triggered when a spread is updated</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadException.Code">
      <summary>Gets the error code for the exception</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadException.Message">
      <summary>Gets the error message text, if available</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.#ctor(TradingTechnologies.TTAPI.Instrument,TradingTechnologies.TTAPI.FeedConnectionKey)">
      <summary>Instantiates an instance of the SpreadLegDetails class</summary>
      <returns>New SpreadLegDetails object</returns>
      <param name="instrument">Instrument object representing the contract for this spread leg</param>
      <param name="feedConnectionKey">FeedConnectionKey object indicating which of the Instrument's order
feeds to use</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.ActiveQuoting">
      <summary>Gets or sets whether to send hedge orders at the same time as the quoting orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.BaseVolumeLean">
      <summary>Gets or sets the minimum quantity required for quoting orders to lean against</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.ConversionFactor">
      <summary>Gets or sets the factor by which the futures price is multiplied if the specified bond is delivered against it</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.ConvertTo365">
      <summary>Gets or sets whether to convert 360 days to 365 days</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.Coupon">
      <summary>Gets or sets the coupon's annual interest rate</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.CouponFrequency">
      <summary>Gets or sets the number of coupons per year for fixed income yield contracts</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.CustomerName">
      <summary>Gets or sets the Customer Defaults Account to use for the leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.DayCountType">
      <summary>Gets or sets the convent to use for counting the number of days between two dates</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.EOMConversion">
      <summary>Determines whether coupon payments always occur on the last day of the month if the settlement date falls on the last day of the month</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.FirstCouponDate">
      <summary>Gets or sets the first real coupon date</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.HedgeRound">
      <summary>Gets or sets whether Autospreader should send a hedge order when the quoted order is more than halfway filled</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.InsideSmartQuote">
      <summary>Gets or sets the number of ticks away from the market before re-quoting working orders</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.InstrumentKey">
      <summary>Gets the  for the contract associated with this spread leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.IssueDate">
      <summary>Gets or sets the date on which interest accrual begins</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.MaxOrderMove">
      <summary>Gets or sets the maximum number of ticks a leg price can move in a single price update before Autospreader pulls the order</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.MaxPriceMove">
      <summary>Gets or sets the maximum number of ticks a leg price can move in a single price update before ASE pulls the order from the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.Name">
      <summary>Gets the name of the  associated with the leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.PayupTicks">
      <summary>Gets or sets the number of ticks Autospreader can adjust the price of the limit order to fill the spread order.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.PriceMultiplier">
      <summary>Gets or sets the weighted value of the leg price to use when calculating the spread price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.PriceType">
      <summary>Gets or sets how to represent user-defined prices</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.QuantityMultiplier">
      <summary>Gets or sets the multiplier to use for the leg price when calculating the spread price</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.QueueHolderOrders">
      <summary>Gets or sets the number of outright leg orders to place at consecutive price levels away from the market in addition to the quoted quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.QuotingMode">
      <summary>Gets or sets the method to use for quoting spread legs</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.SettlementDate">
      <summary>Gets or sets the date the trade settles</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.SmartQuoteLimit">
      <summary>Gets or sets the limit, in ticks, a quoting order is allowed to work away from the price level that matches the spread differential.</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.SpreadRatio">
      <summary>Gets or sets the quantity of this leg in relation to the other spread legs</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.StripBase">
      <summary>Gets or sets the settlement price of the contracts in an exchange-traded strip, pack, or bundle</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.UsingYTMOptionalSettings">
      <summary>Gets or sets whether to use the optional yield-to-maturity settings</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadLegDetails.YieldType">
      <summary>Gets or sets the type of yield to use for this spread leg</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.SpreadReadyStateChangedEventArgs.State">
      <summary>Gets whether the spread is ready to be traded</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.TradableStatusChangedEventArgs.OrderFeed">
      <summary>Gets the OrderFeed associated with this event</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Autospreader.TradableStatusChangedEventArgs.Value">
      <summary>Gets whether orders for an AutospreaderInstrument can be submitted to the related OrderFeed</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.BrokerInfo">
      <summary>Represents the broker for a Customer Defaults entry</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.GatewayInfo">
      <summary>Represents the TT Gateway for a Customer Defaults entry</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.MarketInfo">
      <summary>Represents the market for a Customer Defaults entry</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductInfo">
      <summary>Represents the product for a Customer Defaults entry</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductTypeInfo">
      <summary>Represents the product type for a Customer Defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.BrokerInfo.BrokerId">
      <summary>Gets the ID associated with the broker</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.BrokerInfo.BrokerName">
      <summary>Gets the name associated with this broker</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.GatewayInfo.ToString">
      <summary>Returns the value as a string</summary>
      <returns> containing the customer default value, or "*" if the <strong>IsAny</strong> property is TRUE.</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.GatewayInfo.GatewayName">
      <summary>Gets the gateway from a Customer Defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.GatewayInfo.IsAny">
      <summary>Gets a value indicating a wildcard value for the market</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.MarketInfo.#ctor(System.Nullable{TradingTechnologies.TTAPI.MarketKey},System.Boolean)">
      <summary>Instantiates an instance of the
CustomerDefaults.MarketInfo structure</summary>
      <returns>New CustomerDefaults.MarketInfo instance</returns>
      <param name="anyMarket">
        <strong>true</strong> to use the Customer Defaults for all markets; <strong>false</strong>, otherwise</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.MarketInfo.IsAny">
      <summary>Gets a value indicating a wildcard value for the market</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.MarketInfo.MarketKey">
      <summary>Gets the MarketKey associated with the Market name defined in the customer defaults</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductInfo.#ctor(System.String,System.Boolean)">
      <summary>Instantiates and instance of the
CustomerDefaults.ProductInfo structure</summary>
      <returns>CustomerDefaults.ProductInfo object</returns>
      <param name="productName"> containing the name of the product</param>
      <param name="anyProduct">
        <strong>true</strong> to use the Customer Defaults for all products; <strong>false</strong>, otherwise</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductInfo.IsAny">
      <summary>Gets a value indicating a wildcard value for the product</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductInfo.ProductName">
      <summary>Gets the product from a Customer Defaults entry</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductTypeInfo.#ctor(System.Nullable{TradingTechnologies.TTAPI.ProductType},System.Boolean)">
      <summary>Instantiates and instance of the
CustomerDefaults.ProductTypeInfo structure</summary>
      <param name="productType"> value identifying the product type for this Customer Defaults entry or <see cref="null" /> when the <em>anyMarket</em> parameter is <strong>true</strong></param>
      <param name="anyProductType">
        <strong>true</strong> to use the Customer Defaults for all products; <strong>false</strong>, otherwise</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductTypeInfo.IsAny">
      <summary>Gets a value indicating a wildcard value for the product type</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductTypeInfo.ProductType">
      <summary>Gets the product type from a Customer Defaults entry</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry">
      <summary>Represents a single X_TRADER customer defaults record</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsException">
      <summary>Represents an exception thrown for customer default errors</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsSubscription">
      <summary>Provides properties, methods, and events for monitoring a trader's Customer Defaults settings</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.AccountName">
      <summary>Gets a value corresponding to the <strong>Account #</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.AccountType">
      <summary>Gets a value corresponding to the <strong>Acct Type</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.Broker">
      <summary>Gets a value corresponding to the <strong>Broker</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.Customer">
      <summary>Gets a value corresponding to the <strong>Customer</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.FFT2">
      <summary>Gets a value corresponding to the <strong>FFT2</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.FFT3">
      <summary>Gets a value corresponding to the <strong>FFT3</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.Gateway">
      <summary>Gets a value corresponding to the <strong>Gateway</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.GiveUp">
      <summary>Gets a value corresponding to the <strong>Give Up</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.GMId">
      <summary>Gets the ID of default gateway login for this customer default entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.IsSelected">
      <summary>Gets a value corresponding to the <strong>SEL</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.IsServerEntry">
      <summary>Gets whether these defaults were created by a TT User Setup Administrator</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.Market">
      <summary>Gets a value corresponding to the <strong>Market</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.OnBehalfOfAccount">
      <summary>Gets the name of the OBO account for this customer default</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.OnBehalfOfMemberGroupTrader">
      <summary>Gets the OBO MGT for this customer default</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.OnBehalfOfUser">
      <summary>Gets the name of the the OBO user for this customer default</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.Product">
      <summary>Gets a value corresponding to the <strong>Product</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.ProductType">
      <summary>Gets a value corresponding to the <strong>Product Type</strong> column for a customer defaults entry</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultEntry.UserTag">
      <summary>Gets the user-defined data in the Customer Defaults enter</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsException.#ctor">
      <summary>Instantiates an instance of the  class</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsException.#ctor(System.String)">
      <summary>Instantiates an instance of the class with a specified exception message</summary>
      <param name="message"> containing the message to return in the exception</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsException.#ctor">
      <summary>Instantiates a default instance of the class</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsSubscription.CustomerDefaults">
      <summary>Gets a collection of Customer Defaults associated with the user</summary>
    </member>
    <member name="E:TradingTechnologies.TTAPI.CustomerDefaults.CustomerDefaultsSubscription.CustomerDefaultsChanged">
      <summary>Fired when X_TRADER or TT User Setup changes a Customer Defaults entry<br />
Triggered when the X_TRADER Customer Defaults change</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Risk.PositionType">
      <summary>Represents support types of position adjustments</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Risk.PositionType.StartOfDay">
      <summary>Position represents a start-of-day (SOD) record</summary>
    </member>
    <member name="F:TradingTechnologies.TTAPI.Risk.PositionType.AdminFill">
      <summary>Position represents an manual or administrative fill</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Risk.AdminFillRecord">
      <summary>Represents the information for an administrative fill</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields">
      <summary>Encapsulates the required properties for a valid AdminFillRecord object</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Risk.StartOfDayRecord">
      <summary>Represents a start-of-day record</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields">
      <summary>Encapsulates the required properties for a valid StartofDayRecord object</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.AccountName">
      <summary>Gets or sets the customer or trader account number</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.AccountType">
      <summary>Gets or sets the account type associated with the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.BuySell">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Indicates the side of the market for this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.CounterPartyGiveUpId">
      <summary>
        <span style="font: 13px/18px &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Specifies the give-up member's clearing ID when the fill is assigned to another member</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.CounterpartyMemberId">
      <summary>
        <span style="font: 13px/18px &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Indicates the member ID of the counter party for the fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.ExchangeOrderId">
      <summary>Specifies the ID the Exchange assigned of the order associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.FFT2">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets or sets the FFT2 free-form text field</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.FFT3">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets or sets the FFT3 free-form text field</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.GiveUpId">
      <summary>
        <span style="font: 13px/18px &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Indicates the ID of the give-up member</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.GiveupMemberId">
      <summary>Indicates the Give-Up member's clearing ID for the position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.GroupId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.InstrumentDetails">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets the details of the Instrument associated with this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.MemberId">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Specifies the Member ID portion of the TT MGT associated with this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.OrderFeed">
      <summary>Gets the server connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.OrderNumber">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets or sets the order number assigned by the Exchange to associate with this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.OrderTag">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets or sets the user-defined text to include with this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.Price">
      <summary>Gets the price for the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.Quantity">
      <summary>Gets the fill quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.RiskAccount">
      <summary>Gets or sets the risk account</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.TraderId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.Username">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets the trader login associated with the fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRecord.UserTag">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets the user-defined text included in the fill</span>
      </summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.#ctor">
      <summary>Instantiates an instance of the  class</summary>
      <returns>New  instance</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.BuySell">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Indicates the side of the market for this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.GroupId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.InstrumentDetails">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Gets the details of the Instrument associated with this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.MemberId">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Specifies the Member ID portion of the TT MGT associated with this fill</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.OrderFeed">
      <summary>Gets the server connection</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.Price">
      <summary>Gets the price for the fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.Quantity">
      <summary>Gets the fill quantity</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.TraderId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this fill</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.AdminFillRequiredFields.Username">
      <summary>Indicates the trader login associated with this fill</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Risk.RiskManager.Delete(TradingTechnologies.TTAPI.Fill,System.String@)">
      <summary>Deletes a published SOD</summary>
      <returns>
        <strong>true</strong> if the SOD Fill was succesfully deleted; <strong>false</strong>, otherwise</returns>
      <param name="startOfDayFill">Fill object corresponding to the SOD record to delete</param>
      <param name="errorMessage">String containing the error message if the delete action fails or an empty string if it succeeds</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Risk.RiskManager.Publish">
      <summary>Publishes a position adjustment to a Fill Server</summary>
      <returns>
        <strong>true</strong> if the PositionRecord was succesfully published; <strong>false</strong>, otherwise</returns>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Risk.RiskManager.Publish(TradingTechnologies.TTAPI.Risk.StartOfDayRecord,System.String@)">
      <summary>Publishes an SOD record to the fill server</summary>
      <returns>
        <strong>true</strong> if the SOD was succesfully published; <strong>false</strong>, otherwise</returns>
      <param name="startOfDayRecord">StartOfDayRecord object representing the SOD to publish</param>
      <param name="errorMessage">String containing the error message if the publish action fails or an empty string if it succeeds</param>
    </member>
    <member name="M:TradingTechnologies.TTAPI.Risk.RiskManager.Publish(TradingTechnologies.TTAPI.Risk.AdminFillRecord,System.String@)">
      <summary>Publishes an administrative fill to the fill server</summary>
      <returns>
        <strong>true</strong> if the admin fill was succesfully published; <strong>false</strong>, otherwise</returns>
      <param name="adminFillRecord">AdminFillRecord object representing the admin fill to publish</param>
      <param name="errorMessage">String containing the error message if the publish action fails or an empty string if it succeeds</param>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.BuySell">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Indicates whether this SOD represents a long or short position</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.GroupId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.InstrumentDetails">
      <summary>Gets the details of the Instrument associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.MemberId">
      <summary>Specifies the Member ID portion of the TT MGT associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.OrderFeed">
      <summary>Gets the trader's order feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.Price">
      <summary>Gets or sets the price of each contract represented by the SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.Quantity">
      <summary>Represents the number of contracts in the position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.RiskAccount">
      <summary>Indicates the risk account associated with the SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.TraderId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRecord.Username">
      <summary>Indicates the trader login associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.BuySell">
      <summary>
        <span style="font: 13px/normal &amp;quot;Segoe UI&amp;quot;, Verdana, Arial; color: rgb(0, 0, 0); text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px;">
Indicates whether this SOD represents a long or short position</span>
      </summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.GroupId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.InstrumentDetails">
      <summary>Gets the details of the Instrument associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.MemberId">
      <summary>Specifies the Member ID portion of the TT MGT associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.OrderFeed">
      <summary>Gets the trader's order feed</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.Quantity">
      <summary>Represents the number of contracts in the position</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.TraderId">
      <summary>Specifies the Group ID portion of the TT MGT associated with this SOD</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.Risk.StartOfDayRequiredFields.Username">
      <summary>Indicates the trader login associated with this SOD</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus">
      <summary>Represents a snapshot of the X_TRADER application status</summary>
    </member>
    <member name="T:TradingTechnologies.TTAPI.XTInteraction.XTraderStatusChangedEventArgs">
      <summary>Represents the event arguments sent when the status of the associated X_TRADER application changes</summary>
    </member>
    <member name="M:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.ToString">
      <summary>Returns the X_TRADER status enum as a string</summary>
      <returns>String containing the enum value</returns>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.IsAvailable">
      <summary>Indicates whether the TT API application can run in X_TRADER mode with the associated X_TRADER application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.IsCredentialMismatch">
      <summary>Gets whether the credentials for the TT API application and associated X_TRADER instance match</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.IsPro">
      <summary>Indicates whether X_TRADER has a Pro license</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.IsRunning">
      <summary>Gets whether the X_TRADER application is currently running on this system</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.Username">
      <summary>Gets the Username used to log in to the X_TRADER application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.ValidOperationalMode">
      <summary>Indicates whether X_TRADER allows this TT API application to access it</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatus.Version">
      <summary>Gets the software version of the X_TRADER application</summary>
    </member>
    <member name="P:TradingTechnologies.TTAPI.XTInteraction.XTraderStatusChangedEventArgs.Status">
      <summary>Gets the updated X_TRADER status</summary>
    </member>
  </members>
</doc>